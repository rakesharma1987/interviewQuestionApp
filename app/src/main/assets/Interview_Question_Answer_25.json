[
  {
    "SrNo": 1,
    "Question": "How would you write a query to find the nth (or 2nd) highest salary based on the department and show only one employee for each department?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th,\n        .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #F74380;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #81D4FA;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #F74380;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n                ul {\n            margin-left: 0;\n            padding-left: 20px;\n        }\n        @media (max-width: 768px) {\n            .SQLCode,\n            .tg {\n                font-size: 14px;\n            }\n            .tg th,\n            .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode,\n            .tg {\n                font-size: 13px;\n            }\n            .tg th,\n            .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - EMPLOYEES</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>EMPLOYEE_ID</th>\n                    <th>EMPLOYEE_NAME</th>\n                    <th>DEPARTMENT_NAME</th>\n                    <th>SALARY</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>101</td>\n                    <td>Kurt Angle</td>\n                    <td>Sales</td>\n                    <td>110000</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>102</td>\n                    <td>Hulk Hogan</td>\n                    <td>Sales</td>\n                    <td>120000</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>103</td>\n                    <td>Rey Mysterio</td>\n                    <td>Sales</td>\n                    <td>110000</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>104</td>\n                    <td>Triple H</td>\n                    <td>Sales</td>\n                    <td>85000</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>105</td>\n                    <td>John Cena</td>\n                    <td>Engineering</td>\n                    <td>95000</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>106</td>\n                    <td>Ric Flair</td>\n                    <td>Engineering</td>\n                    <td>115000</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>107</td>\n                    <td>Randy Savage</td>\n                    <td>Engineering</td>\n                    <td>115000</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>108</td>\n                    <td>Shawn Michaels</td>\n                    <td>Engineering</td>\n                    <td>125000</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <div class=\"scrollable-container\">\n        <pre class=\"SQLCode\"><span class=\"SQLComment\">-- Query to find the 2nd highest salary by department.</span>\n<span class=\"SQLKeyword\">SELECT</span> department_name<span class=\"SQLOperator\">,</span>\n       employee_id<span class=\"SQLOperator\">,</span>\n       employee_name<span class=\"SQLOperator\">,</span>\n       salary\n<span class=\"SQLKeyword\">FROM</span>   (<span class=\"SQLKeyword\">SELECT</span> department_name<span class=\"SQLOperator\">,</span>\n               employee_id<span class=\"SQLOperator\">,</span>\n               employee_name<span class=\"SQLOperator\">,</span>\n               salary<span class=\"SQLOperator\">,</span>\n               <span class=\"SQLFunction\">ROW_NUMBER</span>()\n                 <span class=\"SQLKeyword\">OVER</span> (\n                   <span class=\"SQLKeyword\">PARTITION BY</span> department_name\n                   <span class=\"SQLKeyword\">ORDER BY</span> salary <span class=\"SQLKeyword\">DESC</span>) <span class=\"SQLKeyword\">AS</span> rn\n        <span class=\"SQLKeyword\">FROM</span>   employees)\n<span class=\"SQLKeyword\">WHERE</span>  rn <span class=\"SQLOperator\">=</span> <span class=\"SQLString\">2</span><span class=\"SQLOperator\">;</span>\n</pre>\n    </div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>DEPARTMENT_NAME</th>\n                    <th>EMPLOYEE_ID</th>\n                    <th>EMPLOYEE_NAME</th>\n                    <th>SALARY</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>Sales</td>\n                    <td>103</td>\n                    <td>Rey Mysterio</td>\n                    <td>110000</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>Engineering</td>\n                    <td>107</td>\n                    <td>Randy Savage</td>\n                    <td>115000</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li>\n            <strong>Select Clause:</strong>\n            <ul>\n                <li>Columns selected:\n                    <ul>\n                        <li><code>department_name</code>: The name of the department to which the employee belongs.</li>\n                        <li><code>employee_id</code>: The unique identifier for each employee.</li>\n                        <li><code>employee_name</code>: The name of the employee.</li>\n                        <li><code>salary</code>: The salary of the employee.</li>\n                    </ul>\n                </li>\n            </ul>\n        </li>\n        <li>\n            <strong>PARTITION BY Clause:</strong>\n            <ul>\n                <li>The <code>PARTITION BY department_name</code> divides the result set into partitions based on each department. The <code>ROW_NUMBER()</code> function then assigns a sequential number to each employee's salary within these partitions.</li>\n            </ul>\n        </li>\n        <li>\n            <strong>ROW_NUMBER() Function:</strong>\n            <ul>\n                <li>This function assigns a unique rank to each row within a department partition, ordered by salary in descending order. The highest salary gets rank 1, the second highest gets rank 2, and so on.</li>\n            </ul>\n        </li>\n        <li>\n            <strong>WHERE Clause:</strong>\n            <ul>\n                <li>Filters the result to get the employee(s) with the 2nd highest salary in each department by checking where <code>rn</code> equals 2.</li>\n            </ul>\n        </li>\n    </ul>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 2,
    "Question": "What is the difference between the DELETE, TRUNCATE, and DROP commands in SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #F74380;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #81D4FA;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #F74380;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n                ul {\n            margin-left: 0;\n            padding-left: 20px;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 14px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 13px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">DELETE:</h4>\n    <ul>\n        <li><strong>Description</strong>: Removes specific rows from a table based on a condition specified in the WHERE clause. If no condition is provided, all rows are removed.</li>\n        <li><strong>Effect on Table</strong>: The table structure and all its attributes (columns, constraints, etc.) remain intact. Only the specified rows are deleted.</li>\n        <li><strong>Transaction Control</strong>: DELETE operations can be rolled back (i.e., they are transaction-safe).</li>\n        <li><strong>Usage Example</strong>:</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DELETE FROM</span> employees\n   <span class=\"SQLKeyword\">WHERE</span> employee_id = 101<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">DELETE FROM</span> employees<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">TRUNCATE:</h4>\n    <ul>\n        <li><strong>Description</strong>: Removes all rows from a table, effectively resetting it to empty.</li>\n        <li><strong>Effect on Table</strong>: The table structure, columns, and constraints remain intact, but all rows are removed.</li>\n        <li><strong>Transaction Control</strong>: TRUNCATE operations cannot be rolled back in Oracle databases, making it less flexible than DELETE but faster since it doesn't generate individual row delete logs.</li>\n        <li><strong>Usage Example</strong>:</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">TRUNCATE TABLE</\nspan> employees<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">DROP:</h4>\n    <ul>\n        <li><strong>Description</strong>: Completely removes the table and its structure from the database.</li>\n        <li><strong>Effect on Table</strong>: The table and all its data, structure, columns, and constraints are permanently deleted.</li>\n        <li><strong>Transaction Control</strong>: DROP operations cannot be rolled back.</li>\n        <li><strong>Usage Example</strong>:</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DROP TABLE</span> employees<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Summary of Effects:</h4>\n    <ul>\n        <li><strong>DELETE</strong>:\n            <ul>\n                <li>After execution: The table <code>employees</code> still exists with all its columns and constraints, but the specified rows matching the condition (or all rows if no condition is given) are deleted.</li>\n            </ul>\n        </li>\n        <li><strong>TRUNCATE</strong>:\n            <ul>\n                <li>After execution: The table <code>employees</code> still exists with all its columns and constraints, but it has no rows; it is empty.</li>\n            </ul>\n        </li>\n        <li><strong>DROP</strong>:\n            <ul>\n                <li>After execution: The table <code>employees</code> no longer exists in the database; both its data and structure are completely removed.</li>\n            </ul>\n        </li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 3,
    "Question": "Write a query to find and remove duplicate rows, keeping only the one with the highest timestamp.",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #F74380;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #81D4FA;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #F74380;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n                ul {\n            margin-left: 0;\n            padding-left: 20px;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 14px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 13px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Input Data: Table - TRANSACTIONS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>TRANSACTION_ID</th>\n                <th>CUSTOMER_NAME</th>\n                <th>TIMESTAMP</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>John Cena</td>\n                <td>06-01-2023 10:00:00</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>1</td>\n                <td>John Cena</td>\n                <td>06-01-2023 12:00:00</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>John Cena</td>\n                <td>06-01-2023 18:00:00</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>The Rock</td>\n                <td>06-02-2023 08:00:00</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>2</td>\n                <td>The Rock</td>\n                <td>06-02-2023 09:00:00</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>5</td>\n                <td>Stone Cold</td>\n                <td>06-03-2023 14:00:00</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>TRANSACTION_ID</th>\n                <th>CUSTOMER_NAME</th>\n                <th>TIMESTAMP</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>John Cena</td>\n                <td>06-01-2023 18:00:00</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>The Rock</td>\n                <td>06-02-2023 09:00:00</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Stone Cold</td>\n                <td>06-03-2023 14:00:00</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">Method 1: Using Aggregated Functions</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">--Method 1 by using Aggregated functions</span>\n<span class=\"SQLKeyword\">DELETE FROM</span> transactions t\n<span class=\"SQLKeyword\">WHERE</span> (<span class=\"SQLKeyword\">transaction_id</span><span class=\"SQLOperator\">,</span>customer_name<span class=\"SQLOperator\">,</span>timestamp) <span class=\"SQLKeyword\">not IN</span> (\n        <span class=\"SQLKeyword\">SELECT</span> transaction_id<span class=\"SQLOperator\">,</span>customer_name<span class=\"SQLOperator\">,</span> <span class=\"SQLFunction\">max</span>(timestamp)\n        <span class=\"SQLKeyword\">FROM</span> transactions\n        <span class=\"SQLKeyword\">group by</span> transaction_id<span class=\"SQLOperator\">,</span>customer_name)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Method 2: Using Analytical Functions</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">--Method 2 by using Analytical functions</span>\n<span class=\"SQLKeyword\">DELETE FROM</span> transactions\n      <span class=\"SQLKeyword\">WHERE</span> (<span class=\"SQLKeyword\">transaction_id</span><span class=\"SQLOperator\">,</span> <span class=\"SQLKeyword\">TIMESTAMP</span>) <span class=\"SQLKeyword\">IN</span> (\n  <span class=\"SQLKeyword\">SELECT</span> transaction_id<span class=\"SQLOperator\">,</span>\n         <span class=\"SQLKeyword\">TIMESTAMP</span>\n    <span class=\"SQLKeyword\">FROM</span> (\n           <span class=\"SQLKeyword\">SELECT</span> transaction_id<span class=\"SQLOperator\">,</span>\n                  <span class=\"SQLKeyword\">TIMESTAMP</span><span class=\"SQLOperator\">,</span>\n                  <span class=\"SQLFunction\">ROW_NUMBER</span>() <span class=\"SQLKeyword\">OVER</span> (<span class=\"SQLKeyword\">PARTITION BY</span> transaction_id<span class=\"SQLOperator\">,</span>\n                  customer_name <span class=\"SQLKeyword\">ORDER BY</span> <span class=\"SQLKeyword\">TIMESTAMP DESC</span>) <span class=\"SQLKeyword\">AS</span> rnk\n             <span class=\"SQLKeyword\">FROM</span> transactions\n         )\n   <span class=\"SQLKeyword\">WHERE</span> rnk <span class=\"SQLOperator\">&gt;</span> <span class=\"SQLString\">1</span>\n)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li>\n            <strong>Method 1:</strong> Uses a subquery to find the maximum timestamp for each combination of <code>transaction_id</code> and <code>customer_name</code>. Deletes rows from the <code>transactions</code> table that do not have the maximum timestamp.\n        </li>\n        <li>\n \n <strong>Method 2:</strong> Uses the <code>ROW_NUMBER()</code> analytical function to assign a rank to each row within each <code>transaction_id</code> and <code>customer_name</code> partition, ordered by timestamp in descending order. Deletes rows with a rank greater than 1, keeping only the row with the highest timestamp.\n        </li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 4,
    "Question": "What strategies can improve the performance of a query with multiple subqueries?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #F74380;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #81D4FA;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #F74380;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n                ul {\n            margin-left: 0;\n            padding-left: 20px;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 14px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode {\n                font-size: 13px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Strategies to improve the performance of a query with multiple subqueries:</h4>\n    <ol>\n        <li><strong>Optimize Individual Subqueries:</strong> Ensure each subquery is efficient and has appropriate indexes on the tables referenced by the subqueries.</li>\n        <li><strong>Use Indexes:</strong> Index columns used in joins, filters, and sorts. Consider composite indexes for frequently used column combinations.</li>\n        <li><strong>Avoid Correlated Subqueries:</strong> Rewrite them as joins when possible to avoid execution for each row of the outer query.</li>\n        <li><strong>Leverage WITH Clause:</strong> Use the WITH clause (CTEs) to simplify and potentially improve performance by materializing subqueries.</li>\n        <li><strong>Use EXISTS Instead of IN:</strong> EXISTS can be more efficient than IN for large subquery results.</li>\n        <li><strong>Materialized Views:</strong> Use materialized views for frequently accessed subquery results to save processing time.</li>\n        <li><strong>Query Rewriting:</strong> Simplify or combine subqueries, or use different query structures for better performance.</li>\n        <li><strong>Partitioning:</strong> Improve performance by partitioning large datasets.</li>\n        <li><strong>Statistics:</strong> Ensure up-to-date optimizer statistics using <code>DBMS_STATS</code>.</li>\n    </ol>\n    <h4 class=\"bold-blue\">&bull; Example of Subquery Optimization:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Original Query:</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">*</span>\n<span class=\"SQLKeyword\">FROM</span>   employees e\n<span class=\"SQLKeyword\">WHERE</span>  e<span class=\"SQLOperator\">.</span>salary <span class=\"SQLOperator\">></span> (<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">Avg</span>(salary)\n                   <span class=\"SQLKeyword\">FROM</span>   employees\n               <span class=\"SQLKeyword\">WHERE</span>  department_id <span class=\"SQLOperator\">=</span> e<span class=\"SQLOperator\">.</span>department_id)\n   <span class=\"SQLKeyword\">AND</span> e<span class=\"SQLOperator\">.</span>employee_id <span class=\"SQLKeyword\">IN</span> (<span class=\"SQLKeyword\">SELECT</span> employee_id\n                        <span class=\"SQLKeyword\">FROM</span>   employee_projects\n                        <span class=\"SQLKeyword\">WHERE</span>  project_id <span class=\"SQLOperator\">=</span> <span class=\"SQLString\">101</span>)<span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Optimized Query:</span>\n<span class=\"SQLKeyword\">WITH</span> dept_avg_salary\n     <span class=\"SQLKeyword\">AS</span> (<span class=\"SQLKeyword\">SELECT</span> department_id<span class=\"SQLOperator\">,</span>\n                <span class=\"SQLFunction\">Avg</span>(salary) <span class=\"SQLKeyword\">AS</span> avg_salary\n         <span class=\"SQLKeyword\">FROM</span>   employees\n         <span class=\"SQLKeyword\">GROUP BY</span>  department_id)<span class=\"SQLOperator\">,</span>\n     project_employees\n     <span class=\"SQLKeyword\">AS</span> (<span class=\"SQLKeyword\">SELECT</span> employee_id\n         <span class=\"SQLKeyword\">FROM</span>   employee_projects\n         <span class=\"SQLKeyword\">WHERE</span>  project_id <span class=\"SQLOperator\">=</span> <span class=\"SQLString\">101</span>)\n<span class=\"SQLKeyword\">SELECT</span> e<span class=\"SQLOperator\">.</span><span class=\"SQLKeyword\">*</span>\n<span class=\"SQLKeyword\">FROM</span>   employees e\n       <span class=\"SQLKeyword\">join</span> dept_avg_salary das\n         <span class=\"SQLKeyword\">ON</span> e<span class=\"SQLOperator\">.</span>department_id <span class=\"SQLOperator\">=</span> das<span class=\"SQLOperator\">.</span>department_id\n       <span class=\"SQLKeyword\">join</span> project_employees pe\n         <span class=\"SQLKeyword\">ON</span> e<span class=\"SQLOperator\">.</span>employee_id <span class=\"SQLOperator\">=</span> pe<span class=\"SQLOperator\">.</span>employee_id\n<span class=\"SQLKeyword\">WHERE</span>  e<span class=\"SQLOperator\">.</span>salary <span class=\"SQLOperator\">></span> das<span class=\"SQLOperator\">.</span>avg_salary<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Explanation:</h4>\n<ul>\n    <li>\n        <strong>Original Query:</strong>\n        <ul>\n            <li>The query retrieves employees whose salary is higher than the average salary in their department and who are assigned to project 101.</li>\n            <li>Two subqueries are used:\n                <ul>\n                    <li>One subquery calculates the average salary for each department and compares it to the employee's salary.</li>\n                    <li>The other subquery checks if the employee is associated with project 101.</li>\n                </ul>\n            </li>\n        </ul>\n    </li>\n    <li>\n        <strong>Optimized Query:</strong>\n        <ul>\n            <li>Uses Common Table Expressions (CTEs) to optimize the query by precomputing the necessary data:\n                <ul>\n                    <li><code>dept_avg_salary</code> CTE calculates the average salary for each department in a single pass.</li>\n                    <li><code>project_employees</code> CTE identifies all employees associated with project 101.</li>\n                </ul>\n            </li>\n            <li>The main query joins the <code>employees</code> table with these CTEs:\n                <ul>\n                    <li>Joins with <code>dept_avg_salary</code> to compare each employee's salary with the department's average salary.</li>\n                    <li>Joins with <code>project_employees</code> to filter employees who are part of project 101.</li>\n                </ul>\n            </li>\n            <li>This approach reduces the number of subquery executions, making the query more efficient.</li>\n        </ul>\n    </li>\n</ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 5,
    "Question": "Write a query to identify the top 3 customers with the most purchases.",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #F74380;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #81D4FA;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #F74380;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        ul {\n\t    margin-left: 0;\n        padding-left: 20px;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 14px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 13px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - CUSTOMER_PURCHASES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_ID</th>\n                <th>CUSTOMER_NAME</th>\n                <th>PURCHASE_ID</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Chris Hemsworth</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>1</td>\n                <td>Leonardo DiCaprio</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Robert Downey Jr</td>\n                <td>3</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>5</td>\n                <td>Chris Hemsworth</td>\n                <td>4</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Leonardo DiCaprio</td>\n                <td>5</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>3</td>\n                <td>Robert Downey Jr</td>\n                <td>6</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Chris Hemsworth</td>\n                <td>7</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_ID</th>\n                <th>CUSTOMER_NAME</th>\n                <th>PURCHASE_COUNT</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Chris Hemsworth</td>\n                <td>3</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>1</td>\n                <td>Leonardo DiCaprio</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Robert Downey Jr</td>\n                <td>2</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">--SQL Query 1 by using Aggregated functions</span>\n<span class=\"SQLKeyword\">SELECT</span> customer_id\n    <span class=\"SQLOperator\">,</span>customer_name\n    <span class=\"SQLOperator\">,</span><span class=\"SQLFunction\">COUNT</span>(purchase_id) <span class=\"SQLKeyword\">AS</span> purchase_count\n<span class=\"SQLKeyword\">FROM</span> customer_purchases\n<span class=\"SQLKeyword\">GROUP BY</span> customer_id\n    <span class=\"SQLOperator\">,</span>customer_name\n<span class=\"SQLKeyword\">ORDER BY</span> purchase_count <span class=\"SQLKeyword\">DESC</span>\n<span class=\"SQLKeyword\">FETCH FIRST</span> <span class=\"SQLString\">3</span> <span class=\"SQLKeyword\">ROWS ONLY</span><span class=\"SQLOperator\">;</span>\n\n<span class=\"SQLComment\">--SQL Query 2 by using Aggregated and analytical functions</span>\n<span class=\"SQLKeyword\">WITH</span> ranked_customers\n<span class=\"SQLKeyword\">AS</span> (\n    <span class=\"SQLKeyword\">SELECT</span> customer_id\n        <span class=\"SQLOperator\">,</span>customer_name\n        <span class=\"SQLOperator\">,</span><span class=\"SQLFunction\">COUNT</span>(purchase_id) <span class=\"SQLKeyword\">AS</span> purchase_count\n        <span class=\"SQLOperator\">,</span><span class=\"SQLFunction\">RANK</span>() <span class=\"SQLKeyword\">OVER</span> (\n            <span class=\"SQLKeyword\">ORDER BY</span> <span class=\"SQLFunction\">COUNT</span>(purchase_id) <span class=\"SQLKeyword\">DESC</span>\n            ) <span class=\"SQLKeyword\">AS</span> rank\n    <span class=\"SQLKeyword\">FROM</span> customer_purchases\n    <span class=\"SQLKeyword\">GROUP BY</span> customer_id\n        <span class=\"SQLOperator\">,</span>customer_name\n    )\n<span class=\"SQLKeyword\">SELECT</span> customer_id\n    <span class=\"SQLOperator\">,</span>customer_name\n    <span class=\"SQLOperator\">,</span>purchase_count\n<span class=\"SQLKeyword\">FROM</span> ranked_customers\n<span class=\"SQLKeyword\">WHERE</span> rank <span class=\"SQLOperator\"><=</span> <span class=\"SQLString\">3</span><span class=\"SQLOperator\">;</span></pre>\n</div>\n        <h4 class=\"bold-maroon\">Explanation:</h4>\n        <ul>\n            <li>\n                <strong>SQL Query 1: Using Aggregated Functions</strong>\n                <ul>\n                    <li>Selects the following columns:\n                        <ul>\n                            <li><code>customer_id</code>: The unique identifier for each customer.</li>\n                            <li><code>customer_name</code>: The name of the customer.</li>\n                            <li><code>purchase_count</code>: The total number of purchases made by each customer, calculated using the <code>COUNT(purchase_id)</code> function.</li>\n                        </ul>\n                    </li>\n                    <li>Groups the results by: customer_id, customer_name\n                    </li>\n                    <li>Orders the results by <code>purchase_count</code> in descending order, so that the customers with the most purchases appear first.</li>\n                    <li>Limits the results to the top 3 customers using <code>FETCH FIRST 3 ROWS ONLY</code>.</li>\n                </ul>\n            </li>\n            \n            <li>\n                <strong>SQL Query 2: Using Aggregated and Analytical Functions</strong>\n                <ul>\n                    <li>Defines a Common Table Expression (CTE) named <code>ranked_customers</code> that:\n                        <ul>\n                            <li>Selects the following columns:\n                                <ul>\n                                    <li><code>customer_id</code>: The unique identifier for each customer.</li>\n                                    <li><code>customer_name</code>: The name of the customer.</li>\n                                    <li><code>purchase_count</code>: The total number of purchases made by each customer, calculated using the <code>COUNT(purchase_id)</code> function.</li>\n                                    <li><code>rank</code>: The rank of each customer based on their <code>purchase_count</code>, calculated using the <code>RANK()</code> analytical function. Customers are ranked in descending order of their purchase count.</li>\n                                </ul>\n                            </li>\n                            <li>Groups the results by: customer_id, customer_name\n                            </li>\n                        </ul>\n                    </li>\n                    <li>The main query then selects from the <code>ranked_customers</code> CTE:\n                        <ul>\n                            <li><code>customer_id</code>: The unique identifier for each customer.</li>\n                            <li><code>customer_name</code>: The name of the customer.</li>\n                            <li><code>purchase_count</code>: The total number of purchases made by each customer.</li>\n                        </ul>\n                    </li>\n                    <li>Filters the results to include only the top 3 customers based on their <code>rank</code> using <code>WHERE rank <= 3</code>.</li>\n                </ul>\n            </li>\n        </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 6,
    "Question": "How can you remove duplicates from a result set without using the DISTINCT keyword?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #F74380;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #81D4FA;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n                ul {\n            margin-left: 0;\n            padding-left: 20px;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 14px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 13px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>To remove duplicates from a result set without using the <code>DISTINCT</code> keyword, you can use the <code>GROUP BY</code> clause. When you group by all the columns or a single column you are selecting, the result set will contain only unique combinations of those columns.</p>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><strong>GROUP BY Clause:</strong> The <code>GROUP BY</code> clause groups the result set by the specified columns. This means that rows with the same values in the grouped columns are combined into a single row in the result set.</li>\n        <li><strong>Selected Columns:</strong> When you select columns and group by those same columns, Oracle SQL will return unique combinations of the selected columns.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Example Data:</h4>\n    <p>Let's assume you have the following data in the <code>customers</code> table:</p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_NAME</th>\n                <th>DRIVER_LICENSE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>Brad</td>\n                <td>ABC123</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>Angelina</td>\n                <td>XYZ789</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>Brad</td>\n                <td>ABC123</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>Scarlett</td>\n                <td>DEF456</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>Angelina</td>\n                <td>XYZ789</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">SQL Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> customer_name, driver_license\n<span class=\"SQLKeyword\">FROM</span> customers\n<span class=\"SQLKeyword\">GROUP BY</span> customer_name, driver_license<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_NAME</th>\n                <th>DRIVER_LICENSE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>Brad</td>\n                <td>ABC123</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>Angelina</td>\n                <td>XYZ789</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>Scarlett</td>\n                <td>DEF456</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <p>This query removes duplicates from the result set by grouping the rows based on the <code>customer_name</code> and <code>driver_license</code> columns, ensuring that only unique combinations of these columns are returned.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 7,
    "Question": "What is a candidate key, and how many candidate keys can a table have?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #F74380;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #81D4FA;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #F74380;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n                ul {\n            margin-left: 0;\n            padding-left: 20px;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 14px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 13px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>A candidate key is a column or a set of columns in a table that can uniquely identify any database record without referring to any other data. A table can have multiple candidate keys, but only one primary key can be designated from these candidate keys. Candidate keys are essential for ensuring the integrity and uniqueness of data within the database.</p>\n    <h4 class=\"bold-maroon\">Number of Candidate Keys</h4>\n    <p>A table can have multiple candidate keys. However, each candidate key must be able to uniquely identify each row in the table.<p>\n    <h4 class=\"bold-maroon\">Example</h4>\n    <p>Let's consider a scenario with a \"CUSTOMER\" table. In this table, we consider multiple candidate keys such as \"customer_id\", \"account_number\", and \"email\" because each of these fields can uniquely identify a customer.</p>\n    <h4 class=\"bold-maroon\">Table Structure</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> Customer <span class=\"SQLKeyword\">(</span>\n    customer_id NUMBER <span class=\"SQLKeyword\">PRIMARY KEY</span><span class=\"SQLOperator\">,</span>\n    account_number VARCHAR2(20) <span class=\"SQLKeyword\">UNIQUE</span><span class=\"SQLOperator\">,</span>\n    email VARCHAR2(50) <span class=\"SQLKeyword\">UNIQUE</span><span class=\"SQLOperator\">,</span>\n    name VARCHAR2(100)\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Sample Insert Statements</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">INSERT INTO</span> customer <span class=\"SQLKeyword\">(</span>\n    customer_id<span class=\"SQLOperator\">,</span>\n    account_number<span class=\"SQLOperator\">,</span>\n    email<span class=\"SQLOperator\">,</span>\n    name\n<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>\n    1<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLString\">'ACC12345'</span><span class=\"SQLOperator\">,</span>\n    <span class=\"SQLString\">'charles.darwin@aityl.com'</span><span class=\"SQLOperator\">,</span>\n    <span class=\"SQLString\">'Charles Darwin'</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">INSERT INTO</span> customer <span class=\"SQLKeyword\">(</span>\n    customer_id<span class=\"SQLOperator\">,</span>\n    account_number<span class=\"SQLOperator\">,</span>\n    email<span class=\"SQLOperator\">,</span>\n    name\n<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>\n    2<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLString\">'ACC67890'</span><span class=\"SQLOperator\">,</span>\n    <span class=\"SQLString\">'rachel.carson@aityl.com'</span><span class=\"SQLOperator\">,</span>\n    <span class=\"SQLString\">'Rachel Carson'</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li>\"customer_id\", \"account_number\", and \"email\" are candidate keys because each of them can uniquely identify a customer.</li>\n        <li>We have chosen \"customer_id\" as the primary key, but \"account_number\" and \"email\" are still candidate keys.</li>\n    </ul>\n    \n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_ID</th>\n                <th>ACCOUNT_NUMBER</th>\n                <th>EMAIL</th>\n                <th>NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>ACC12345</td>\n                <td>charles.darwin@aityl.com</td>\n                <td>Charles Darwin</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>ACC67890</td>\n                <td>rachel.carson@aityl.com</td>\n                <td>Rachel Carson</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <ul>\n        <li>In this scenario, \"customer_id\", \"account_number\", and \"email\" are all candidate keys for the \"CUSTOMER\" table.</li>\n        <li>Each of them can uniquely identify a row in the table, ensuring data integrity and enabling efficient data retrieval.</li>\n    </ul>    \n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 8,
    "Question": "What is the difference between CASE and DECODE functions?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #F74380;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #81D4FA;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n                ul {\n            margin-left: 0;\n            padding-left: 20px;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 14px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 13px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Both the <code>CASE</code> and <code>DECODE</code> functions in Oracle are used for conditional logic in SQL statements, allowing the implementation of IF-THEN-ELSE logic within queries. However, there are several differences between them in terms of syntax, functionality, and flexibility.</p>\n    <h4 class=\"bold-maroon\">1. Syntax:</h4>\n    <p class=\"bold-blue\">CASE Statement:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\">CASE\n      <span class=\"SQLKeyword\">WHEN</span> condition1 <span class=\"SQLKeyword\">THEN</span> result1\n      <span class=\"SQLKeyword\">WHEN</span> condition2 <span class=\"SQLKeyword\">THEN</span> result2\n      <span class=\"SQLOperator\">...</span>\n      <span class=\"SQLKeyword\">ELSE</span> default_result\n<span class=\"SQLKeyword\">END</span></pre>\n</div>\n    <p class=\"bold-blue\">DECODE Function:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\">DECODE<span class=\"SQLKeyword\">(</span>expression<span class=\"SQLOperator\">,</span> search1<span class=\"SQLOperator\">,</span> result1<span class=\"SQLOperator\">,</span> search2<span class=\"SQLOperator\">,</span> result2<span class=\"SQLOperator\">,</span> <span class=\"SQLOperator\">...</span><span class=\"SQLOperator\">,</span> default_result<span class=\"SQLKeyword\">)</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">2. Flexibility:</h4>\n    <ul>\n        <li><strong>CASE:</strong> More flexible, supports complex logical conditions, boolean expressions, and is available in both SQL and PL/SQL.</li>\n        <li><strong>DECODE:</strong> Limited to simple equality checks and only available in SQL.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">3. Return Data Types:</h4>\n    <ul>\n        <li><strong>CASE:</strong> Can return different data types based on the condition.</li>\n        <li><strong>DECODE:</strong> All result expressions must have the same data type.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">4. NULL Handling:</h4>\n    <ul>\n        <li><strong>CASE:</strong> Handles NULL values intuitively, allowing explicit handling within the WHEN clauses.</li>\n        <li><strong>DECODE:</strong> Requires additional logic to handle NULLs, treating NULL as equal to NULL.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Summary:</h4>\n    <p>In most cases, <code>CASE</code> is preferred over <code>DECODE</code> due to its flexibility, ability to handle complex conditions, and availability in both SQL and PL/SQL.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 9,
    "Question": "How do you use the LIKE operator for pattern matching in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #F74380;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #81D4FA;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #F74380;\n        }\n                ul {\n            margin-left: 0;\n            padding-left: 20px;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 14px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode {\n                font-size: 13px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4>Answer:</h4>\n    <p>The <code>LIKE</code> operator in Oracle SQL is used for pattern matching in string comparisons. It allows searching for specified patterns in a column. The <code>LIKE</code> operator is often used with the <code>%</code> and <code>_</code> wildcard characters:</p>\n    <ul>\n        <li><code>%</code> represents zero or more characters.</li>\n        <li><code>_</code> stands for exactly one character.</li>\n    </ul>\n    <h4>1. Identifying Product Names Following a Specific Pattern:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> product_name\n<span class=\"SQLKeyword\">FROM</span> products\n<span class=\"SQLKeyword\">WHERE</span> product_name <span class=\"SQLKeyword\">LIKE</span> <span class=\"SQLString\">'%Earbuds%'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This query retrieves all product names containing \"Earbuds\" at any position within the name.</p>\n    <h4>2. Searching for Customers Based on Email Domain:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> customer_name<span class=\"SQLOperator\">,</span> email\n<span class=\"SQLKeyword\">FROM</span> customers\n<span class=\"SQLKeyword\">WHERE</span> email <span class=\"SQLKeyword\">LIKE</span> <span class=\"SQLString\">'%@gmail.com'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This query lists all customer names and their email addresses that finish with \"@gmail.com.\"</p>\n    <h4>3. Locating Orders Placed in a Specific Month:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> order_id<span class=\"SQLOperator\">,</span> order_date\n<span class=\"SQLKeyword\">FROM</span> orders\n<span class=\"SQLKeyword\">WHERE</span> order_date <span class=\"SQLKeyword\">LIKE</span> <span class=\"SQLString\">'2024-01%'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This query fetches all orders from January 2024.</p>\n    <h4>4. Identifying Products Within a Specific Category:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> category_id<span class=\"SQLOperator\">,</span> category_name\n<span class=\"SQLKeyword\">FROM</span> product_categories\n<span class=\"SQLKeyword\">WHERE</span> category_name <span class=\"SQLKeyword\">LIKE</span> <span class=\"SQLString\">'Electronics%'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This query fetches all categories starting with \"Electronics.\"</p>\n    <h4>5. Searching for SKU Codes Following a Specified Pattern:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> sku<span class=\"SQLOperator\">,</span> product_name\n<span class=\"SQLKeyword\">FROM</span> products\n<span class=\"SQLKeyword\">WHERE</span> sku <span class=\"SQLKeyword\">LIKE</span> <span class=\"SQLString\">'__AB%'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This query retrieves all SKUs where \"AB\" appears as the third and fourth characters in the code.</p>\n    <p>SKU stands for Stock Keeping Unit, which is a unique identifier for each distinct product and service that can be purchased.</p>\n    <h4>6. Case-Insensitive Search for Product Names:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> product_name\n<span class=\"SQLKeyword\">FROM</span> products\n<span class=\"SQLKeyword\">WHERE</span> <span class=\"SQLFunction\">upper</span>(product_name) <span class=\"SQLKeyword\">LIKE</span> <span class=\"SQLString\">'%SPEAKERS%'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This query ensures a case-insensitive search by converting product names to uppercase before matching.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 10,
    "Question": "What is the BETWEEN operator used for in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #F74380;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #81D4FA;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #F74380;\n        }\n                ul {\n            margin-left: 0;\n            padding-left: 20px;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 14px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode {\n                font-size: 13px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4>Answer:</h4>\n    <p>The <code>BETWEEN</code> operator in Oracle SQL is used to filter the result set within a certain range. It is inclusive, meaning it includes the values specified at both ends of the range. The <code>BETWEEN</code> operator can be used with numeric, date, and text data types.</p>\n    <h4>Syntax:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> column_names\n<span class=\"SQLKeyword\">FROM</span> table_name\n<span class=\"SQLKeyword\">WHERE</span> column_name <span class=\"SQLKeyword\">BETWEEN</span> value1 <span class=\"SQLKeyword\">AND</span>\n                     value2<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4>1. Selecting Orders within a Date Range:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> order_id<span class=\"SQLOperator\">,</span>\n       customer_id<span class=\"SQLOperator\">,</span>\n       order_date\n<span class=\"SQLKeyword\">FROM</span>   orders\n<span class=\"SQLKeyword\">WHERE</span>  order_date <span class=\"SQLKeyword\">BETWEEN</span> <span class=\"SQLFunction\">TO_DATE</span>(<span class=\"SQLString\">'2023-01-01'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span>) <span class=\"SQLKeyword\">AND</span>\n                     <span class=\"SQLFunction\">TO_DATE</span>(<span class=\"SQLString\">'2023-01-31'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span>)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This query finds all orders placed between January 1, 2023, and January 31, 2023.</p>\n    <h4>2. Filtering Products within a Price Range:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> product_id<span class=\"SQLOperator\">,</span> product_name<span class=\"SQLOperator\">,</span> price\n<span class=\"SQLKeyword\">FROM</span> products\n<span class=\"SQLKeyword\">WHERE</span> price <span class=\"SQLKeyword\">BETWEEN</span> <span class=\"SQLString\">50</span> <span class=\"SQLKeyword\">AND</span> <span class=\"SQLString\">100</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This query lists all products priced between $50 and $100.</p>\n    <h4>3. Text Range:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">*</span>\n<span class=\"SQLKeyword\">FROM</span> products\n<span class=\"SQLKeyword\">WHERE</span> product_name <span class=\"SQLKeyword\">BETWEEN</span> <span class=\"SQLString\">'A'</span> <span class=\"SQLKeyword\">AND</span> <span class=\"SQLString\">'M'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This query fetches all product names that fall alphabetically between \"A\" and \"M\".</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 11,
    "Question": "How do you perform a \"CROSS JOIN\"/Cartesian product in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #F74380;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #81D4FA;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #F74380;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n                ul {\n            margin-left: 0;\n            padding-left: 20px;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 14px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 13px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">&bull; Method 1: Using the <code>CROSS JOIN</code> Keyword</h4>\n    <p>This method explicitly indicates the intention to perform a \"CROSS JOIN\". It makes the code easy to understand.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> a.column1<span class=\"SQLOperator\">,</span> b.column2\n<span class=\"SQLKeyword\">FROM</span> table1 a\n<span class=\"SQLKeyword\">CROSS JOIN</span> table2 b<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">&bull; Method 2: Listing Tables Without a Join Condition</h4>\n    <p>This approach results in a Cartesian product by simply listing the tables without any join condition. It is generally recommended to use the explicit \"CROSS JOIN\" for clarity.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> a.column1<span class=\"SQLOperator\">,</span> b.column2\n<span class=\"SQLKeyword\">FROM</span> table1 a<span class=\"SQLOperator\">,</span> table2 b<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Practical Considerations:</h4>\n    <ul>\n        <li><strong>Performance:</strong> Caution is advised with cross joins, especially with large tables, as they can result in a very high number of rows, potentially leading to performance issues.</li>\n        <li><strong>Use Cases:</strong> Cross joins are useful in scenarios where all possible combinations of one set of data with another are needed, such as generating all possible combinations of products and customers, or categories and orders.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 12,
    "Question": "What are aggregate functions in SQL, and how are they used?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html>\n<head>\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #F74380;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #81D4FA;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #F74380;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n                ul {\n            margin-left: 0;\n            padding-left: 20px;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 14px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 13px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Aggregate functions in SQL perform calculations on multiple rows of a table and return a single result. They are commonly used with the <code>GROUP BY</code> clause to group rows that have the same values in specified columns into summary rows.</p>\n    <h4 class=\"bold-maroon\">Common Aggregate Functions</h4>\n    <ul>\n        <li><b>AVG()</b>: Calculates the average value of a numeric column.</li>\n        <li><b>COUNT()</b>: Counts the number of rows.</li>\n        <li><b>MAX()</b>: Returns the maximum value in a set of values.</li>\n        <li><b>MIN()</b>: Returns the minimum value in a set of values.</li>\n        <li><b>SUM()</b>: Calculates the sum of a numeric column.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Examples in the Banking Domain</h4>\n    <h4 class=\"bold-blue\">1. AVG() Example</h4>\n    <p><b>Scenario:</b> Calculate the average balance of all accounts in the bank.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">AVG</span>(balance) <span class=\"SQLKeyword\">AS</span> average_balance\n<span class=\"SQLKeyword\">FROM</span>   accounts<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">2. COUNT() Example</h4>\n    <p><b>Scenario:</b> Count the number of active loans in the bank.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">COUNT</span>(<span class=\"SQLKeyword\">*</span>) <span class=\"SQLKeyword\">AS</span> active_loans_count\n<span class=\"SQLKeyword\">FROM</span> loans\n<span class=\"SQLKeyword\">WHERE</span> status <span class=\"SQLKeyword\">=</span> <span class=\"SQLString\">'active'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">3. MAX() Example</h4>\n    <p><b>Scenario:</b> Find the highest transaction amount in a particular month.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">MAX</span>(amount) <span class=\"SQLKeyword\">AS</span> max_transaction_amount\n<span class=\"SQLKeyword\">FROM</span>   transactions\n<span class=\"SQLKeyword\">WHERE</span>  transaction_date <span class=\"SQLKeyword\">BETWEEN TO_DATE</span>(<span class=\"SQLString\">'2024-06-01'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span>)\n   <span class=\"SQLKeyword\">AND TO_DATE</span>(<span class=\"SQLString\">'2024-06-30'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span>)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">4. MIN() Example</h4>\n    <p><b>Scenario:</b> Find the minimum balance across all savings accounts.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">MIN</span>(balance) <span class=\"SQLKeyword\">AS</span> min_savings_balance\n<span class=\"SQLKeyword\">FROM</span> accounts\n<span class=\"SQLKeyword\">WHERE</span> account_type <span class=\"SQLKeyword\">=</span> <span class=\"SQLString\">'savings'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">5. SUM() Example</h4>\n    <p><b>Scenario:</b> Calculate the total amount of all deposits made in a specific branch.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">SUM</span>(amount) <span class=\"SQLKeyword\">AS</span> total_deposits\n<span class=\"SQLKeyword\">FROM</span> transactions\n<span class=\"SQLKeyword\">WHERE</span> transaction_type <span class=\"SQLKeyword\">=</span> <span class=\"SQLString\">'deposit'</span> <span class=\"SQLKeyword\">AND</span> branch_id <span class=\"SQLKeyword\">=</span> <span class=\"SQLString\">101</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Using Aggregate Functions with GROUP BY</h4>\n    <p>Aggregate functions are often used with the <code>GROUP BY</code> clause to provide summaries for groups of rows.</p>\n    <h4 class=\"bold-blue\">1. GROUP BY Example</h4>\n    <p><b>Scenario:</b> Calculate the total balance for each account type.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> account_type<span class=\"SQLOperator\">,</span> <span class=\"SQLFunction\">SUM</span>(balance) <span class=\"SQLKeyword\">AS</span> total_balance\n<span class=\"SQLKeyword\">FROM</span> accounts\n<span class=\"SQLKeyword\">GROUP BY</span> account_type<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">2. Another GROUP BY Example</h4>\n    <p><b>Scenario:</b> Count the number of transactions per customer.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> customer_id<span class=\"SQLOperator\">,</span> <span class=\"SQLFunction\">COUNT</span>(<span class=\"SQLKeyword\">*</span>) <span class=\"SQLKeyword\">AS</span> transaction_count\n<span class=\"SQLKeyword\">FROM</span> transactions\n<span class=\"SQLKeyword\">GROUP BY</span> customer_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 13,
    "Question": "What is the function of the DISTINCT keyword in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #F74380;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #81D4FA;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #F74380;\n        }\n                ul {\n            margin-left: 0;\n            padding-left: 20px;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 14px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode {\n                font-size: 13px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4>Answer:</h4>\n    <p>The <code>DISTINCT</code> keyword is used to remove duplicate rows from the result set.</p>\n    <h4>Example:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Removes duplicate rows from a single column.</span>\n<span class=\"SQLKeyword\">SELECT DISTINCT</span> category_id\n<span class=\"SQLKeyword\">FROM</span> products<span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Removes duplicate rows from multiple columns.</span>\n<span class=\"SQLKeyword\">SELECT DISTINCT</span> category_id<span class=\"SQLOperator\">,</span> category_name\n<span class=\"SQLKeyword\">FROM</span> products<span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Removes any duplicate rows across all columns in the table.</span>\n<span class=\"SQLKeyword\">SELECT DISTINCT</span> <span class=\"SQLKeyword\">*</span>\n<span class=\"SQLKeyword\">FROM</span> products<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 14,
    "Question": "How do you select any five rows and check if a table is empty in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLKeyword {\n            color: #81D4FA;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        ul {\n            margin-left: 0;\n            padding-left: 20px;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 14px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 13px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">1. Select any five rows:</h4>\n    <p>To retrieve any five rows from a table, use the <code>ROWNUM</code> pseudo-column:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> * \n<span class=\"SQLKeyword\">FROM</span> table_name \n<span class=\"SQLKeyword\">WHERE</span> ROWNUM <= 5<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This query selects the first five rows from the table.</p>\n\n    <h4 class=\"bold-maroon\">2. Check if a table is empty:</h4>\n    <p>To check if a table is empty, either count the rows or check if at least one row exists. Here are two options:</p>\n    \n    <h5 class=\"bold-blue\">Option 1: Using <code>COUNT(*)</code></h5>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> COUNT(*) <span class=\"SQLKeyword\">AS</span> row_count\n<span class=\"SQLKeyword\">FROM</span> table_name<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>- If the result is <code>0</code>, the table is empty.</p>\n\n    <h5 class=\"bold-blue\">Option 2: Using <code>ROWNUM</code> to check if at least one row exists</h5>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> 1 \n<span class=\"SQLKeyword\">FROM</span> table_name \n<span class=\"SQLKeyword\">WHERE</span> ROWNUM = 1<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>- If this query returns a row, the table is not empty. If no rows are returned, the table is empty.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 15,
    "Question": "How do you retrieve unique records from a table in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #F74380;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #81D4FA;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #F74380;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n                ul {\n            margin-left: 0;\n            padding-left: 20px;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 14px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 13px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>You can retrieve unique records using the <code>DISTINCT</code> keyword or by using the <code>GROUP BY</code> clause. Here are some examples:</p>\n    <h4 class=\"bold-blue\">Query 1: Selecting Distinct Names</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT DISTINCT</span> customer_name\n<span class=\"SQLKeyword\">FROM</span> Customers<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Query 2: Grouping by Name</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> customer_name\n<span class=\"SQLKeyword\">FROM</span> Customers\n<span class=\"SQLKeyword\">GROUP BY</span> customer_name<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Query 3: Selecting Distinct Names and Emails</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT DISTINCT</span> customer_name<span class=\"SQLOperator\">,</span> email\n<span class=\"SQLKeyword\">FROM</span> Customers<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Query 4: Grouping by Name and Email</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> customer_name<span class=\"SQLOperator\">,</span> email\n<span class=\"SQLKeyword\">FROM</span> Customers\n<span class=\"SQLKeyword\">GROUP BY</span> customer_name<span class=\"SQLOperator\">,</span> email<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Comparison and Insights</h4>\n    <p>Both <code>DISTINCT</code> and <code>GROUP BY</code> can be used to retrieve unique records, but their usage can be optimized based on the context:</p>\n    <ul>\n        <li><strong>DISTINCT:</strong>\n            <ul>\n                <li>Best for simple queries where the goal is to eliminate duplicates.</li>\n                <li>Straightforward and clear in purpose, making it easy to read and understand in queries focused purely on uniqueness.</li>\n            </ul>\n        </li>\n        <li><strong>GROUP BY:</strong>\n            <ul>\n                <li>Essential when working with aggregates but also effective for ensuring uniqueness.</li>\n                <li>Offers flexibility for more complex queries, such as adding aggregate functions or filtering groups with <code>HAVING</code>.</li>\n            </ul>\n        </li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 16,
    "Question": "How do you create an empty table with the same structure as an existing table in SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #F74380;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #81D4FA;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #F74380;\n        }\n                ul {\n            margin-left: 0;\n            padding-left: 20px;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 14px;\n            }\n        }\n\n        @media (max-width: 480px) {\n            .SQLCode {\n                font-size: 13px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In Oracle SQL, you can create an empty table with the same structure as an existing table using the <b>CREATE TABLE AS SELECT</b> statement:</p>\n    <h4 class=\"bold-maroon\">Example:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> employees_bkp <span class=\"SQLKeyword\">AS</span>\n<span class=\"SQLKeyword\">SELECT</span> *\n<span class=\"SQLKeyword\">FROM</span> employees\n<span class=\"SQLKeyword\">WHERE</span> 1=2<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li>The query creates a new table named <b>employees_bkp</b> with the same column definitions as the <b>employees</b> table.</li>\n        <li>The <b>WHERE</b> clause <b>1=2</b> is always false, ensuring that no rows are selected, resulting in an empty table.</li>\n        <li>This method replicates column names, data types, and nullability of the source table.</li>\n        <li>Constraints (e.g., primary keys, foreign keys) and indexes are not copied and must be explicitly defined after table creation.</li>\n    </ul>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 17,
    "Question": "What is the default order with the ORDER BY clause in SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #F74380;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #81D4FA;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #F74380;\n        }\n                ul {\n            margin-left: 0;\n            padding-left: 20px;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 14px;\n            }\n        }\n\n        @media (max-width: 480px) {\n            .SQLCode {\n                font-size: 13px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In SQL, when using the <b>ORDER BY</b> clause without specifying a direction, the default sorting order is ascending (<b>ASC</b>). This means:</p>\n    <ul>\n        <li>Numbers are sorted from the smallest to the largest.</li>\n        <li>Text is sorted alphabetically from A to Z.</li>\n        <li>Dates are sorted from the oldest to the most recent.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Example:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> employee_id, employee_name, hire_date\n<span class=\"SQLKeyword\">FROM</span> employees\n<span class=\"SQLKeyword\">ORDER BY</span> hire_date<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This query will order the employees by their hire date in ascending order.</p>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 18,
    "Question": "How do the WHERE and HAVING clauses differ in SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .table-container {\n            overflow-x: auto;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            max-width: 800px;\n            margin: 20px 0;\n            border: 1px solid #ddd;\n            font-size: 16px;\n        }\n        th, td {\n            text-align: left;\n            padding: 8px;\n            border: 1px solid #ddd;\n        }\n        th {\n            background-color: #F0F0F0;\n        }\n        tr:nth-child(even) {\n            background-color: #FFFFFF;\n        }\n        tr:nth-child(odd) {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #F74380;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #81D4FA;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #F74380;\n        }\n                ul {\n            margin-left: 0;\n            padding-left: 20px;\n        }\n        @media (max-width: 768px) {\n            table, th, td {\n                font-size: 15px;\n            }\n            th, td {\n                padding: 6px;\n            }\n            .SQLCode {\n                font-size: 15px;\n            }\n        }\n\n        @media (max-width: 480px) {\n            table, th, td {\n                font-size: 15px;\n            }\n            th, td {\n                padding: 4px;\n            }\n            .SQLCode {\n                font-size: 15px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Differences Between WHERE and HAVING Clauses:</h4>\n    <div class=\"table-container\">\n        <table>\n            <thead>\n                <tr>\n                    <th>ASPECT</th>\n                    <th>WHERE Clause</th>\n                    <th>HAVING Clause</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>Purpose</td>\n                    <td>Filters rows before any groupings are made.</td>\n                    <td>Filters groups after aggregation operations are performed.</td>\n                </tr>\n                <tr>\n                    <td>Usage</td>\n                    <td>Used in SELECT, UPDATE, and DELETE statements.</td>\n                    <td>Used in SELECT statements with GROUP BY.</td>\n                </tr>\n                <tr>\n                    <td>Applicable To</td>\n                    <td>Individual rows.</td>\n                    <td>Aggregated groups.</td>\n                </tr>\n                <tr>\n                    <td>Aggregate Functions</td>\n                    <td>Cannot use aggregate functions.</td>\n                    <td>Can use aggregate functions (e.g., SUM, AVG).</td>\n                </tr>\n            </tbody>\n                </table>\n    </div>\n    </div>\n    <h4 class=\"bold-maroon\">Example Scenario:</h4>\n    <p>Consider a table named <b>orders</b> with columns: <b>order_id</b>, <b>customer_id</b>, <b>order_date</b>, and <b>total_amount</b>.</p>\n    <h4 class=\"bold-maroon\">Example with WHERE Clause:</h4>\n    <p><b>Objective:</b> Select orders where the <b>total_amount</b> is more than 150.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> *\n<span class=\"SQLKeyword\">FROM</span> orders\n<span class=\"SQLKeyword\">WHERE</span> total_amount > 150<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Example with HAVING Clause:</h4>\n    <p><b>Objective:</b> Find customers whose total spending is more than 400.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> customer_id, <span class=\"SQLFunction\">SUM</span><span class=\"SQLKeyword\">(</span>total_amount<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> total_spent\n<span class=\"SQLKeyword\">FROM</span> orders\n<span class=\"SQLKeyword\">GROUP BY</span> customer_id\n<span class=\"SQLKeyword\">HAVING</span> <span class=\"SQLFunction\">SUM</span><span class=\"SQLKeyword\">(</span>total_amount<span class=\"SQLKeyword\">)</span> > 400<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 19,
    "Question": "What are the different types of subqueries in SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .table-container {\n            overflow-x: auto;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            max-width: 800px;\n            margin: 20px 0;\n            border: 1px solid #ddd;\n            font-size: 16px;\n        }\n        th, td {\n            text-align: left;\n            padding: 8px;\n            border: 1px solid #ddd;\n        }\n        th {\n            background-color: #F0F0F0;\n        }\n        tr:nth-child(even) {\n            background-color: #FFFFFF;\n        }\n        tr:nth-child(odd) {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #F74380;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #81D4FA;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #F74380;\n        }\n                ul {\n            margin-left: 0;\n            padding-left: 20px;\n        }\n        @media (max-width: 768px) {\n            table, th, td {\n                font-size: 15px;\n            }\n            th, td {\n                padding: 6px;\n            }\n            .SQLCode {\n                font-size: 15px;\n            }\n        }\n\n        @media (max-width: 480px) {\n            table, th, td {\n                font-size: 15px;\n            }\n            th, td {\n                padding: 4px;\n            }\n            .SQLCode {\n                font-size: 15px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"table-container\">\n        <table>\n            <thead>\n                <tr>\n                    <th>Subquery Type</th>\n                    <th>DESCRIPTION</th>\n                    <th>Example Usage</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>Single-Row Subqueries</td>\n                    <td>Return zero or one row, used with single-row operators like <b>=</b>, <b>></b>, <b><</b>, <b>>=</b>, <b><=</b>, <b>!=</b>.</td>\n                    <td>Find the name of the employee who earns just more than a specific employee.</td>\n                </tr>\n                <tr>\n                    <td>Multiple-Row Subqueries</td>\n                    <td>Return one or more rows, used with multiple-row operators like <b>IN</b>, <b>ANY</b>, <b>ALL</b>, <b>EXISTS</b>.</td>\n                    <td>Find all employees who earn more than any employee in a list.</td>\n                </tr>\n                <tr>\n                    <td>Correlated Subqueries</td>\n                    <td>Reference column(s) from the outer query, evaluated once for each row processed by the outer query.</td>\n                    <td>Find employees who earn more than the average salary of their department.</td>\n                </tr>\n                <tr>\n                    <td>Scalar Subqueries</td>\n                    <td>Return exactly one row and one column, used wherever a single scalar value is valid.</td>\n                    <td>Select the name of each employee along with the highest salary in the department.</td>\n                </tr>\n                <tr>\n                    <td>Inline Views</td>\n                    <td>Subqueries in the <b>FROM</b> clause, used to simplify complex queries.</td>\n                    <td>Find the average salary of the top 2 highest-paid employees.</td>\n                </tr>\n                <tr>\n                    <td>With Clause (CTE)</td>\n                    <td>Create temporary sets that can be easily referenced within a SQL statement.</td>\n                    <td>List employees and their salary rank.</td>\n                </tr>\n            </tbody>\n                </table>\n    </div>\n    </div>\n    <h4 class=\"bold-maroon\">Examples of Each Subquery:</h4>\n    <h4 class=\"bold-maroon\">1. Single-Row Subquery:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> name\n<span class=\"SQLKeyword\">FROM</span> employees\n<span class=\"SQLKeyword\">WHERE</span> salary = (<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">MIN</span><span class=\"SQLKeyword\">(</span>salary<span class=\"SQLKeyword\">)</span>\n      <span class=\"SQLKeyword\">FROM</span> employees\n      <span class=\"SQLKeyword\">WHERE</span> salary > (<span class=\"SQLKeyword\">SELECT</span> salary\n                        <span class=\"SQLKeyword\">FROM</span> employees\n                        <span class=\"SQLKeyword\">WHERE</span> name = <span class=\"SQLString\">'The Rock'</span><span class=\"SQLKeyword\">))</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">2. Multiple-Row Subquery:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> name\n<span class=\"SQLKeyword\">FROM</span> employees\n<span class=\"SQLKeyword\">WHERE</span> salary > <span class=\"SQLKeyword\">ANY</span> (<span class=\"SQLKeyword\">SELECT</span> salary\n                     <span class=\"SQLKeyword\">FROM</span> employees\n                     <span class=\"SQLKeyword\">WHERE</span> name = <span class=\"SQLString\">'The Rock'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">3. Correlated Subquery:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> name\n<span class=\"SQLKeyword\">FROM</span> employees e\n<span class=\"SQLKeyword\">WHERE</span> salary > (<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">AVG</span><span class=\"SQLKeyword\">(</span>salary<span class=\"SQLKeyword\">)</span>\n                 <span class=\"SQLKeyword\">FROM</span> employees\n                 <span class=\"SQLKeyword\">WHERE</span> employee_id != e.employee_id<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">4. Scalar Subquery:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> name,\n       (<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">MAX</span><span class=\"SQLKeyword\">(</span>salary<span class=\"SQLKeyword\">)</span>\n        <span class=\"SQLKeyword\">FROM</span> employees) <span class=\"SQLKeyword\">AS</span> max_salary\n<span class=\"SQLKeyword\">FROM</span> employees<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">5. Inline View:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">AVG</span><span class=\"SQLKeyword\">(</span>salary<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> avg_salary\n<span class=\"SQLKeyword\">FROM</span> (<span class=\"SQLKeyword\">SELECT</span> salary\n        <span class=\"SQLKeyword\">FROM</span> employees\n        <span class=\"SQLKeyword\">ORDER BY</span> salary <span class=\"SQLKeyword\">DESC</span>\n        <span class=\"SQLKeyword\">FETCH FIRST</span> 2 <span class=\"SQLKeyword\">ROWS ONLY</span>) top_salaries<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">6. With Clause (CTE):</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">WITH</span> SalaryRank\n     <span class=\"SQLKeyword\">AS</span> (<span class=\"SQLKeyword\">SELECT</span> name,\n                salary,\n                <span class=\"SQLFunction\">RANK</span><span class=\"SQLKeyword\">()</span>\n                  <span class=\"SQLKeyword\">OVER</span> (\n                    <span class=\"SQLKeyword\">ORDER BY</span> salary <span class=\"SQLKeyword\">DESC</span>) <span class=\"SQLKeyword\">\nAS</span> rank\n         <span class=\"SQLKeyword\">FROM</span> employees)\n<span class=\"SQLKeyword\">SELECT</span> *\n<span class=\"SQLKeyword\">FROM</span> SalaryRank<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 20,
    "Question": "What is the difference between UNION and JOIN in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #F74380;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #81D4FA;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #F74380;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n                ul {\n            margin-left: 0;\n            padding-left: 20px;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 14px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 13px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">UNION:</h4>\n    <ul>\n        <li><strong>Purpose</strong>: Combines result sets of two or more <code>SELECT</code> statements.</li>\n        <li><strong>Structure</strong>: Each <code>SELECT</code> must have the same number of columns and data types.</li>\n        <li><strong>Duplicates</strong>: Removes duplicates by default (use <code>UNION ALL</code> to include duplicates).</li>\n    </ul>\n    <p><strong>Example</strong>: Combining customer names from two tables:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of using UNION to combine customer names \n-- from two tables.</span>\n<span class=\"SQLKeyword\">SELECT</span> customer_name\n<span class=\"SQLKeyword\">FROM</span> Customers\n<span class=\"SQLKeyword\">UNION</span>\n<span class=\"SQLKeyword\">SELECT</span> customer_name\n<span class=\"SQLKeyword\">FROM</span> VIP_Customers<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">JOIN:</h4>\n    <ul>\n        <li><strong>Purpose</strong>: Combines rows from two or more tables based on a related column.</li>\n        <li><strong>Types</strong>: Includes <code>INNER JOIN</code>, <code>LEFT JOIN</code>, <code>RIGHT JOIN</code>, and <code>FULL JOIN</code>.</li>\n        <li><strong>Condition</strong>: Requires a matching condition.</li>\n    </ul>\n    <p><strong>Example</strong>: Combining customer details with their orders:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of using JOIN to combine customer details \n-- with their orders.</span>\n<span class=\"SQLKeyword\">SELECT</span> Customers<span class=\"SQLOperator\">.</span>customer_id<span class=\"SQLOperator\">,</span>\n       Customers<span class=\"SQLOperator\">.</span>customer_name<span class=\"SQLOperator\">,</span>\n       Orders<span class=\"SQLOperator\">.</span>order_id<span class=\"SQLOperator\">,</span>\n       Orders<span class=\"SQLOperator\">.</span>order_date\n<span class=\"SQLKeyword\">FROM</span>   Customers\n       <span class=\"SQLKeyword\">JOIN</span> Orders\n         <span class=\"SQLKeyword\">ON</span> Customers<span class=\"SQLOperator\">.</span>customer_id <span class=\"SQLOperator\">=</span> Orders<span class=\"SQLOperator\">.</span>customer_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Key Differences</h4>\n    <ul>\n        <li><strong>Combination</strong>: <code>UNION</code> combines vertically, <code>JOIN</code> combines horizontally.</li>\n        <li><strong>Usage</strong>: Use <code>UNION</code> for similar queries, <code>JOIN</code> for related data from multiple tables.</li>\n        <li><strong>Duplicates</strong>: <code>UNION</code> removes duplicates, <code>JOIN</code> retains all matched rows.</li>\n    </ul>\n<br>\n</body>\n</html>"
  }

]