[
  {
    "SrNo": 1,
    "Question": "How can you construct a hierarchical query using \"START WITH\" and \"CONNECT BY\" clauses?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th,\n        .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode,\n            .tg {\n                font-size: 12px;\n            }\n            .tg th,\n            .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode,\n            .tg {\n                font-size: 11px;\n            }\n            .tg th,\n            .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - CATEGORIES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CATEGORY_ID</th>\n                <th>CATEGORY_NAME</th>\n                <th>PARENT_CATEGORY_ID</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Electronics</td>\n                <td></td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Computers</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Laptops</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>Desktops</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Smartphones</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>6</td>\n                <td>Cameras</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>7</td>\n                <td>DSLR</td>\n                <td>6</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Constructing a hierarchical query using \n-- START WITH and CONNECT BY clauses.</span>\n<span class=\"SQLKeyword\">SELECT</span> category_id<span class=\"SQLOperator\">,</span>\n       category_name<span class=\"SQLOperator\">,</span>\n       parent_category_id<span class=\"SQLOperator\">,</span>\n       <span class=\"SQLFunction\">LEVEL</span>\n<span class=\"SQLKeyword\">FROM</span>   categories\n<span class=\"SQLKeyword\">START WITH</span> parent_category_id <span class=\"SQLKeyword\">IS NULL</span>\n<span class=\"SQLKeyword\">CONNECT BY PRIOR</span> category_id <span class=\"SQLOperator\">=</span> parent_category_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CATEGORY_ID</th>\n                <th>CATEGORY_NAME</th>\n                <th>PARENT_CATEGORY_ID</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Electronics</td>\n                <td></td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Computers</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Laptops</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>Desktops</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Smartphones</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>6</td>\n                <td>Cameras</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>7</td>\n                <td>DSLR</td>\n                <td>6</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li>\n            <strong>Select Clause:</strong>\n            <ul>\n                <li>Columns selected:\n                    <ul>\n                        <li><code>category_id</code>: The unique identifier for each category.</li>\n                        <li><code>category_name</code>: The name of the category.</li>\n                        <li><code>parent_category_id</code>: The identifier of the parent category, if applicable.</li>\n                        <li><code>LEVEL</code>: A pseudo-column in Oracle that indicates the level of the category in the hierarchy, where the top-level categories (root categories) are at level 1, and each subsequent child level increments by 1.</li>\n                    </ul>\n                </li>\n            </ul>\n        </li>\n        <li>\n            <strong>START WITH Clause:</strong>\n            <ul>\n                <li>Specifies the starting point of the hierarchy:\n                    <ul>\n                        <li><code>START WITH parent_category_id IS NULL</code>: The query begins with the root categories, where <code>parent_category_id</code> is <code>NULL</code>, indicating that these categories do not have a parent and are the top-level categories in the hierarchy.</li>\n                    </ul>\n                </li>\n            </ul>\n        </li>\n        <li>\n            <strong>CONNECT BY Clause:</strong>\n            <ul>\n                <li>Defines the relationship between parent and child categories:\n                    <ul>\n                        <li><code>CONNECT BY PRIOR category_id = parent_category_id</code>: This establishes the hierarchical relationship, where <code>PRIOR category_id</code> refers to the parent category, and <code>parent_category_id</code> refers to the child. The query recursively connects each category with its parent to build the hierarchy.</li>\n                    </ul>\n                </li>\n            </ul>\n        </li>\n    </ul>    \n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 2,
    "Question": "Write an SQL query to generate the Fibonacci sequence up to a specified number.",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow:auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Generating the Fibonacci sequence using a recursive CTE.</span>\n<span class=\"SQLKeyword\">WITH</span> Fibonacci (prev<span class=\"SQLOperator\">,</span> curr<span class=\"SQLOperator\">,</span> n) <span class=\"SQLKeyword\">AS</span> (\n    <span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLString\">0</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">1</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">1</span> <span class=\"SQLKeyword\">FROM</span> <span class=\"SQLKeyword\">dual</span>\n    <span class=\"SQLKeyword\">UNION ALL</span>\n    <span class=\"SQLKeyword\">SELECT</span> curr<span class=\"SQLOperator\">,</span> prev <span class=\"SQLOperator\">+</span> curr<span class=\"SQLOperator\">,</span> n <span class=\"SQLOperator\">+</span> <span class=\"SQLString\">1</span>\n    <span class=\"SQLKeyword\">FROM</span> Fibonacci\n    <span class=\"SQLKeyword\">WHERE</span> curr <span class=\"SQLOperator\">+</span> prev <span class=\"SQLOperator\"><=</span> <span class=\"SQLString\">14</span>\n)\n<span class=\"SQLKeyword\">SELECT</span> prev <span class=\"SQLKeyword\">AS</span> fibonacci_number\n<span class=\"SQLKeyword\">FROM</span> Fibonacci<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>FIBONACCI_NUMBER</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>0</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>5</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>8</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li>\n            <strong>Common Table Expression (CTE) - <code>WITH Fibonacci</code>:</strong>\n            <ul>\n                <li>Defines a recursive CTE named <code>Fibonacci</code> that calculates Fibonacci numbers.</li>\n                <li>Columns in the CTE:\n                    <ul>\n                        <li><code>prev</code>: The previous Fibonacci number.</li>\n                        <li><code>curr</code>: The current Fibonacci number.</li>\n                        <li><code>n</code>: The position of the Fibonacci number in the sequence (starting from 1).</li>\n                    </ul>\n                </li>\n                <li>\n                    <strong>Initial Query:</strong>\n                    <ul>\n                        <li>Selects the initial values for the Fibonacci sequence:\n                            <ul>\n                                <li><code>SELECT 0, 1, 1 FROM dual</code>: Initializes the sequence with <code>prev = 0</code>, <code>curr = 1</code>, and <code>n = 1</code>.</li>\n                            </ul>\n                        </li>\n                    </ul>\n                </li>\n                <li>\n                    <strong>Recursive Query:</strong>\n                    <ul>\n                        <li>Generates the subsequent Fibonacci numbers:\n                            <ul>\n                                <li><code>SELECT curr, prev + curr, n + 1 FROM Fibonacci</code>: For each row, it calculates the next Fibonacci number by adding the current and previous numbers, while incrementing the position <code>n</code> by 1.</li>\n                                <li><code>WHERE curr + prev <= 14</code>: The recursion continues until the sum of the current and previous Fibonacci numbers exceeds 14, stopping the generation of further numbers.</li>\n                            </ul>\n                        </li>\n                    </ul>\n                </li>\n            </ul>\n        </li>\n        <li>\n            <strong>Main Query:</strong>\n            <ul>\n                <li>Selects the Fibonacci numbers generated by the CTE:\n                    <ul>\n                        <li><code>SELECT prev AS fibonacci_number FROM Fibonacci</code>: The query retrieves the <code>prev</code> column, which represents the Fibonacci numbers in the sequence, and labels it as <code>fibonacci_number</code>.</li>\n                    </ul>\n                </li>\n            </ul>\n        </li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 3,
    "Question": "What distinguishes hierarchical queries from nested queries in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">&bull; Hierarchical Queries:</h4><p>Used to process hierarchical data, often using <code>CONNECT BY</code> and <code>START WITH</code> clauses.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of a hierarchical query using START WITH and CONNECT BY.</span>\n<span class=\"SQLKeyword\">SELECT</span> category_id<span class=\"SQLOperator\">,</span>\n       parent_category_id<span class=\"SQLOperator\">,</span>\n       <span class=\"SQLFunction\">LEVEL</span>\n<span class=\"SQLKeyword\">FROM</span>   categories\n<span class=\"SQLKeyword\">START WITH</span> parent_category_id <span class=\"SQLKeyword\">IS NULL</span>\n<span class=\"SQLKeyword\">CONNECT BY PRIOR</span> category_id <span class=\"SQLOperator\">=</span> parent_category_id<span class=\"SQLOperator\">;</span>\n</pre>  \n</div>\n<h4 class=\"bold-maroon\">Explanation:</h4>\n<ul>\n    <li>\n        <strong>Purpose of the Query:</strong>\n        <ul>\n            <li>This query retrieves hierarchical data from the <code>categories</code> table, showing the relationship between categories and their parent categories.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>Key Elements:</strong>\n        <ul>\n            <li><code>category_id</code>: The unique identifier for each category.</li>\n            <li><code>parent_category_id</code>: The identifier of the parent category, indicating the hierarchical relationship.</li>\n            <li><code>LEVEL</code>: A pseudo-column that indicates the depth of each category in the hierarchy, starting from 1 for top-level categories.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>Hierarchical Query Construction:</strong>\n        <ul>\n            <li><code>START WITH parent_category_id IS NULL</code>: The query starts with the top-level categories (those without a parent).</li>\n            <li><code>CONNECT BY PRIOR category_id = parent_category_id</code>: The query recursively traverses the hierarchy, connecting each category to its child categories based on the parent-child relationship.</li>\n        </ul>\n    </li>\n</ul>\n    <h4 class=\"bold-blue\">&bull; Nested Queries:</h4><p>Subqueries embedded within the main query.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of a nested query using a subquery.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">*</span>\n<span class=\"SQLKeyword\">FROM</span>   products\n<span class=\"SQLKeyword\">WHERE</span>  category_id <span class=\"SQLKeyword\">IN</span> (<span class=\"SQLKeyword\">SELECT</span> category_id\n                       <span class=\"SQLKeyword\">FROM</span>   categories\n                       <span class=\"SQLKeyword\">WHERE</span>  parent_category_id <span class=\"SQLOperator\">=</span> <span class=\"SQLString\">1</span>)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Explanation:</h4>\n<ul>\n    <li>\n        <strong>Purpose of the Query:</strong>\n        <ul>\n            <li>This query retrieves all products that belong to specific subcategories under a given parent category.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>Main Query:</strong>\n        <ul>\n            <li>Selects all columns from the <code>products</code> table.</li>\n            <li>Filters the products to only include those whose <code>category_id</code> matches the category IDs identified by the subquery.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>Subquery:</strong>\n        <ul>\n            <li>Retrieves the <code>category_id</code> of all categories that have a <code>parent_category_id</code> equal to 1, meaning these are subcategories of a specific parent category.</li>\n        </ul>\n    </li>\n</ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 4,
    "Question": "Write a query to identify products that do not belong to any sub-category.",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Example 1: Using Left Join</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Identifying products without a sub-category using LEFT JOIN.</span>\n<span class=\"SQLKeyword\">SELECT</span> p<span class=\"SQLOperator\">.</span>product_id<span class=\"SQLOperator\">,</span>\n       p<span class=\"SQLOperator\">.</span>product_name<span class=\"SQLOperator\">,</span>\n       sub_category_id\n<span class=\"SQLKeyword\">FROM</span> products p\n       <span class=\"SQLKeyword\">LEFT JOIN</span>\n       product_sub_category psc\n       <span class=\"SQLKeyword\">ON</span> p<span class=\"SQLOperator\">.</span>product_id <span class=\"SQLOperator\">=</span> psc<span class=\"SQLOperator\">.</span>product_id\n<span class=\"SQLKeyword\">WHERE</span> psc<span class=\"SQLOperator\">.</span>sub_category_id <span class=\"SQLKeyword\">IS NULL</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Explanation:</h4>\n<ul>\n    <li>\n        <strong>Purpose of the Query:</strong>\n        <ul>\n            <li>This query identifies and retrieves products that do not have an associated sub-category.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>Key Components:</strong>\n        <ul>\n            <li><code>products p</code>: The main table containing product details.</li>\n            <li><code>product_sub_category psc</code>: The table containing the associations between products and their sub-categories.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>LEFT JOIN Operation:</strong>\n        <ul>\n            <li>The query performs a <code>LEFT JOIN</code> between the <code>products</code> table and the <code>product_sub_category</code> table.</li>\n            <li>The <code>LEFT JOIN</code> ensures that all products are included in the result, even if they do not have a matching sub-category in the <code>product_sub_category</code> table.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>Filter Condition:</strong>\n        <ul>\n            <li>The <code>WHERE</code> clause filters the results to include only those products where <code>sub_category_id</code> is <code>NULL</code>, meaning the product does not have a sub-category associated with it.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>Selected Columns:</strong>\n        <ul>\n            <li>The query selects the product ID, product name, and sub-category ID (which will be <code>NULL</code> for the products identified).</li>\n        </ul>\n    </li>\n</ul>\n    <h4 class=\"bold-blue\">Example 2: Using Subquery</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Identifying products without a sub-category using a subquery.</span>\n<span class=\"SQLKeyword\">SELECT</span> p<span class=\"SQLOperator\">.</span>product_id<span class=\"SQLOperator\">,</span>\n       p<span class=\"SQLOperator\">.</span>product_name\n<span class=\"SQLKeyword\">FROM</span>   products p\n<span class=\"SQLKeyword\">WHERE</span>  p<span class=\"SQLOperator\">.</span>product_id <span class=\"SQLKeyword\">NOT IN</span> (<span class=\"SQLKeyword\">SELECT</span> psc<span class=\"SQLOperator\">.</span>product_id\n                                <span class=\"SQLKeyword\">FROM</span>   product_sub_category psc)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Explanation:</h4>\n<ul>\n    <li>\n        <strong>Purpose of the Query:</strong>\n        <ul>\n            <li>This query identifies and retrieves products that do not have an associated sub-category using a subquery.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>Main Query:</strong>\n        <ul>\n            <li>Selects the following columns from the <code>products</code> table:\n                <ul>\n                    <li><code>product_id</code>: The unique identifier for each product.</li>\n                    <li><code>product_name</code>: The name of the product.</li>\n                </ul>\n            </li>\n            <li>Filters the products to only include those whose <code>product_id</code> is not present in the subquery results.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>Subquery:</strong>\n        <ul>\n            <li>Selects the <code>product_id</code> from the <code>product_sub_category</code> table.</li>\n            <li>This subquery retrieves the IDs of products that have at least one associated sub-category.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>Filtering Logic:</strong>\n        <ul>\n            <li>The <code>WHERE</code> clause in the main query uses the <code>NOT IN</code> condition to filter out products that are listed in the subquery.</li>\n            <li>As a result, only products that do not have any associated sub-category are included in the final result set.</li>\n        </ul>\n    </li>\n</ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 5,
    "Question": "What are Common Table Expressions (CTEs) in Oracle SQL, and how are they used?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Common Table Expressions (CTEs) in Oracle SQL are a way to create a temporary result set that you can use in a query. They help make your SQL queries easier to read and understand.</p>\n    <h4 class=\"bold-blue\">Key Points:</h4>\n    <ol>\n        <li><b>Simplify Complex Queries:</b> CTEs let you break down a complicated query into smaller, more manageable pieces.</li>\n        <li><b>Improve Readability:</b> By using CTEs, your SQL code becomes cleaner and easier to follow.</li>\n        <li><b>Reusable:</b> You can use the same CTE multiple times in a query, so you don't have to repeat the same logic.</li>\n        <li><b>Handle Hierarchical Data:</b> CTEs can be used to work with data that has a parent-child relationship, like organizational charts.</li>\n    </ol>\n    <h4 class=\"bold-blue\">How to Use CTEs:</h4>\n    <ol>\n        <li><b>Step 1:</b> Define the CTE at the beginning of your query.</li>\n        <li><b>Step 2:</b> Use the CTE in the main part of your query.</li>\n    </ol>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of using a Common Table Expression (CTE) in a query.</span>\n<span class=\"SQLKeyword\">WITH</span> sales_summary\n     <span class=\"SQLKeyword\">AS</span> (<span class=\"SQLKeyword\">SELECT</span> p<span class=\"SQLOperator\">.</span>product_id<span class=\"SQLOperator\">,</span>\n                p<span class=\"SQLOperator\">.</span>product_name<span class=\"SQLOperator\">,</span>\n                <span class=\"SQLFunction\">SUM</span>(s<span class=\"SQLOperator\">.</span>amount) <span class=\"SQLKeyword\">AS</span> total_sales\n         <span class=\"SQLKeyword\">FROM</span>   products p\n                <span class=\"SQLKeyword\">join</span> sales s\n                  <span class=\"SQLKeyword\">ON</span> p<span class=\"SQLOperator\">.</span>product_id <span class=\"SQLOperator\">=</span> s<span class=\"SQLOperator\">.</span>product_id\n         <span class=\"SQLKeyword\">GROUP BY</span> p<span class=\"SQLOperator\">.</span>product_id<span class=\"SQLOperator\">,</span>\n                   p<span class=\"SQLOperator\">.</span>product_name)\n<span class=\"SQLKeyword\">SELECT</span> product_id<span class=\"SQLOperator\">,</span>\n       product_name<span class=\"SQLOperator\">,</span>\n       total_sales\n<span class=\"SQLKeyword\">FROM</span>   sales_summary\n<span class=\"SQLKeyword\">WHERE</span>  total_sales <span class=\"SQLOperator\">></span> <span class=\"SQLString\">1000</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>A Common Table Expression (CTE) used to calculate the total sales for each product in the <code>products</code> and <code>sales</code> tables, and then products with total sales exceeding 1000 were selected from the <code>sales_summary</code> table.</p>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PRODUCT_ID</th>\n                <th>PRODUCT_NAME</th>\n                <th>TOTAL_SALES</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Laptop</td>\n                <td>2700</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Smartphone</td>\n                <td>1500</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Tablet</td>\n                <td>1100</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 6,
    "Question": "Write a query to find the average, maximum, minimum, and count of the prices of products.",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Finding average, maximum, minimum, and count of product prices.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">AVG</span>(price) <span class=\"SQLKeyword\">AS</span> avg_price<span class=\"SQLOperator\">,</span>\n       <span class=\"SQLFunction\">MAX</span>(price) <span class=\"SQLKeyword\">AS</span> max_price<span class=\"SQLOperator\">,</span>\n       <span class=\"SQLFunction\">MIN</span>(price) <span class=\"SQLKeyword\">AS</span> min_price<span class=\"SQLOperator\">,</span>\n       <span class=\"SQLFunction\">COUNT</span>(<span class=\"SQLKeyword\">*</span>) <span class=\"SQLKeyword\">AS</span> total_products\n<span class=\"SQLKeyword\">FROM</span> products<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Explanation:</h4>\n<ul>\n    <li>\n        <strong>Purpose of the Query:</strong>\n        <ul>\n            <li>This query calculates various statistical measures for product prices, including the average, maximum, minimum, and the total count of products.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>Aggregated Calculations:</strong>\n        <ul>\n            <li><code>AVG(price) AS avg_price</code>: Calculates the average price of all products and labels it as <code>avg_price</code>.</li>\n            <li><code>MAX(price) AS max_price</code>: Finds the maximum price among all products and labels it as <code>max_price</code>.</li>\n            <li><code>MIN(price) AS min_price</code>: Finds the minimum price among all products and labels it as <code>min_price</code>.</li>\n            <li><code>COUNT(*) AS total_products</code>: Counts the total number of products in the <code>products</code> table and labels it as <code>total_products</code>.</li>\n        </ul>\n    </li>\n</ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 7,
    "Question": "How can you find employees who report directly or indirectly to a specific manager using a query?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #4fa4ff;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - EMPLOYEES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>EMPLOYEE_NAME</th>\n                <th>MANAGER_ID</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Vince McMahon</td>\n                <td></td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Triple H</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Stephanie McMahon</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>John Cena</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Randy Orton</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>6</td>\n                <td>Seth Rollins</td>\n                <td>3</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>7</td>\n                <td>Roman Reigns</td>\n                <td>3</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Finding employees who report to a specific manager.</span>\n<span class=\"SQLKeyword\">SELECT</span> employee_id<span class=\"SQLOperator\">,</span>\n       employee_name<span class=\"SQLOperator\">,</span>\n       manager_id<span class=\"SQLOperator\">,</span>\n       (<span class=\"SQLKeyword\">SELECT</span> employee_name\n        <span class=\"SQLKeyword\">FROM</span>   employees\n        <span class=\"SQLKeyword\">WHERE</span>  employee_id <span class=\"SQLOperator\">=</span> e<span class=\"SQLOperator\">.</span>manager_id) <span class=\"SQLKeyword\">AS</span> manager_name\n<span class=\"SQLKeyword\">FROM</span>   employees e\n<span class=\"SQLKeyword\">START WITH</span> employee_id <span class=\"SQLOperator\">=</span> <span class=\"SQLString\">2</span>\n<span class=\"SQLComment\">-- These employees directly or indirectly report \n-- to employee_id = 2.</span>\n<span class=\"SQLKeyword\">CONNECT BY PRIOR</span> employee_id <span class=\"SQLOperator\">=</span> manager_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>EMPLOYEE_NAME</th>\n                <th>MANAGER_ID</th>\n                <th>MANAGER_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>2</td>\n                <td>Triple H</td>\n                <td>1</td>\n                <td>Vince McMahon</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>John Cena</td>\n                <td>2</td>\n                <td>Triple H</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Randy Orton</td>\n                <td>2</td>\n                <td>Triple H</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li>\n            <strong>Purpose of the Query:</strong>\n            <ul>\n                <li>This query identifies employees who directly or indirectly report to a specific manager, and also retrieves the name of the manager they report to.</li>\n            </ul>\n        </li>\n        <li>\n            <strong>Main Query:</strong>\n            <ul>\n                <li>Selects the following columns from the <code>employees</code> table:\n                    <ul>\n                        <li><code>employee_id</code>: The unique identifier for each employee.</li>\n                        <li><code>employee_name</code>: The name of the employee.</li>\n                        <li><code>manager_id</code>: The unique identifier of the manager to whom the employee reports.</li>\n                        <li><code>manager_name</code>: A correlated subquery retrieves the name of the manager using the <code>manager_id</code>.</li>\n                    </ul>\n                </li>\n            </ul>\n        </li>\n        <li>\n            <strong>Hierarchical Query Construction:</strong>\n            <ul>\n                <li><code>START WITH employee_id = 2</code>: The query starts with the manager whose <code>employee_id</code> is 2.</li>\n                <li><code>CONNECT BY PRIOR employee_id = manager_id</code>: The query recursively traverses the hierarchy to find all employees who report to the manager, either directly or indirectly.</li>\n            </ul>\n        </li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 8,
    "Question": "What techniques can make a query with multiple JOINs run more efficiently?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>To optimize a query with multiple JOINs in Oracle, several techniques can be used:</p>\n    <ol>\n        <li><b>Indexing:</b> Ensure indexes are on columns used in JOIN conditions and WHERE clauses for faster data retrieval.</li>\n        <li><b>Join Order and Types:</b> Start with the most selective joins to reduce data early. Use the appropriate join type (INNER, LEFT, etc.).</li>\n        <li><b>Statistics and Histograms:</b> Keep table and index statistics up-to-date using <code>DBMS_STATS</code>. Use histograms for skewed data.</li>\n        <li><b>Avoiding Cartesian Products:</b> Ensure proper JOIN conditions to prevent generating large, inefficient result sets.</li>\n        <li><b>Query Rewriting:</b> Break complex queries into smaller subqueries or use Common Table Expressions (CTEs) for clarity and efficiency.</li>\n        <li><b>Subqueries and Inline Views:</b> Use these to filter and reduce data early in the query process.</li>\n        <li><b>Materialized Views:</b> Use them to store precomputed join results, speeding up queries with infrequent data changes.</li>\n        <li><b>Partitioning:</b> Partition large tables and join on partitioned columns for better performance.</li>\n        <li><b>Avoiding Function Calls on Join Columns:</b> Functions can prevent index use, so avoid them in JOIN conditions.</li>\n    </ol>\n    <p>By applying these techniques, the performance of multi-join queries in Oracle can be enhanced.</p>\n    <h4 class=\"bold-maroon\">Example:</h4>\n    <p>The query below fetches the order IDs, customer names, and product names for orders made by customers residing in New York City.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Fetching order details for customers in New York using joins.</span>\n<span class=\"SQLKeyword\">SELECT</span> o<span class=\"SQLOperator\">.</span>order_id<span class=\"SQLOperator\">,</span>\n       c<span class=\"SQLOperator\">.</span>customer_name<span class=\"SQLOperator\">,</span>\n       p<span class=\"SQLOperator\">.</span>product_name\n<span class=\"SQLKeyword\">FROM</span>   orders o\n       <span class=\"SQLKeyword\">join</span> customers c\n         <span class=\"SQLKeyword\">ON</span> o<span class=\"SQLOperator\">.</span>customer_id <span class=\"SQLOperator\">=</span> c<span class=\"SQLOperator\">.</span>customer_id\n       <span class=\"SQLKeyword\">join</span> order_items oi\n         <span class=\"SQLKeyword\">ON</span> o<span class=\"SQLOperator\">.</span>order_id <span class=\"SQLOperator\">=</span> oi<span class=\"SQLOperator\">.</span>order_id\n       <span class=\"SQLKeyword\">join</span> products p\n         <span class=\"SQLKeyword\">ON</span> oi<span class=\"SQLOperator\">.</span>product_id <span class=\"SQLOperator\">=</span> p<span class=\"SQLOperator\">.</span>product_id\n<span class=\"SQLKeyword\">WHERE</span>  c<span class=\"SQLOperator\">.</span>city <span class=\"SQLOperator\">=</span> <span class=\"SQLString\">'New York'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 9,
    "Question": "What is the purpose of the GROUP BY clause? Provide an example.",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #4fa4ff;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>The <code>GROUP BY</code> clause is used to group rows with the same values in specified columns, allowing aggregate functions like <code>SUM</code>, <code>COUNT</code>, <code>AVG</code>, <code>MAX</code>, and <code>MIN</code> to be applied to each group.</p>\n    <h4 class=\"bold-blue\">Consider a <code>sales</code> table with columns: <code>sales_id</code>, <code>product_id</code>, <code>sales_amount</code>, and <code>sales_date</code>.</h4>\n    <h4 class=\"bold-maroon\">Input Data: Table - SALES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>SALES_ID</th>\n                <th>PRODUCT_ID</th>\n                <th>SALES_AMOUNT</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>1</td>\n                <td>500</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>1</td>\n                <td>1000</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>2</td>\n                <td>800</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>2</td>\n                <td>1500</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>3</td>\n                <td>1200</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Query with <code>GROUP BY</code>:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Using GROUP BY to aggregate sales data by product_id.</span>\n<span class=\"SQLKeyword\">SELECT</span> product_id<span class=\"SQLOperator\">,</span>\n       <span class=\"SQLFunction\">SUM</span>(sales_amount) <span class=\"SQLKeyword\">AS</span> total_sales<span class=\"SQLOperator\">,</span>\n       <span class=\"SQLFunction\">MIN</span>(sales_amount) <span class=\"SQLKeyword\">AS</span> min_sales<span class=\"SQLOperator\">,</span>\n       <span class=\"SQLFunction\">MAX</span>(sales_amount) <span class=\"SQLKeyword\">AS</span> max_sales<span class=\"SQLOperator\">,</span>\n       <span class=\"SQLFunction\">AVG</span>(sales_amount) <span class=\"SQLKeyword\">AS</span> avg_sales<span class=\"SQLOperator\">,</span>\n       <span class=\"SQLFunction\">COUNT</span>(<span class=\"SQLKeyword\">*</span>) <span class=\"SQLKeyword\">AS</span> count_rows\n  <span class=\"SQLKeyword\">FROM</span> sales\n <span class=\"SQLKeyword\">GROUP BY</span> product_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This query groups sales data by <code>product_id</code> and calculates the total, minimum, maximum, and average sales amounts, as well as the count of sales records for each product. The results are aggregated using <code>SUM</code>, <code>MIN</code>, <code>MAX</code>, <code>AVG</code>, and <code>COUNT</code> functions.</p>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PRODUCT_ID</th>\n                <th>TOTAL_SALES</th>\n                <th>MIN_SALES</th>\n                <th>MAX_SALES</th>\n                <th>AVG_SALES</th>\n                <th>COUNT_ROWS</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>1500</td>\n                <td>500</td>\n                <td>1000</td>\n                <td>750</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>2300</td>\n                <td>800</td>\n                <td>1500</td>\n                <td>1150</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>1200</td>\n                <td>1200</td>\n                <td>1200</td>\n                <td>1200</td>\n                <td>1</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 10,
    "Question": "Explain the functions NVL, COALESCE, NULLIF, and NVL2 in Oracle SQL for handling null values.",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">NVL:</h4>\n    <p>Replaces <code>NULL</code> with a specified value.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- NVL: Replaces NULL with a specified value.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">NVL</span>(price<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">0</span>) <span class=\"SQLKeyword\">FROM</span> products<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">COALESCE:</h4>\n    <p>Returns the first non-<code>NULL</code> value in a list.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- COALESCE: Returns the first non-NULL value in a list.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">COALESCE</span>(discount_price<span class=\"SQLOperator\">,</span> price<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">0</span>)\n<span class=\"SQLKeyword\">FROM</span> products<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">NULLIF:</h4>\n    <p>Returns <code>NULL</code> if the two expressions are equal; otherwise, returns the first expression.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- NULLIF: Returns NULL if the two expressions are equal; \n-- otherwise, returns the first expression.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">NULLIF</span>(price<span class=\"SQLOperator\">,</span> discount_price)\n<span class=\"SQLKeyword\">FROM</span> products<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">NVL2:</h4>\n    <p>If the first expression is not <code>NULL</code>, returns the second expression; otherwise, returns the third expression.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- NVL2: If the first expression is not NULL, \n-- returns the second expression; otherwise, \n-- returns the third expression.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">NVL2</span>(discount_price<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'Discounted'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'Full Price'</span>)\n<span class=\"SQLKeyword\">FROM</span> products<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 11,
    "Question": "What are the advantages and disadvantages of using subqueries in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Advantages of Using Subqueries in Oracle SQL:</h4>\n    <ol>\n        <li><b>Simplifies Queries:</b> Makes complex queries easier to manage.</li>\n        <li><b>Reduces Errors:</b> Keeps parts of the query separate, making it less likely to make mistakes.</li>\n        <li><b>Reuses Logic:</b> Allows the same piece of query to be used in different places.</li>\n        <li><b>Flexible Placement:</b> Can be used in different parts of an SQL statement.</li>\n        <li><b>Easier Debugging:</b> Helps to break down steps, making it easier to find and fix issues.</li>\n    </ol>\n    <h4 class=\"bold-blue\">Disadvantages of Using Subqueries in Oracle SQL:</h4>\n    <ol>\n        <li><b>Can Be Slow:</b> Might make the query run slower if not done right.</li>\n        <li><b>Harder to Optimize:</b> More difficult for the database to optimize compared to JOINs.</li>\n        <li><b>Can Be Confusing:</b> Nested subqueries can make the query hard to read.</li>\n        <li><b>Limited Use:</b> Some tasks are harder to do with subqueries than with JOINs or other methods.</li>\n    </ol>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 12,
    "Question": "What are some Oracle Analytical Functions, and can you give an example?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Oracle analytical functions are used to perform complex data analysis and calculations over a set of rows. These functions help in tasks such as computing running totals, ranking data, and performing moving averages.</p>\n    <h4 class=\"bold-blue\">Some Common Oracle Analytical Functions</h4>\n    <ol>\n        <li><b>ROW_NUMBER():</b> Assigns a unique number to each row within a partition of the result set, starting with 1 for the first row in each partition.</li>\n        <li><b>RANK():</b> Assigns a rank to each row within a partition of the result set. Rows with equal values receive the same rank, with gaps in the ranking sequence.</li>\n        <li><b>DENSE_RANK():</b> Similar to <code>RANK()</code>, but without gaps in the ranking sequence.</li>\n        <li><b>LAG():</b> Provides access to a row at a specified physical offset prior to that position.</li>\n        <li><b>LEAD():</b> Provides access to a row at a specified physical offset following that position.</li>\n        <li><b>FIRST_VALUE()</b> and <b>LAST_VALUE():</b>Returns the first or last value in an ordered set of values.</li>\n        <li><b>SUM()</b> with <code>OVER()</code>: Computes the sum of a set of values, often used with partitions.</li>\n    </ol>\n    <h4 class=\"bold-maroon\">Input Data: Table - EMPLOYEES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>DEPARTMENT_ID</th>\n                <th>EMPLOYEE_NAME</th>\n                <th>SALARY</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>1</td>\n                <td>John Cena</td>\n                <td>50000</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>1</td>\n                <td>The Rock</td>\n                <td>60000</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>2</td>\n                <td>Stone Cold</td>\n                <td>55000</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>2</td>\n                <td>Hulk Hogan</td>\n                <td>70000</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>3</td>\n                <td>Triple H</td>\n                <td>65000</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>6</td>\n                <td>3</td>\n                <td>Undertaker</td>\n                <td>48000</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>7</td>\n                <td>1</td>\n                <td>Randy Orton</td>\n                <td>52000</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Example Query Using Analytical Functions</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of using Oracle Analytical Functions.</span>\n<span class=\"SQLKeyword\">SELECT</span> employee_id<span class=\"SQLOperator\">,</span>\n       salary<span class=\"SQLOperator\">,</span>\n       <span class=\"SQLFunction\">ROW_NUMBER</span>()\n         <span class=\"SQLKeyword\">OVER</span> (\n           <span class=\"SQLKeyword\">ORDER BY</span> salary <span class=\"SQLKeyword\">DESC</span>) <span class=\"SQLKeyword\">AS</span> row_num<span class=\"SQLOperator\">,</span>\n       <span class=\"SQLFunction\">RANK</span>()\n         <span class=\"SQLKeyword\">OVER</span> (\n           <span class=\"SQLKeyword\">ORDER BY</span> salary <span class=\"SQLKeyword\">DESC</span>) <span class=\"SQLKeyword\">AS</span> rank<span class=\"SQLOperator\">,</span>\n       <span class=\"SQLFunction\">DENSE_RANK</span>()\n         <span class=\"SQLKeyword\">OVER</span> (\n           <span class=\"SQLKeyword\">ORDER BY</span> salary <span class=\"SQLKeyword\">DESC</span>) <span class=\"SQLKeyword\">AS</span> dense_rank<span class=\"SQLOperator\">,</span>\n       <span class=\"SQLFunction\">LAG</span>(salary<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">1</span>)\n         <span class=\"SQLKeyword\">OVER</span> (\n           <span class=\"SQLKeyword\">ORDER BY</span> employee_id) <span class=\"SQLKeyword\">AS</span> prev_salary<span class=\"SQLOperator\">,</span>\n       <span class=\"SQLFunction\">LEAD</span>(salary<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">1</span>)\n         <span class=\"SQLKeyword\">OVER</span> (\n           <span class=\"SQLKeyword\">ORDER BY</span> employee_id) <span class=\"SQLKeyword\">AS</span> next_salary<span class=\"SQLOperator\">,</span>\n       <span class=\"SQLFunction\">FIRST_VALUE</span>(salary)\n         <span class=\"SQLKeyword\">OVER</span> (\n           <span class=\"SQLKeyword\">ORDER BY</span> salary <span class=\"SQLKeyword\">DESC</span>) <span class=\"SQLKeyword\">AS</span> highest_salary<span class=\"SQLOperator\">,</span>\n       <span class=\"SQLFunction\">LAST_VALUE</span>(salary)\n         <span class=\"SQLKeyword\">OVER</span> (\n           <span class=\"SQLKeyword\">ORDER BY</span> salary <span class=\"SQLKeyword\">DESC</span>) <span class=\"SQLKeyword\">AS</span> lowest_salary<span class=\"SQLOperator\">,</span>\n       <span class=\"SQLFunction\">SUM</span>(salary)\n         <span class=\"SQLKeyword\">OVER</span> (\n           <span class=\"SQLKeyword\">PARTITION BY</span> department_id) <span class=\"SQLKeyword\">AS</span> dept_total_salary\n<span class=\"SQLKeyword\">FROM</span>   employees<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>SALARY</th>\n                <th>ROW_NUM</th>\n                <th>RANK</th>\n                <th>DENSE_RANK</th>\n                <th>PREV_SALARY</th>\n                <th>NEXT_SALARY</th>\n                <th>HIGHEST_SALARY</th>\n                <th>LOWEST_SALARY</th>\n                <th>DEPT_TOTAL_SALARY</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>50000</td>\n                <td>6</td>\n                <td>6</td>\n                <td>6</td>\n                <td>NULL</td>\n                <td>60000</td>\n                <td>70000</td>\n                <td>50000</td>\n                <td>162000</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>60000</td>\n                <td>3</td>\n                <td>3</td>\n                <td>3</td>\n                <td>50000</td>\n                <td>55000</td>\n                <td>70000</td>\n                <td>60000</td>\n                <td>162000</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>55000</td>\n                <td>4</td>\n                <td>4</td>\n                <td>4</td>\n                <td>60000</td>\n                <td>70000</td>\n                <td>70000</td>\n                <td>55000</td>\n                <td>125000</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>70000</td>\n                <td>1</td>\n                <td>1</td>\n                <td>1</td>\n                <td>55000</td>\n                <td>65000</td>\n                <td>70000</td>\n                <td>70000</td>\n                <td>125000</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>65000</td>\n                <td>2</td>\n                <td>2</td>\n                <td>2</td>\n                <td>70000</td>\n                <td>48000</td>\n                <td>70000</td>\n                <td>65000</td>\n                <td>113000</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>6</td>\n                <td>48000</td>\n                <td>7</td>\n                <td>7</td>\n                <td>7</td>\n                <td>65000</td>\n                <td>52000</td>\n                <td>70000</td>\n                <td>48000</td>\n                <td>113000</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>7</td>\n                <td>52000</td>\n                <td>5</td>\n                <td>5</td>\n                <td>5</td>\n                <td>48000</td>\n                <td>NULL</td>\n                <td>70000</td>\n                <td>52000</td>\n                <td>162000</td>\n            </tr>\n \n </tbody>\n            </table>\n    </div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 13,
    "Question": "Write a query to find employees who have the same job and department as their manager.",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - EMPLOYEES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>EMPLOYEE_NAME</th>\n                <th>JOB_ID</th>\n                <th>DEPARTMENT_ID</th>\n                <th>MANAGER_ID</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>John Cena</td>\n                <td>DEV</td>\n                <td>101</td>\n                <td></td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>The Rock</td>\n                <td>DEV</td>\n                <td>101</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Stone Cold</td>\n                <td>HR</td>\n                <td>102</td>\n                <td></td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>Hulk Hogan</td>\n                <td>HR</td>\n                <td>102</td>\n                <td>3</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Triple H</td>\n                <td>DEV</td>\n                <td>101</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>6</td>\n                <td>Undertaker</td>\n                <td>DEV</td>\n                <td>103</td>\n                <td></td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>7</td>\n                <td>Randy Orton</td>\n                <td>DEV</td>\n                <td>103</td>\n                <td>6</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>8</td>\n                <td>Kane</td>\n                <td>HR</td>\n                <td>102</td>\n                <td>3</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Finding employees with the same job \n-- and department as their manager.</span>\n<span class=\"SQLKeyword\">SELECT</span> e<span class=\"SQLOperator\">.</span>employee_id<span class=\"SQLOperator\">,</span>\n       e<span class=\"SQLOperator\">.</span>employee_name<span class=\"SQLOperator\">,</span>\n       e<span class=\"SQLOperator\">.</span>job_id<span class=\"SQLOperator\">,</span>\n       e<span class=\"SQLOperator\">.</span>department_id<span class=\"SQLOperator\">,</span>\n       e<span class=\"SQLOperator\">.</span>manager_id\n  <span class=\"SQLKeyword\">FROM</span> employees e\n       <span class=\"SQLKeyword\">JOIN</span>\n       employees m <span class=\"SQLKeyword\">ON</span> e<span class=\"SQLOperator\">.</span>manager_id <span class=\"SQLOperator\">=</span> m<span class=\"SQLOperator\">.</span>employee_id\n <span class=\"SQLKeyword\">WHERE</span> e<span class=\"SQLOperator\">.</span>job_id <span class=\"SQLOperator\">=</span> m<span class=\"SQLOperator\">.</span>job_id <span class=\"SQLKeyword\">AND</span>\n       e<span class=\"SQLOperator\">.</span>department_id <span class=\"SQLOperator\">=</span> m<span class=\"SQLOperator\">.</span>department_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>EMPLOYEE_NAME</th>\n                <th>JOB_ID</th>\n                <th>DEPARTMENT_ID</th>\n                <th>MANAGER_ID</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>2</td>\n                <td>The Rock</td>\n                <td>DEV</td>\n                <td>101</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>5</td>\n                <td>Triple H</td>\n                <td>DEV</td>\n                <td>101</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>4</td>\n                <td>Hulk Hogan</td>\n                <td>HR</td>\n                <td>102</td>\n                <td>3</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>8</td>\n                <td>Kane</td>\n                <td>HR</td>\n                <td>102</td>\n                <td>3</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>7</td>\n                <td>Randy Orton</td>\n                <td>DEV</td>\n                <td>103</td>\n                <td>6</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li>\n            <strong>Purpose of the Query:</strong>\n            <ul>\n                <li>This query identifies employees who have the same job and work in the same department as their manager.</li>\n            </ul>\n        </li>\n        <li>\n            <strong>Table Relationships:</strong>\n            <ul>\n                <li>The query involves a self-join on the <code>employees</code> table, where:\n                    <ul>\n                        <li><code>e</code>: Represents the employee being checked.</li>\n                        <li><code>m</code>: Represents the manager of the employee <code>e</code>.</li>\n                    </ul>\n                </li>\n            </ul>\n        </li>\n        <li>\n            <strong>Join Condition:</strong>\n            <ul>\n                <li><code>e.manager_id = m.employee_id</code>: The query joins the table on the condition that the <code>manager_id</code> of the employee matches the <code>employee_id</code> of the manager.</li>\n            </ul>\n        </li>\n        <li>\n            <strong>Filter Conditions:</strong>\n            <ul>\n                <li>The query filters the results to include only those employees where:\n                    <ul>\n                        <li><code>e.job_id = m.job_id</code>: The employee's job matches the manager's job.</li>\n                        <li><code>e.department_id = m.department_id</code>: The employee's department matches the manager's department.</li>\n                    </ul>\n                </li>\n            </ul>\n        </li>\n    </ul>\n    \n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 14,
    "Question": "How would you write a query to find the nth (or 3rd) highest salary?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th,\n        .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode,\n            .tg {\n                font-size: 12px;\n            }\n            .tg th,\n            .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode,\n            .tg {\n                font-size: 11px;\n            }\n            .tg th,\n            .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - EMPLOYEES</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>EMPLOYEE_ID</th>\n                    <th>EMPLOYEE_NAME</th>\n                    <th>SALARY</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>101</td>\n                    <td>Joe Louis</td>\n                    <td>90000</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>102</td>\n                    <td>Roberto Duran</td>\n                    <td>120000</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>103</td>\n                    <td>Muhammad Ali</td>\n                    <td>110000</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>104</td>\n                    <td>Ray Leonard</td>\n                    <td>85000</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>105</td>\n                    <td>Joe Louis</td>\n                    <td>95000</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>106</td>\n                    <td>Mike Tyson</td>\n                    <td>105000</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <div class=\"scrollable-container\">\n        <pre class=\"SQLCode\"><span class=\"SQLComment\">-- Query to find the 3rd highest salary.</span>\n<span class=\"SQLKeyword\">SELECT</span> employee_id<span class=\"SQLOperator\">,</span> employee_name<span class=\"SQLOperator\">,</span> salary\n<span class=\"SQLKeyword\">FROM</span> (\n    <span class=\"SQLKeyword\">SELECT</span> employee_id<span class=\"SQLOperator\">,</span> employee_name<span class=\"SQLOperator\">,</span> salary<span class=\"SQLOperator\">,</span>\n           <span class=\"SQLFunction\">RANK</span>() <span class=\"SQLKeyword\">OVER</span> (<span class=\"SQLKeyword\">ORDER BY</span> salary <span class=\"SQLKeyword\">DESC</span>) <span class=\"SQLKeyword\">AS</span> salary_rank\n    <span class=\"SQLKeyword\">FROM</span> employees\n)\n<span class=\"SQLKeyword\">WHERE</span> salary_rank <span class=\"SQLOperator\">=</span> <span class=\"SQLString\">3</span><span class=\"SQLOperator\">;</span>\n</pre>\n    </div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>EMPLOYEE_ID</th>\n                    <th>EMPLOYEE_NAME</th>\n                    <th>SALARY</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>106</td>\n                    <td>Mike Tyson</td>\n                    <td>105000</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li>\n            <strong>Select Clause:</strong>\n            <ul>\n                <li>Columns selected:\n                    <ul>\n                        <li><code>employee_id</code>: The unique identifier for each employee.</li>\n                        <li><code>employee_name</code>: The name of the employee.</li>\n                        <li><code>salary</code>: The salary of the employee.</li>\n                    </ul>\n                </li>\n            </ul>\n        </li>\n        <li>\n            <strong>Subquery:</strong>\n            <ul>\n                <li>Uses <code>RANK()</code> analytic function to assign a rank to each employee based on their salary in descending order.</li>\n            </ul>\n        </li>\n        <li>\n            <strong>WHERE Clause:</strong>\n            <ul>\n                <li>Filters the result to get the employee(s) with the 3rd highest salary by checking where <code>salary_rank</code> equals 3.</li>\n            </ul>\n        </li>\n    </ul>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 15,
    "Question": "How would you write a query to find the nth (or 2nd) highest salary based on the department and show only one employee for each department?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th,\n        .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode,\n            .tg {\n                font-size: 12px;\n            }\n            .tg th,\n            .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode,\n            .tg {\n                font-size: 11px;\n            }\n            .tg th,\n            .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - EMPLOYEES</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>EMPLOYEE_ID</th>\n                    <th>EMPLOYEE_NAME</th>\n                    <th>DEPARTMENT_NAME</th>\n                    <th>SALARY</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>101</td>\n                    <td>Kurt Angle</td>\n                    <td>Sales</td>\n                    <td>90000</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>102</td>\n                    <td>Hulk Hogan</td>\n                    <td>Sales</td>\n                    <td>120000</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>103</td>\n                    <td>Rey Mysterio</td>\n                    <td>Sales</td>\n                    <td>110000</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>104</td>\n                    <td>Triple H</td>\n                    <td>Sales</td>\n                    <td>85000</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>105</td>\n                    <td>John Cena</td>\n                    <td>Engineering</td>\n                    <td>95000</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>106</td>\n                    <td>Ric Flair</td>\n                    <td>Engineering</td>\n                    <td>105000</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>107</td>\n                    <td>Randy Savage</td>\n                    <td>Engineering</td>\n                    <td>115000</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>108</td>\n                    <td>Shawn Michaels</td>\n                    <td>Engineering</td>\n                    <td>125000</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <div class=\"scrollable-container\">\n        <pre class=\"SQLCode\"><span class=\"SQLComment\">-- Query to find the 2nd highest salary by department.</span>\n<span class=\"SQLKeyword\">SELECT</span> department_name<span class=\"SQLOperator\">,</span>\n       employee_id<span class=\"SQLOperator\">,</span>\n       employee_name<span class=\"SQLOperator\">,</span>\n       salary\n<span class=\"SQLKeyword\">FROM</span>   (<span class=\"SQLKeyword\">SELECT</span> department_name<span class=\"SQLOperator\">,</span>\n               employee_id<span class=\"SQLOperator\">,</span>\n               employee_name<span class=\"SQLOperator\">,</span>\n               salary<span class=\"SQLOperator\">,</span>\n               <span class=\"SQLFunction\">ROW_NUMBER</span>()\n                 <span class=\"SQLKeyword\">OVER</span> (\n                   <span class=\"SQLKeyword\">PARTITION BY</span> department_name\n                   <span class=\"SQLKeyword\">ORDER BY</span> salary <span class=\"SQLKeyword\">DESC</span>) <span class=\"SQLKeyword\">AS</span> rn\n        <span class=\"SQLKeyword\">FROM</span>   employees)\n<span class=\"SQLKeyword\">WHERE</span>  rn <span class=\"SQLOperator\">=</span> <span class=\"SQLString\">2</span><span class=\"SQLOperator\">;</span>\n</pre>\n    </div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>DEPARTMENT_NAME</th>\n                    <th>EMPLOYEE_ID</th>\n                    <th>EMPLOYEE_NAME</th>\n                    <th>SALARY</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>Sales</td>\n                    <td>103</td>\n                    <td>Rey Mysterio</td>\n                    <td>110000</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>Engineering</td>\n                    <td>107</td>\n                    <td>Randy Savage</td>\n                    <td>115000</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li>\n            <strong>Select Clause:</strong>\n            <ul>\n                <li>Columns selected:\n                    <ul>\n                        <li><code>department_name</code>: The name of the department to which the employee belongs.</li>\n                        <li><code>employee_id</code>: The unique identifier for each employee.</li>\n                        <li><code>employee_name</code>: The name of the employee.</li>\n                        <li><code>salary</code>: The salary of the employee.</li>\n                    </ul>\n                </li>\n            </ul>\n        </li>\n        <li>\n            <strong>PARTITION BY Clause:</strong>\n            <ul>\n                <li>The <code>PARTITION BY department_name</code> divides the result set into partitions based on each department. The <code>ROW_NUMBER()</code> function then assigns a sequential number to each employee's salary within these partitions.</li>\n            </ul>\n        </li>\n        <li>\n            <strong>ROW_NUMBER() Function:</strong>\n            <ul>\n                <li>This function assigns a unique rank to each row within a department partition, ordered by salary in descending order. The highest salary gets rank 1, the second highest gets rank 2, and so on.</li>\n            </ul>\n        </li>\n        <li>\n            <strong>WHERE Clause:</strong>\n            <ul>\n                <li>Filters the result to get the employee(s) with the 2nd highest salary in each department by checking where <code>rn</code> equals 2.</li>\n            </ul>\n        </li>\n    </ul>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 16,
    "Question": "What do the EXISTS and NOT EXISTS clauses do in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>The <code>EXISTS</code> and <code>NOT EXISTS</code> clauses in SQL are used in subqueries to test for the existence (or non-existence) of rows in a subquery. They return a boolean value (TRUE or FALSE) based on whether the subquery returns any rows.</p>\n    <h4 class=\"bold-maroon\">Input Data: Table - EMPLOYEES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>EMPLOYEE_NAME</th>\n                <th>DEPARTMENT_ID</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>John Cena</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>The Rock</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Stone Cold</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>Triple H</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Brock Lesnar</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>6</td>\n                <td>Kurt Angle</td>\n                <td>3</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>7</td>\n                <td>Undertaker</td>\n                <td>4</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>8</td>\n                <td>Hulk Hogan</td>\n                <td></td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Input Data: Table - DEPARTMENTS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>DEPARTMENT_ID</th>\n                <th>DEPARTMENT_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Sales</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Marketing</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>HR</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>IT</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">EXISTS</h4>\n    <p>Returns true if the subquery returns at least one row.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Using EXISTS clause to filter employees with valid departments.</span>\n<span class=\"SQLKeyword\">SELECT</span> employee_id<span class=\"SQLOperator\">,</span>\n       employee_name\n<span class=\"SQLKeyword\">FROM</span>   employees e\n<span class=\"SQLKeyword\">WHERE</span>  <span class=\"SQLFunction\">EXISTS</span> (<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLString\">1</span>\n            <span class=\"SQLKeyword\">FROM</span>   departments d\n            <span class=\"SQLKeyword\">WHERE</span>  e<span class=\"SQLOperator\">.</span>department_id <span class=\"SQLOperator\">=</span> d<span class=\"SQLOperator\">.</span>department_id)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>EMPLOYEE_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>John Cena</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>The Rock</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Stone Cold</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>Triple H</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Brock Lesnar</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>6</td>\n                <td>Kurt Angle</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>7</td>\n                <td>Undertaker</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">NOT EXISTS</h4>\n    <p>Returns true if the subquery returns no rows.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Using NOT EXISTS clause to find \n-- employees without valid departments.</span>\n<span class=\"SQLKeyword\">SELECT</span> employee_id<span class=\"SQLOperator\">,</span> employee_name\n<span class=\"SQLKeyword\">FROM</span> employees e\n<span class=\"SQLKeyword\">WHERE</span> <span class=\"SQLFunction\">NOT EXISTS</span> (\n   <span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLString\">1</span>\n   <span class=\"SQLKeyword\">FROM</span> departments d\n   <span class=\"SQLKeyword\">WHERE</span> e<span class=\"SQLOperator\">.</span>department_id <span class=\"SQLOperator\">=</span> d<span class=\"SQLOperator\">.</span>department_id\n)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>EMPLOYEE_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>8</td>\n                <td>Hulk Hogan</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 17,
    "Question": "Write a query to count records for each distinct value in a column.",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table EMPLOYEES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>EMPLOYEE_NAME</th>\n                <th>DEPARTMENT_NAME</th>\n                <th>SALARY</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>John Cena</td>\n                <td>Sales</td>\n                <td>50000</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>3</td>\n                <td>Stone Cold</td>\n                <td>Sales</td>\n                <td>60000</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>6</td>\n                <td>Stone Cold</td>\n                <td>Sales</td>\n                <td>70000</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>The Rock</td>\n                <td>Marketing</td>\n                <td>75000</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>4</td>\n                <td>Triple H</td>\n                <td>Marketing</td>\n                <td>80000</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>5</td>\n                <td>Triple H</td>\n                <td>Sales</td>\n                <td>90000</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Query to count distinct employees in each department.</span>\n<span class=\"SQLKeyword\">SELECT</span> department_name<span class=\"SQLOperator\">,</span>\n      <span class=\"SQLFunction\">COUNT</span>(<span class=\"SQLKeyword\">DISTINCT</span> employee_name) <span class=\"SQLKeyword\">AS</span> distinct_employee_count\n<span class=\"SQLKeyword\">FROM</span> employees\n<span class=\"SQLKeyword\">GROUP BY</span> department_name<span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Alternative query using subquery for distinct count.</span>\n<span class=\"SQLKeyword\">SELECT</span> department_name<span class=\"SQLOperator\">,</span>\n      <span class=\"SQLFunction\">COUNT</span>( <span class=\"SQLKeyword\">*</span> )\n<span class=\"SQLKeyword\">FROM</span> (\n      <span class=\"SQLKeyword\">SELECT DISTINCT</span> department_name<span class=\"SQLOperator\">,</span>\n                        employee_name\n         <span class=\"SQLKeyword\">FROM</span> employees\n      )\n      sub\n<span class=\"SQLKeyword\">GROUP BY</span> department_name<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>DEPARTMENT_NAME</th>\n                <th>COUNT(*)</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>Sales</td>\n                <td>3</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>Marketing</td>\n                <td>2</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li>\n            <strong>Purpose of the Queries:</strong>\n            <ul>\n                <li>Both queries aim to count the number of distinct employees in each department.</li>\n            </ul>\n        </li>\n    \n        <li>\n            <strong>Query 1: Counting Distinct Employees in Each Department</strong>\n            <ul>\n                <li>Groups the results by <code>department_name</code>.</li>\n                <li><code>COUNT(DISTINCT employee_name)</code> counts the number of unique employee names within each department, providing the count as <code>distinct_employee_count</code>.</li>\n            </ul>\n        </li>\n    \n        <li>\n            <strong>Query 2: Counting Distinct Employees Using a Subquery</strong>\n            <ul>\n                <li>The subquery selects distinct pairs of <code>department_name</code> and <code>employee_name</code> from the <code>employees</code> table.</li>\n                <li>The main query groups the results by <code>department_name</code> and counts the number of records in each group, which corresponds to the number of distinct employees in each department.</li>\n            </ul>\n        </li>\n    </ul>\n    \n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 18,
    "Question": "How do you enforce referential integrity with foreign key constraints?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>To enforce referential integrity with foreign key constraints in Oracle, define a foreign key in one table that references the primary key in another table.</p>\n    <h4 class=\"bold-maroon\">1. <code>Customers</code> table</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Creating Customers table with a primary key constraint.</span>\n<span class=\"SQLKeyword\">CREATE TABLE</span> Customers (\n   customer_id <span class=\"SQLKeyword\">NUMBER PRIMARY KEY</span><span class=\"SQLOperator\">,</span>\n   customer_name <span class=\"SQLKeyword\">VARCHAR2</span>(<span class=\"SQLString\">100</span>)<span class=\"SQLOperator\">,</span>\n   contact_number <span class=\"SQLKeyword\">VARCHAR2</span>(<span class=\"SQLString\">20</span>)<span class=\"SQLOperator\">,</span>\n   email <span class=\"SQLKeyword\">VARCHAR2</span>(<span class=\"SQLString\">100</span>)<span class=\"SQLOperator\">,</span>\n   address <span class=\"SQLKeyword\">VARCHAR2</span>(<span class=\"SQLString\">200</span>)\n)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p><strong>Primary Key Constraint</strong>: The <code>Customers</code> table has a primary key constraint on <code>customer_id</code>, ensuring each customer has a unique identifier.</p>\n    <h4 class=\"bold-maroon\">2. <code>Accounts</code> table</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Creating Accounts table with a foreign key constraint \n-- referencing Customers table.</span>\n<span class=\"SQLKeyword\">CREATE TABLE</span> Accounts (\n   account_id <span class=\"SQLKeyword\">NUMBER PRIMARY KEY</span><span class=\"SQLOperator\">,</span>\n   account_number <span class=\"SQLKeyword\">VARCHAR2</span>(<span class=\"SQLString\">20</span>) <span class=\"SQLKeyword\">UNIQUE</span><span class=\"SQLOperator\">,</span>\n   customer_id <span class=\"SQLKeyword\">NUMBER</span><span class=\"SQLOperator\">,</span>\n   account_type <span class=\"SQLKeyword\">VARCHAR2</span>(<span class=\"SQLString\">50</span>)<span class=\"SQLOperator\">,</span>\n   balance <span class=\"SQLKeyword\">NUMBER</span><span class=\"SQLOperator\">,</span>\n   opened_date <span class=\"SQLKeyword\">DATE</span><span class=\"SQLOperator\">,</span>\n   <span class=\"SQLKeyword\">FOREIGN KEY</span> (customer_id) <span class=\"SQLKeyword\">REFERENCES</span> Customers(customer_id)\n)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p><strong>Foreign Key Constraint</strong>: The <code>Accounts</code> table includes a <code>customer_id</code> column, which is a foreign key referencing the <code>customer_id</code> column in the <code>Customers</code> table. This ensures that each account is associated with a valid customer, thus enforcing referential integrity.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 19,
    "Question": "Write a query to calculate the running total for a column.",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - SALES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>SALE_ID</th>\n                <th>SALE_DATE</th>\n                <th>AMOUNT</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>01-01-2023 00:00</td>\n                <td>100</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>01-02-2023 00:00</td>\n                <td>200</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>01-03-2023 00:00</td>\n                <td>150</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>01-04-2023 00:00</td>\n                <td>250</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Query to calculate the running total for sales amounts.</span>\n<span class=\"SQLKeyword\">SELECT</span> sale_id<span class=\"SQLOperator\">,</span>\n      sale_date<span class=\"SQLOperator\">,</span>\n      amount<span class=\"SQLOperator\">,</span>\n      <span class=\"SQLFunction\">SUM</span>(amount) <span class=\"SQLKeyword\">OVER</span> (<span class=\"SQLKeyword\">ORDER BY</span> sale_date) <span class=\"SQLKeyword\">AS</span> running_total\n<span class=\"SQLKeyword\">FROM</span> Sales\n<span class=\"SQLKeyword\">ORDER BY</span> sale_date<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>SALE_ID</th>\n                <th>SALE_DATE</th>\n                <th>AMOUNT</th>\n                <th>RUNNING_TOTAL</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>01-01-2023 00:00</td>\n                <td>100</td>\n                <td>100</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>01-02-2023 00:00</td>\n                <td>200</td>\n                <td>300</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>01-03-2023 00:00</td>\n                <td>150</td>\n                <td>450</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>01-04-2023 00:00</td>\n                <td>250</td>\n                <td>700</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li>\n            <strong>Running Total Calculation:</strong>\n            <ul>\n                <li><code>SUM(amount) OVER (ORDER BY sale_date)</code>:\n                    <ul>\n                        <li>This calculates the cumulative sum of the <code>amount</code> column as the sales are ordered by <code>sale_date</code>.</li>\n                        <li>The running total represents the sum of all sales amounts up to and including each specific date.</li>\n                        <li>The result is labeled as <code>running_total</code>.</li>\n                    </ul>\n                </li>\n            </ul>\n        </li>\n    \n        <li>\n            <strong>Ordering:</strong>\n            <ul>\n                <li>The query orders the final result by <code>sale_date</code> to ensure the running total is presented in chronological order.</li>\n            </ul>\n        </li>\n    </ul>\n    \n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 20,
    "Question": "What is the difference between UNION and JOIN in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">UNION:</h4>\n    <ul>\n        <li><strong>Purpose</strong>: Combines result sets of two or more <code>SELECT</code> statements.</li>\n        <li><strong>Structure</strong>: Each <code>SELECT</code> must have the same number of columns and data types.</li>\n        <li><strong>Duplicates</strong>: Removes duplicates by default (use <code>UNION ALL</code> to include duplicates).</li>\n    </ul>\n    <p><strong>Example</strong>: Combining customer names from two tables:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of using UNION to combine customer names \n-- from two tables.</span>\n<span class=\"SQLKeyword\">SELECT</span> customer_name\n<span class=\"SQLKeyword\">FROM</span> Customers\n<span class=\"SQLKeyword\">UNION</span>\n<span class=\"SQLKeyword\">SELECT</span> customer_name\n<span class=\"SQLKeyword\">FROM</span> VIP_Customers<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">JOIN:</h4>\n    <ul>\n        <li><strong>Purpose</strong>: Combines rows from two or more tables based on a related column.</li>\n        <li><strong>Types</strong>: Includes <code>INNER JOIN</code>, <code>LEFT JOIN</code>, <code>RIGHT JOIN</code>, and <code>FULL JOIN</code>.</li>\n        <li><strong>Condition</strong>: Requires a matching condition.</li>\n    </ul>\n    <p><strong>Example</strong>: Combining customer details with their orders:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of using JOIN to combine customer details \n-- with their orders.</span>\n<span class=\"SQLKeyword\">SELECT</span> Customers<span class=\"SQLOperator\">.</span>customer_id<span class=\"SQLOperator\">,</span>\n       Customers<span class=\"SQLOperator\">.</span>customer_name<span class=\"SQLOperator\">,</span>\n       Orders<span class=\"SQLOperator\">.</span>order_id<span class=\"SQLOperator\">,</span>\n       Orders<span class=\"SQLOperator\">.</span>order_date\n<span class=\"SQLKeyword\">FROM</span>   Customers\n       <span class=\"SQLKeyword\">JOIN</span> Orders\n         <span class=\"SQLKeyword\">ON</span> Customers<span class=\"SQLOperator\">.</span>customer_id <span class=\"SQLOperator\">=</span> Orders<span class=\"SQLOperator\">.</span>customer_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Key Differences</h4>\n    <ul>\n        <li><strong>Combination</strong>: <code>UNION</code> combines vertically, <code>JOIN</code> combines horizontally.</li>\n        <li><strong>Usage</strong>: Use <code>UNION</code> for similar queries, <code>JOIN</code> for related data from multiple tables.</li>\n        <li><strong>Duplicates</strong>: <code>UNION</code> removes duplicates, <code>JOIN</code> retains all matched rows.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 21,
    "Question": "How do indexing operations affect INSERT, UPDATE, and DELETE actions?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Indexing affects <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code> actions by adding overhead:</p>\n    <ul>\n        <li><strong>INSERT</strong>: Slower due to updating all relevant indexes for each new row.</li>\n        <li><strong>UPDATE</strong>: Costly if indexed columns are modified, as indexes must be updated.</li>\n        <li><strong>DELETE</strong>: Slower as indexes need to be updated to remove references to deleted rows.</li>\n    </ul>\n    <p>In summary, while indexes speed up data retrieval, they slow down <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code> operations due to the extra work of maintaining the indexes.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 22,
    "Question": "Write a query to identify customers who have placed orders over five years ago.",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th,\n        .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode,\n            .tg {\n                font-size: 12px;\n            }\n            .tg th,\n            .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode,\n            .tg {\n                font-size: 11px;\n            }\n            .tg th,\n            .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - CUSTOMERS</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>CUSTOMER_ID</th>\n                    <th>CUSTOMER_NAME</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>1</td>\n                    <td>Justin Bieber</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>2</td>\n                    <td>Taylor Swift</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>3</td>\n                    <td>Michael Jackson</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>4</td>\n                    <td>Madonna</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <h4 class=\"bold-maroon\">Input Data: Table - ORDERS</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>ORDER_ID</th>\n                    <th>CUSTOMER_ID</th>\n                    <th>ORDER_DATE</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>101</td>\n                    <td>1</td>\n                    <td>2018-03-15</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>102</td>\n                    <td>2</td>\n                    <td>2016-07-23</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>103</td>\n                    <td>3</td>\n                    <td>2024-05-11</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>104</td>\n                    <td>4</td>\n                    <td>2020-11-02</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>106</td>\n                    <td>2</td>\n                    <td>2012-08-09</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <div class=\"scrollable-container\">\n        <pre class=\"SQLCode\"><span class=\"SQLComment\">-- Identifying customers with orders placed over five years ago.</span>\n<span class=\"SQLKeyword\">SELECT</span> Customers<span class=\"SQLOperator\">.</span>customer_id<span class=\"SQLOperator\">,</span>\n       Customers<span class=\"SQLOperator\">.</span>customer_name<span class=\"SQLOperator\">,</span>\n       order_date\n<span class=\"SQLKeyword\">FROM</span>   Customers\n       <span class=\"SQLKeyword\">JOIN</span> Orders\n         <span class=\"SQLKeyword\">ON</span> Customers<span class=\"SQLOperator\">.</span>customer_id <span class=\"SQLOperator\">=</span> Orders<span class=\"SQLOperator\">.</span>customer_id\n<span class=\"SQLKeyword\">WHERE</span>  Orders<span class=\"SQLOperator\">.</span>order_date <span class=\"SQLOperator\"><</span> <span class=\"SQLFunction\">ADD_MONTHS</span>(<span class=\"SQLFunction\">SYSDATE</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">-60</span>)<span class=\"SQLOperator\">;</span>\n</pre>\n    </div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>CUSTOMER_ID</th>\n                    <th>CUSTOMER_NAME</th>\n                    <th>ORDER_DATE</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-odd\">\n                    <td>2</td>\n                    <td>Taylor Swift</td>\n                    <td>2016-07-23</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>1</td>\n                    <td>Justin Bieber</td>\n                    <td>2014-02-01</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>2</td>\n                    <td>Taylor Swift</td>\n                    <td>2012-08-09</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li>\n            <strong>Select Clause:</strong>\n            <ul>\n                <li>Columns selected:\n                    <ul>\n                        <li><code>customer_id</code>: The unique identifier for each customer.</li>\n                        <li><code>customer_name</code>: The name of the customer.</li>\n                        <li><code>order_date</code>: The date when the order was placed.</li>\n                    </ul>\n                </li>\n            </ul>\n        </li>\n        <li>\n            <strong>Join Clause:</strong>\n            <ul>\n                <li>The <code>JOIN</code> is used to combine rows from the <code>Customers</code> and <code>Orders</code> tables based on the common column <code>customer_id</code>.</li>\n            </ul>\n        </li>\n        <li>\n            <strong>Where Clause:</strong>\n            <ul>\n                <li>The <code>WHERE</code> clause filters the results to include only those orders where the <code>order_date</code> is older than five years from the current date, using the <code>ADD_MONTHS</code> function with <code>SYSDATE</code> and <code>-60</code> as arguments.</li>\n            </ul>\n        </li>\n    </ul>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 23,
    "Question": "How can you use the CASE statement for conditional logic in a SQL query?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - SALES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>SALE_ID</th>\n                <th>SALE_DATE</th>\n                <th>AMOUNT</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>01-01-2023 00:00</td>\n                <td>100</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>01-02-2023 00:00</td>\n                <td>500</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>01-03-2023 00:00</td>\n                <td>1500</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>01-04-2023 00:00</td>\n                <td>250</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>01-04-2023 00:00</td>\n                <td></td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <p>In SQL, the CASE statement is a conditional expression that allows implementing if-then-else logic within SQL queries. It evaluates a list of conditions and returns one of multiple possible result expressions. The CASE statement can be used in both SELECT and UPDATE statements, as well as in other SQL clauses.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Using CASE statement for conditional logic in SQL query.</span>\n<span class=\"SQLKeyword\">SELECT</span> sale_id<span class=\"SQLOperator\">,</span> sale_date<span class=\"SQLOperator\">,</span> amount<span class=\"SQLOperator\">,</span>\n<span class=\"SQLKeyword\">CASE</span>\n   <span class=\"SQLKeyword\">WHEN</span> amount < <span class=\"SQLString\">500</span> <span class=\"SQLKeyword\">THEN</span> <span class=\"SQLString\">'Low'</span>\n   <span class=\"SQLKeyword\">WHEN</span> amount <span class=\"SQLKeyword\">BETWEEN</span> <span class=\"SQLString\">500</span> <span class=\"SQLKeyword\">AND</span> <span class=\"SQLString\">1000</span> <span class=\"SQLKeyword\">THEN</span> <span class=\"SQLString\">'Medium'</span>\n   <span class=\"SQLKeyword\">WHEN</span> amount <span class=\"SQLKeyword\">IS NULL</span> <span class=\"SQLKeyword\">THEN</span> <span class=\"SQLString\">'N/A'</span>\n   <span class=\"SQLKeyword\">ELSE</span> <span class=\"SQLString\">'High'</span>\n<span class=\"SQLKeyword\">END AS</span> amount_category\n<span class=\"SQLKeyword\">FROM</span> Sales<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>SALE_ID</th>\n                <th>SALE_DATE</th>\n                <th>AMOUNT</th>\n                <th>AMOUNT_CATEGORY</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>01-01-2023 00:00</td>\n                <td>100</td>\n                <td>Low</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>01-02-2023 00:00</td>\n                <td>500</td>\n                <td>Medium</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>01-03-2023 00:00</td>\n                <td>1500</td>\n                <td>High</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>01-04-2023 00:00</td>\n                <td>250</td>\n                <td>Low</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>01-04-2023 00:00</td>\n                <td></td>\n                <td>N/A</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 24,
    "Question": "What is the function of the FOR UPDATE clause in SELECT statements?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd{\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>The <code>FOR UPDATE</code> clause in Oracle SQL is used in a SELECT statement to lock the selected rows so that other transactions cannot modify or delete them until the current transaction is completed. This is particularly useful in situations where it is necessary to ensure that data read from a table remains consistent for the duration of a transaction.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Using FOR UPDATE clause to lock rows for update.</span>\n<span class=\"SQLKeyword\">SELECT</span> account_id<span class=\"SQLOperator\">,</span>\n       customer_name<span class=\"SQLOperator\">,</span>\n       balance\n<span class=\"SQLKeyword\">FROM</span>   Bank_Accounts\n<span class=\"SQLKeyword\">WHERE</span>  account_id <span class=\"SQLOperator\">=</span> <span class=\"SQLString\">1</span>\n<span class=\"SQLKeyword\">FOR UPDATE</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">UPDATE</span> Bank_Accounts\n<span class=\"SQLKeyword\">SET</span>    balance <span class=\"SQLOperator\">=</span> balance <span class=\"SQLOperator\">+</span> <span class=\"SQLString\">500</span>\n<span class=\"SQLKeyword\">WHERE</span>  account_id <span class=\"SQLOperator\">=</span> <span class=\"SQLString\">1</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">COMMIT</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ol>\n        <li><strong>SELECT ... FOR UPDATE</strong>: This query locks the row where <code>account_id = 1</code>, preventing other transactions from updating or deleting this row until the lock is released.</li>\n        <li><strong>UPDATE</strong>: Perform the update operation on the locked row.</li>\n        <li><strong>COMMIT</strong>: Complete the transaction, releasing the lock and making the row available for other transactions.</li>\n    </ol>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 25,
    "Question": "Write a query to pivot data from rows to columns using the PIVOT function.",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - ORDERS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORDER_ID</th>\n                <th>ORDER_DATE</th>\n                <th>ORDER_AMOUNT</th>\n                <th>PRODUCT_CATEGORY</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>01-01-2023 00:00</td>\n                <td>100</td>\n                <td>Electronics</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>01-01-2023 00:00</td>\n                <td>150</td>\n                <td>Clothing</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>01-02-2023 00:00</td>\n                <td>200</td>\n                <td>Electronics</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>01-02-2023 00:00</td>\n                <td>100</td>\n                <td>Clothing</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>01-03-2023 00:00</td>\n                <td>250</td>\n                <td>Electronics</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>6</td>\n                <td>01-03-2023 00:00</td>\n                <td>120</td>\n                <td>Clothing</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>7</td>\n                <td>01-04-2023 00:00</td>\n                <td>180</td>\n                <td>Home Kitchen</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>8</td>\n                <td>01-04-2023 00:00</td>\n                <td>220</td>\n                <td>Electronics</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Pivoting data from rows to columns using PIVOT function.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">*</span>\n<span class=\"SQLKeyword\">FROM</span> (\n    <span class=\"SQLKeyword\">SELECT</span> order_date<span class=\"SQLOperator\">,</span> order_amount<span class=\"SQLOperator\">,</span> product_category\n    <span class=\"SQLKeyword\">FROM</span> Orders\n)\n<span class=\"SQLFunction\">PIVOT</span> (\n    <span class=\"SQLFunction\">SUM</span>(order_amount) <span class=\"SQLKeyword\">FOR</span> product_category <span class=\"SQLKeyword\">IN</span> (\n        <span class=\"SQLString\">'Electronics'</span> <span class=\"SQLKeyword\">AS</span> Electronics<span class=\"SQLOperator\">,</span>\n        <span class=\"SQLString\">'Clothing'</span> <span class=\"SQLKeyword\">AS</span> Clothing<span class=\"SQLOperator\">,</span>\n        <span class=\"SQLString\">'Home Kitchen'</span> <span class=\"SQLKeyword\">AS</span> Home_Kitchen\n    )\n)\n<span class=\"SQLKeyword\">ORDER BY</span> order_date<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORDER_DATE</th>\n                <th>ELECTRONICS</th>\n                <th>CLOTHING</th>\n                <th>HOME_KITCHEN</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>01-01-2023 00:00</td>\n                <td>100</td>\n                <td>150</td>\n                <td></td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>01-02-2023 00:00</td>\n                <td>200</td>\n                <td>100</td>\n                <td></td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>01-03-2023 00:00</td>\n                <td>250</td>\n                <td>120</td>\n                <td></td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>01-04-2023 00:00</td>\n                <td>220</td>\n                <td></td>\n                <td>180</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n<ul>\n    <li>\n        <ul>\n            <li>This query transforms data from rows into columns using the PIVOT function, allowing for a more structured view of sales amounts by product category.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>PIVOT Operation:</strong>\n        <ul>\n            <li><code>PIVOT (SUM(order_amount) FOR product_category IN (...))</code>:\n                <ul>\n                    <li>This pivots the <code>order_amount</code> data so that each product category becomes a column.</li>\n                    <li>The <code>SUM(order_amount)</code> calculates the total sales amount for each product category.</li>\n                    <li>The product categories ('Electronics', 'Clothing', 'Home Kitchen') are specified in the <code>IN</code> clause, and each category is given an alias for the resulting columns.</li>\n                </ul>\n            </li>\n        </ul>\n    </li>\n    <li>\n        <strong>Inner Query:</strong>\n        <ul>\n            <li>The inner query selects <code>order_date</code>, <code>order_amount</code>, and <code>product_category</code> from the <code>Orders</code> table, providing the data set to be pivoted.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>Ordering:</strong>\n        <ul>\n            <li>The final result is ordered by <code>order_date</code> to maintain chronological order of the pivoted data.</li>\n        </ul>\n    </li>\n</ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 26,
    "Question": "Write a query to find duplicate records in a table based on specific columns.",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - TRANSACTIONS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>TRANSACTION_ID</th>\n                <th>TRANSACTION_DATE</th>\n                <th>CUSTOMER_NAME</th>\n                <th>TRANSACTION_TYPE</th>\n                <th>TRANSACTION_AMOUNT</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>01-01-2023 00:00</td>\n                <td>John Cena</td>\n                <td>Deposit</td>\n                <td>1000</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>01-03-2023 00:00</td>\n                <td>The Rock</td>\n                <td>Withdrawal</td>\n                <td>500</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>01-01-2023 00:00</td>\n                <td>John Cena</td>\n                <td>Deposit</td>\n                <td>1000</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>01-02-2023 00:00</td>\n                <td>John Cena</td>\n                <td>Deposit</td>\n                <td>2000</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>01-03-2023 00:00</td>\n                <td>Stone Cold</td>\n                <td>Deposit</td>\n                <td>2500</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>6</td>\n                <td>01-03-2023 00:00</td>\n                <td>The Rock</td>\n                <td>Withdrawal</td>\n                <td>500</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Query to find duplicate records using aggregated functions.</span>\n<span class=\"SQLKeyword\">SELECT</span> transaction_date<span class=\"SQLOperator\">,</span>\n      customer_name<span class=\"SQLOperator\">,</span>\n      transaction_type<span class=\"SQLOperator\">,</span>\n      transaction_amount<span class=\"SQLOperator\">,</span>\n      <span class=\"SQLFunction\">COUNT</span>(<span class=\"SQLKeyword\">*</span>) <span class=\"SQLKeyword\">AS</span> count\n<span class=\"SQLKeyword\">FROM</span> Transactions\n<span class=\"SQLKeyword\">GROUP BY</span> transaction_date<span class=\"SQLOperator\">,</span>\n         customer_name<span class=\"SQLOperator\">,</span>\n         transaction_type<span class=\"SQLOperator\">,</span>\n         transaction_amount\n<span class=\"SQLKeyword\">HAVING</span> <span class=\"SQLFunction\">COUNT</span>(<span class=\"SQLKeyword\">*</span>) > <span class=\"SQLString\">1</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Query to find duplicate records using analytical functions.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">*</span>\n<span class=\"SQLKeyword\">FROM</span> (\n   <span class=\"SQLKeyword\">SELECT</span> transaction_date<span class=\"SQLOperator\">,</span>\n            customer_name<span class=\"SQLOperator\">,</span>\n            transaction_type<span class=\"SQLOperator\">,</span>\n            transaction_amount<span class=\"SQLOperator\">,</span>\n            <span class=\"SQLFunction\">ROW_NUMBER</span>() <span class=\"SQLKeyword\">OVER</span> (<span class=\"SQLKeyword\">PARTITION BY</span> customer_name<span class=\"SQLOperator\">,</span>\n            transaction_type<span class=\"SQLOperator\">,</span>\n            transaction_date<span class=\"SQLOperator\">,</span>\n            transaction_amount <span class=\"SQLKeyword\">ORDER BY</span> customer_name<span class=\"SQLOperator\">,</span>\n            transaction_date) <span class=\"SQLKeyword\">AS</span> rn\n      <span class=\"SQLKeyword\">FROM</span> Transactions\n   )\n<span class=\"SQLKeyword\">WHERE</span> rn > <span class=\"SQLString\">1</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>TRANSACTION_DATE</th>\n                <th>CUSTOMER_NAME</th>\n                <th>TRANSACTION_TYPE</th>\n                <th>TRANSACTION_AMOUNT</th>\n                <th>COUNT(*)</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>01-01-2023 00:00</td>\n                <td>John Cena</td>\n                <td>Deposit</td>\n                <td>1000</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>01-03-2023 00:00</td>\n                <td>The Rock</td>\n                <td>Withdrawal</td>\n                <td>500</td>\n                <td>2</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 27,
    "Question": "What does the LISTAGG function do in Oracle SQL? Provide an example.",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - EMPLOYEES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>EMPLOYEE_NAME</th>\n                <th>DEPARTMENT_ID</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Hulk Hogan</td>\n                <td>10</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>The Rock</td>\n                <td>10</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Stone Cold</td>\n                <td>20</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>The Undertaker</td>\n                <td>20</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>John Cena</td>\n                <td>30</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>6</td>\n                <td>Triple H</td>\n                <td>30</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>7</td>\n                <td>Macho Man</td>\n                <td>10</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Using LISTAGG to concatenate employee names by department.</span>\n<span class=\"SQLKeyword\">SELECT</span> department_id<span class=\"SQLOperator\">,</span>\n       <span class=\"SQLFunction\">LISTAGG</span>(employee_name<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">', '</span>)\n         <span class=\"SQLKeyword\">WITHIN GROUP</span> (<span class=\"SQLKeyword\">ORDER BY</span> employee_name) <span class=\"SQLKeyword\">AS</span> employees\n<span class=\"SQLKeyword\">FROM</span>   employees\n<span class=\"SQLKeyword\">GROUP BY</span> department_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>DEPARTMENT_ID</th>\n                <th>EMPLOYEES</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>10</td>\n                <td>Hulk Hogan, Macho Man, The Rock</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>20</td>\n                <td>Stone Cold, The Undertaker</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>30</td>\n                <td>John Cena, Triple H</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n<ul>\n    <li>\n        <ul>\n            <li>This query concatenates the names of employees within each department into a single string, separated by commas.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>LISTAGG Function:</strong>\n        <ul>\n            <li><code>LISTAGG(employee_name, ', ') WITHIN GROUP (ORDER BY employee_name)</code>:\n                <ul>\n                    <li>This function concatenates the <code>employee_name</code> values for each department, separated by a comma and a space.</li>\n                    <li>The <code>WITHIN GROUP (ORDER BY employee_name)</code> clause ensures that the names are ordered alphabetically within each department before they are concatenated.</li>\n                    <li>The resulting concatenated string is labeled as <code>employees</code>.</li>\n                </ul>\n            </li>\n        </ul>\n    </li>\n    <li>\n        <strong>Grouping:</strong>\n        <ul>\n            <li>The query groups the results by <code>department_id</code>, so that the <code>LISTAGG</code> function is applied within each department.</li>\n        </ul>\n    </li>\n</ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 28,
    "Question": "Write a query to find the average salary while excluding the highest and lowest salaries.",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - EMPLOYEES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>SALARY</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>55000</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>60000</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>70000</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>80000</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>90000</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>7</td>\n                <td>110000</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Average Salary on employees table.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">AVG</span>(salary) <span class=\"SQLKeyword\">AS</span> average_salary\n<span class=\"SQLKeyword\">FROM</span>   employees<span class=\"SQLOperator\">;</span> <span class=\"SQLComment\">--OUTPUT 77500</span>\n<span class=\"SQLComment\">-- SQL Query 1: Calculation of Average Salary Using \n-- Aggregate Function.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">AVG</span>(salary) <span class=\"SQLKeyword\">AS</span> average_salary\n<span class=\"SQLKeyword\">FROM</span>   (<span class=\"SQLKeyword\">SELECT</span> salary\n        <span class=\"SQLKeyword\">FROM</span>   employees\n        <span class=\"SQLKeyword\">WHERE</span>  salary <span class=\"SQLKeyword\">NOT IN</span> (<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">MAX</span>(salary)\n                              <span class=\"SQLKeyword\">FROM</span>   employees)\n               <span class=\"SQLKeyword\">AND</span> salary <span class=\"SQLKeyword\">NOT IN</span> (<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">MIN</span>(salary)\n                                  <span class=\"SQLKeyword\">FROM</span>   employees))<span class=\"SQLOperator\">;</span> <span class=\"SQLComment\">\n--OUTPUT 75000</span>\n<span class=\"SQLComment\">-- SQL Query 2: Calculation of Average Salary Using \n-- Window Function.</span>\n<span class=\"SQLKeyword\">WITH</span> ranked_salaries\n     <span class=\"SQLKeyword\">AS</span> (<span class=\"SQLKeyword\">SELECT</span> salary<span class=\"SQLOperator\">,</span>\n                <span class=\"SQLFunction\">ROW_NUMBER</span>()\n                  <span class=\"SQLKeyword\">OVER</span> (\n                    <span class=\"SQLKeyword\">ORDER BY</span> salary <span class=\"SQLKeyword\">ASC</span>)  <span class=\"SQLKeyword\">AS</span> rank_asc<span class=\"SQLOperator\">,</span>\n                <span class=\"SQLFunction\">ROW_NUMBER</span>()\n                  <span class=\"SQLKeyword\">OVER</span> (\n                    <span class=\"SQLKeyword\">ORDER BY</span> salary <span class=\"SQLKeyword\">DESC</span>) <span class=\"SQLKeyword\">AS</span> rank_desc\n         <span class=\"SQLKeyword\">FROM</span>   employees)\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">AVG</span>(salary) <span class=\"SQLKeyword\">AS</span> average_salary\n<span class=\"SQLKeyword\">FROM</span>   ranked_salaries\n<span class=\"SQLKeyword\">WHERE</span>  rank_asc > <span class=\"SQLString\">1</span>\n       <span class=\"SQLKeyword\">AND</span> rank_desc > <span class=\"SQLString\">1</span><span class=\"SQLOperator\">;</span> <span class=\"SQLComment\">\n--OUTPUT 75000</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Explanation:</h4>\n<ul>\n    <li>\n        <strong>Query 1: Calculation of Average Salary Using Aggregate Function</strong>\n        <ul>\n            <li>The query calculates the average salary after excluding the maximum and minimum salaries from the <code>employees</code> table.</li>\n            <li>The subquery in the <code>WHERE</code> clause filters out the rows with the highest and lowest salaries.</li>\n            <li>The <code>AVG(salary)</code> function then computes the average of the remaining salaries.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>Query 2: Calculation of Average Salary Using Window Function</strong>\n        <ul>\n            <li>A Common Table Expression (CTE) named <code>ranked_salaries</code> is used to assign row numbers to each salary, both in ascending and descending order.</li>\n            <li><code>ROW_NUMBER()</code> is used to generate the <code>rank_asc</code> (ascending order) and <code>rank_desc</code> (descending order) for each salary.</li>\n            <li>The main query then calculates the average salary by excluding the first and last rows (which correspond to the highest and lowest salaries) using the <code>rank_asc > 1</code> and <code>rank_desc > 1</code> conditions.</li>\n        </ul>\n    </li>\n</ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 29,
    "Question": "Write a query to find employees whose salary is above the average.",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Finding employees whose salary is above the average.</span>\n<span class=\"SQLKeyword\">SELECT</span> employee_id<span class=\"SQLOperator\">,</span>\n       employee_name<span class=\"SQLOperator\">,</span>\n       salary\n<span class=\"SQLKeyword\">FROM</span>   employees\n<span class=\"SQLKeyword\">WHERE</span>  salary <span class=\"SQLOperator\">></span> (<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">AVG</span>(salary)\n                 <span class=\"SQLKeyword\">FROM</span>   employees)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Explanation:</h4>\n<ul>\n    <li>\n        <strong>Subquery for Average Salary:</strong>\n        <ul>\n            <li>The subquery calculates the average salary across all employees in the <code>employees</code> table using the <code>AVG(salary)</code> function.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>Main Query:</strong>\n        <ul>\n            <li>Filters the <code>employees</code> table to find employees whose salary is greater than the average salary calculated by the subquery.</li>\n            <li>Retrieves the <code>employee_id</code>, <code>employee_name</code>, and <code>salary</code> for those employees.</li>\n        </ul>\n    </li>\n</ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 30,
    "Question": "What is partitioning in Oracle databases, and what are its benefits? How many types of partitions are there in Oracle databases?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    \n    <p>Partitioning in Oracle databases is a technique used to divide large tables into smaller, more manageable pieces called partitions. Each partition acts as an independent object, improving performance, manageability, and availability.</p>\n    <h4 class=\"bold-blue\">Benefits of Partitioning</h4>\n    <ul>\n        <li><strong>Performance:</strong> Speeds up queries by accessing only relevant partitions.</li>\n        <li><strong>Manageability:</strong> Simplifies maintenance operations.</li>\n        <li><strong>Availability:</strong> Ensures other partitions remain available if one is offline.</li>\n        <li><strong>Parallelism:</strong> Enhances parallel processing.</li>\n        <li><strong>Efficient Backup/Recovery:</strong> Allows individual partition backup and recovery.</li>\n        <li><strong>Data Lifecycle Management:</strong> Manages data with different lifecycle requirements.</li>\n    </ul>\n    <h4 class=\"bold-blue\">Types of Partitions in Oracle Databases</h4>\n    <p>Oracle supports several types of partitioning, including:</p>\n    <h4 class=\"bold-blue\">1. Range Partitioning</h4>\n    <p><strong>Scenario:</strong> An eCommerce platform handles a large volume of orders daily and needs to manage historical data efficiently. Analytics queries often focus on specific time periods, such as monthly or quarterly reports. By partitioning orders by date, performance for these queries can be significantly improved.</p>\n    <p><strong>Example Use:</strong> Partitioning orders by order date.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Creating orders table with range partitioning by order date.</span>\n<span class=\"SQLKeyword\">CREATE TABLE</span> orders (\n    order_id    <span class=\"SQLKeyword\">NUMBER</span><span class=\"SQLOperator\">,</span>\n    customer_id <span class=\"SQLKeyword\">NUMBER</span><span class=\"SQLOperator\">,</span>\n    order_date  <span class=\"SQLKeyword\">DATE</span><span class=\"SQLOperator\">,</span>\n    amount      <span class=\"SQLKeyword\">NUMBER</span>)\n    <span class=\"SQLKeyword\">PARTITION BY RANGE</span> (\n        order_date\n    )\n    (<span class=\"SQLKeyword\">PARTITION</span> p2022\n        <span class=\"SQLKeyword\">VALUES LESS THAN</span> ( <span class=\"SQLFunction\">TO_DATE</span>(<span class=\"SQLString\">'2023-01-01'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span>) )<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLKeyword\">PARTITION</span> p2023\n        <span class=\"SQLKeyword\">VALUES LESS THAN</span> ( <span class=\"SQLFunction\">TO_DATE</span>(<span class=\"SQLString\">'2024-01-01'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span>) )<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLKeyword\">PARTITION</span> p2024\n        <span class=\"SQLKeyword\">VALUES LESS THAN</span> ( <span class=\"SQLFunction\">TO_DATE</span>(<span class=\"SQLString\">'2025-01-01'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span>) )<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLKeyword\">PARTITION</span> pmax\n        <span class=\"SQLKeyword\">VALUES LESS THAN</span> ( <span class=\"SQLKeyword\">MAXVALUE</span> )\n    )<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p><strong>Benefit:</strong> This partitioning allows the database to prune irrelevant partitions when querying specific date ranges, reducing the amount of data scanned and improving query performance.</p>\n    <h4 class=\"bold-blue\">2. List Partitioning</h4>\n    <p><strong>Scenario:</strong> The eCommerce site has a diverse product catalog, and inventory management needs vary by product category. Some categories might require more frequent updates or specific storage strategies. Partitioning by product category simplifies these operations.</p>\n    <p><strong>Example Use:</strong> Partitioning products by product category.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Creating products table with list partitioning by category.</span>\n<span class=\"SQLKeyword\">CREATE TABLE</span> products (\n    product_id   <span class=\"SQLKeyword\">NUMBER</span><span class=\"SQLOperator\">,</span>\n    name         <span class=\"SQLKeyword\">VARCHAR2</span>(<span class=\"SQLString\">100</span>)<span class=\"SQLOperator\">,</span>\n    category     <span class=\"SQLKeyword\">VARCHAR2</span>(<span class=\"SQLString\">50</span>)<span class=\"SQLOperator\">,</span>\n    price        <span class=\"SQLKeyword\">NUMBER</span>\n)\n<span class=\"SQLKeyword\">PARTITION BY LIST</span> (category) (\n    <span class=\"SQLKeyword\">PARTITION</span> electronics <span class=\"SQLKeyword\">VALUES</span> (<span class=\"SQLString\">'Electronics'</span>)<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLKeyword\">PARTITION</span> clothing <span class=\"SQLKeyword\">VALUES</span> (<span class=\"SQLString\">'Clothing'</span>)<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLKeyword\">PARTITION</span> home_goods <span class=\"SQLKeyword\">\nVALUES</span> (<span class=\"SQLString\">'Home Goods'</span>)\n)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p><strong>Benefit:</strong> Maintenance operations such as bulk updates, data loads, or purges can be performed on individual partitions without affecting others, improving efficiency and reducing downtime.</p>\n    <h4 class=\"bold-blue\">3. Hash Partitioning</h4>\n    <p><strong>Scenario:</strong> The eCommerce platform needs to distribute customer data evenly across multiple partitions to balance the load and prevent hotspots. This ensures that no single partition becomes a performance bottleneck.</p>\n    <p><strong>Example Use:</strong> Partitioning customers by customer ID.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Creating customers table with hash partitioning by customer ID.</span>\n<span class=\"SQLKeyword\">CREATE TABLE</span> customers (\n    customer_id   <span class=\"SQLKeyword\">NUMBER</span><span class=\"SQLOperator\">,</span>\n    name          <span class=\"SQLKeyword\">VARCHAR2</span>(<span class=\"SQLString\">100</span>)<span class=\"SQLOperator\">,</span>\n    email         <span class=\"SQLKeyword\">VARCHAR2</span>(<span class=\"SQLString\">100</span>)\n)\n<span class=\"SQLKeyword\">PARTITION BY HASH</span> (customer_id) <span class=\"SQLKeyword\">PARTITIONS</span> <span class=\"SQLString\">5</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p><strong>Benefit:</strong> Hash partitioning evenly distributes data based on a hash function, ensuring balanced performance across all partitions. This is especially useful for tables with a high volume of transactions and queries.</p>\n    <h4 class=\"bold-blue\">4. Composite Partitioning</h4>\n    <p><strong>Scenario:</strong> Sales data analysis needs to be both time-based and region-specific. A composite partitioning strategy combining range and list partitioning allows for efficient queries by date and region.</p>\n    <p><strong>Example Use:</strong> Range partitioning by sale date and sub partitioning by region.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Creating sales table with composite partitioning by \n-- sale date and region.</span>\n<span class=\"SQLKeyword\">CREATE TABLE</span> sales (\n    sale_id     <span class=\"SQLKeyword\">NUMBER</span><span class=\"SQLOperator\">,</span>\n    product_id  <span class=\"SQLKeyword\">NUMBER</span><span class=\"SQLOperator\">,</span>\n    sale_date   <span class=\"SQLKeyword\">DATE</span><span class=\"SQLOperator\">,</span>\n    region      <span class=\"SQLKeyword\">VARCHAR2</span>(<span class=\"SQLString\">50</span>)<span class=\"SQLOperator\">,</span>\n    amount      <span class=\"SQLKeyword\">NUMBER</span>\n)\n<span class=\"SQLKeyword\">PARTITION BY RANGE</span> (sale_date)\n<span class=\"SQLKeyword\">SUBPARTITION BY LIST</span> (region) (\n    <span class=\"SQLKeyword\">PARTITION</span> q1_2023 <span class=\"SQLKeyword\">VALUES LESS THAN</span> \n    (<span class=\"SQLFunction\">TO_DATE</span>(<span class=\"SQLString\">'2023-04-01'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span>)) (\n        <span class=\"SQLKeyword\">SUBPARTITION</span> east <span class=\"SQLKeyword\">VALUES</span> (<span class=\"SQLString\">'East'</span>)<span class=\"SQLOperator\">,</span>\n        <span class=\"SQLKeyword\">SUBPARTITION</span> west <span class=\"SQLKeyword\">VALUES</span> (<span class=\"SQLString\">'West'</span>)\n    )<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLKeyword\">PARTITION</span> q2_2023 <span class=\"SQLKeyword\">VALUES LESS THAN</span> \n    (<span class=\"SQLFunction\">TO_DATE</span>(<span class=\"SQLString\">'2023-07-01'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span>)) (\n        <span class=\"SQLKeyword\">SUBPARTITION</span> east <span class=\"SQLKeyword\">VALUES</span> (<span class=\"SQLString\">'East'</span>)<span class=\"SQLOperator\">,</span>\n        <span class=\"SQLKeyword\">SUBPARTITION</span> west <span class=\"SQLKeyword\">VALUES</span> (<span class=\"SQLString\">'West'</span>)\n    )\n)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p><strong>Benefit:</strong> This combination allows for efficient querying and maintenance on both temporal and regional dimensions, enhancing performance for complex analytical queries.</p>\n    <h4 class=\"bold-blue\">5. Interval Partitioning</h4>\n    <p><strong>Scenario:</strong> An eCommerce company generates a high volume of invoices and wants to avoid manually managing partitions. Interval partitioning allows the database to automatically create new partitions as data arrives.</p>\n    <p><strong>Example Use:</strong> Partitioning invoices by invoice date.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Creating invoices table with interval partitioning \n-- by invoice date.</span>\n<span class=\"SQLKeyword\">CREATE TABLE</span> invoices (\n    invoice_id   <span class=\"SQLKeyword\">NUMBER</span><span class=\"SQLOperator\">,</span>\n    invoice_date <span class=\"SQLKeyword\">DATE</span><span class=\"SQLOperator\">,</span>\n    amount       <span class=\"SQLKeyword\">NUMBER</span>\n)\n    <span class=\"SQLKeyword\">PARTITION BY RANGE</span> (\n        invoice_date\n    ) <span class=\"SQLKeyword\">INTERVAL</span> ( <span class=\"SQLFunction\">numtominterval</span>(<span class=\"SQLString\">1</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'MONTH'</span>) ) (<span class=\"SQLKeyword\">PARTITION</span> p0\n        <span class=\"SQLKeyword\">VALUES LESS THAN</span> ( <span class=\"SQLFunction\">TO_DATE</span>(<span class=\"SQLString\">'2023-01-01'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span>) )\n    )<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p><strong>Benefit:</strong> This method automates the creation of partitions for each month, reducing administrative overhead and ensuring the table is always partitioned optimally as new data is inserted.</p>\n    <h4 class=\"bold-blue\">6. Reference Partitioning</h4>\n    <p><strong>Scenario:</strong> The eCommerce platform needs to maintain a strict parent-child relationship between orders and order items. Ensuring that order items are partitioned in the same way as orders simplifies management and improves query performance.</p>\n    <p><strong>Example Use:</strong> Partitioning order items by their corresponding orders.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Creating orders table with range partitioning by order date.</span>\n<span class=\"SQLKeyword\">CREATE TABLE</span> orders (\n    order_id   <span class=\"SQLKeyword\">NUMBER PRIMARY KEY</span><span class=\"SQLOperator\">,</span>\n    order_date <span class=\"SQLKeyword\">DATE</span>\n)\n    <span class=\"SQLKeyword\">PARTITION BY RANGE</span> (\n        order_date\n    )\n    (<span class=\"SQLKeyword\">PARTITION</span> p2023\n        <span class=\"SQLKeyword\">VALUES LESS THAN</span> ( <span class=\"SQLFunction\">TO_DATE</span>(<span class=\"SQLString\">'2024-01-01'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span>) )<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLKeyword\">PARTITION</span> p2024\n        <span class=\"SQLKeyword\">VALUES LESS THAN</span> ( <span class=\"SQLFunction\">TO_DATE</span>(<span class=\"SQLString\">'2025-01-01'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span>) )\n    )<span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Creating order items table with reference partitioning by order.</span>\n<span class=\"SQLKeyword\">CREATE TABLE</span> order_items (\n    item_id    <span class=\"SQLKeyword\">NUMBER</span><span class=\"SQLOperator\">,</span>\n    order_id   <span class=\"SQLKeyword\">NUMBER</span><span class=\"SQLOperator\">,</span>\n    product_id <span class=\"SQLKeyword\">NUMBER</span><span class=\"SQLOperator\">,</span>\n    quantity   <span class=\"SQLKeyword\">NUMBER</span><span class=\"SQLOperator\">,</span>\n    <span class=\"SQLKeyword\">CONSTRAINT</span> fk_order\n <span class=\"SQLKeyword\">FOREIGN KEY</span> ( order_id )\n        <span class=\"SQLKeyword\">REFERENCES</span> orders ( order_id )\n)\n    <span class=\"SQLKeyword\">PARTITION BY REFERENCE</span> ( fk_order )<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p><strong>Benefit:</strong> By inheriting the partitioning strategy of the parent table, queries joining orders and order items are optimized, and maintenance operations on the order table automatically cascade to the order items table.</p>\n    <h4 class=\"bold-blue\">7. System Partitioning</h4>\n    <p><strong>Scenario:</strong> The eCommerce company has inventory distributed across multiple warehouses and needs fine-grained control over the placement of inventory data. System partitioning allows explicit assignment of rows to partitions.</p>\n    <p><strong>Example Use:</strong> Partitioning inventory by warehouse.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Creating inventory table with system partitioning by warehouse.</span>\n<span class=\"SQLKeyword\">CREATE TABLE</span> inventory (\n    product_id   <span class=\"SQLKeyword\">NUMBER</span><span class=\"SQLOperator\">,</span>\n    warehouse_id <span class=\"SQLKeyword\">NUMBER</span><span class=\"SQLOperator\">,</span>\n    quantity     <span class=\"SQLKeyword\">NUMBER</span>\n)\n<span class=\"SQLKeyword\">PARTITION BY SYSTEM</span> (\n    <span class=\"SQLKeyword\">PARTITION</span> p1<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLKeyword\">PARTITION</span> p2<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLKeyword\">PARTITION</span> p3\n)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p><strong>Benefit:</strong> This approach allows for manual control over data distribution, which can be essential for specialized storage configurations or performance tuning based on warehouse-specific requirements.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 31,
    "Question": "Write a query to identify the highest-paid employees in each department.",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 12px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode {\n                font-size: 11px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- SQL Query 1 by using Aggregated functions</span>\n<span class=\"SQLKeyword\">SELECT</span> department_id<span class=\"SQLOperator\">,</span>\n       employee_id<span class=\"SQLOperator\">,</span>\n       salary\n<span class=\"SQLKeyword\">FROM</span>   (<span class=\"SQLKeyword\">SELECT</span> department_id<span class=\"SQLOperator\">,</span>\n               employee_id<span class=\"SQLOperator\">,</span>\n               salary<span class=\"SQLOperator\">,</span>\n               <span class=\"SQLFunction\">Rank</span>()\n                 <span class=\"SQLKeyword\">over</span> (\n                   <span class=\"SQLKeyword\">PARTITION BY</span> department_id\n                   <span class=\"SQLKeyword\">ORDER BY</span> salary <span class=\"SQLKeyword\">DESC</span>) <span class=\"SQLKeyword\">AS</span> rank\n        <span class=\"SQLKeyword\">FROM</span>   employees)\n<span class=\"SQLKeyword\">WHERE</span>  rank <span class=\"SQLOperator\">=</span> <span class=\"SQLString\">1</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Explanation:</h4>\n<ul>\n    <li>\n        <strong>SQL Query 1: Using Aggregated Functions with Window Functions</strong>\n        <ul>\n            <li>The query assigns a rank to each employee within their department based on their salary, with the highest salary receiving rank 1.</li>\n            <li>Filters the results to select only those employees with a rank of 1, meaning they have the highest salary in their department.</li>\n        </ul>\n    </li>\n</ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- SQL Query 2 by using a Common Table Expression (CTE)</span>\n<span class=\"SQLKeyword\">WITH</span> departmenthighestsalary\n     <span class=\"SQLKeyword\">AS</span> (<span class=\"SQLKeyword\">SELECT</span> department_id<span class=\"SQLOperator\">,</span>\n                <span class=\"SQLFunction\">Max</span>(salary) <span class=\"SQLKeyword\">AS</span> MaxSalary\n         <span class=\"SQLKeyword\">FROM</span>   employees\n         <span class=\"SQLKeyword\">GROUP BY</span>  department_id)\n<span class=\"SQLKeyword\">SELECT</span> e<span class=\"SQLOperator\">.</span>department_id<span class=\"SQLOperator\">,</span>\n       e<span class=\"SQLOperator\">.</span>employee_id<span class=\"SQLOperator\">,</span>\n       e<span class=\"SQLOperator\">.</span>employee_name<span class=\"SQLOperator\">,</span>\n       e<span class=\"SQLOperator\">.</span>salary\n<span class=\"SQLKeyword\">FROM</span>   employees e\n       <span class=\"SQLKeyword\">join</span> departmenthighestsalary dhs\n         <span class=\"SQLKeyword\">ON</span> e<span class=\"SQLOperator\">.</span>department_id <span class=\"SQLOperator\">=</span> dhs<span class=\"SQLOperator\">.</span>department_id\n            <span class=\"SQLKeyword\">AND</span> e<span class=\"SQLOperator\">.</span>salary <span class=\"SQLOperator\">=</span> dhs<span class=\"SQLOperator\">.</span>maxsalary<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Explanation:</h4>\n<ul>\n<li>\n    <strong>SQL Query 2: Using a Common Table Expression (CTE)</strong>\n    <ul>\n        <li>A CTE named <code>departmenthighestsalary</code> is created to find the maximum salary for each department.</li>\n        <li>The main query joins the <code>employees</code> table with the CTE on the department ID and the maximum salary to retrieve employees with the highest salary in their respective departments.</li>\n    </ul>\n</li>\n</ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- SQL Query 3 by using a Subquery</span>\n<span class=\"SQLKeyword\">SELECT</span> e<span class=\"SQLOperator\">.</span>department_id<span class=\"SQLOperator\">,</span>\n       e<span class=\"SQLOperator\">.</span>employee_id<span class=\"SQLOperator\">,</span>\n       e<span class=\"SQLOperator\">.</span>employee_name<span class=\"SQLOperator\">,</span>\n       e<span class=\"SQLOperator\">.</span>salary\n<span class=\"SQLKeyword\">FROM</span>   employees e\n       <span class=\"SQLKeyword\">inner join</span> (<span class=\"SQLKeyword\">SELECT</span> department_id<span class=\"SQLOperator\">,</span>\n                        <span class=\"SQLFunction\">Max</span>(salary) <span class=\"SQLKeyword\">AS</span> MaxSalary\n                  <span class=\"SQLKeyword\">FROM</span>   employees\n                  <span class=\"SQLKeyword\">GROUP BY</span>  department_id) dhs\n            <span class=\"SQLKeyword\">ON</span> e<span class=\"SQLOperator\">.</span>department_id <span class=\"SQLOperator\">=</span> dhs<span class=\"SQLOperator\">.</span>department_id\n               <span class=\"SQLKeyword\">AND</span> e<span class=\"SQLOperator\">.</span>salary <span class=\"SQLOperator\">=</span> dhs<span class=\"SQLOperator\">.</span>maxsalary<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Explanation:</h4>\n<ul>\n    <li>\n        <strong>SQL Query 3: Using a Subquery</strong>\n        <ul>\n            <li>The query uses a subquery to calculate the maximum salary for each department, similar to the CTE in Query 2.</li>\n            <li>The main query then joins the <code>employees</code> table with this subquery on the department ID and the maximum salary to identify employees with the highest salary in their department.</li>\n        </ul>\n    </li>\n</ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 32,
    "Question": "What strategies can improve the performance of a query with multiple subqueries?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 12px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode {\n                font-size: 11px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Strategies to improve the performance of a query with multiple subqueries:</h4>\n    <ol>\n        <li><strong>Optimize Individual Subqueries:</strong> Ensure each subquery is efficient and has appropriate indexes on the tables referenced by the subqueries.</li>\n        <li><strong>Use Indexes:</strong> Index columns used in joins, filters, and sorts. Consider composite indexes for frequently used column combinations.</li>\n        <li><strong>Avoid Correlated Subqueries:</strong> Rewrite them as joins when possible to avoid execution for each row of the outer query.</li>\n        <li><strong>Leverage WITH Clause:</strong> Use the WITH clause (CTEs) to simplify and potentially improve performance by materializing subqueries.</li>\n        <li><strong>Use EXISTS Instead of IN:</strong> EXISTS can be more efficient than IN for large subquery results.</li>\n        <li><strong>Materialized Views:</strong> Use materialized views for frequently accessed subquery results to save processing time.</li>\n        <li><strong>Query Rewriting:</strong> Simplify or combine subqueries, or use different query structures for better performance.</li>\n        <li><strong>Partitioning:</strong> Improve performance by partitioning large datasets.</li>\n        <li><strong>Statistics:</strong> Ensure up-to-date optimizer statistics using <code>DBMS_STATS</code>.</li>\n    </ol>\n    <h4 class=\"bold-blue\">&bull; Example of Subquery Optimization:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Original Query:</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">*</span>\n<span class=\"SQLKeyword\">FROM</span>   employees e\n<span class=\"SQLKeyword\">WHERE</span>  e<span class=\"SQLOperator\">.</span>salary <span class=\"SQLOperator\">></span> (<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">Avg</span>(salary)\n                   <span class=\"SQLKeyword\">FROM</span>   employees\n               <span class=\"SQLKeyword\">WHERE</span>  department_id <span class=\"SQLOperator\">=</span> e<span class=\"SQLOperator\">.</span>department_id)\n   <span class=\"SQLKeyword\">AND</span> e<span class=\"SQLOperator\">.</span>employee_id <span class=\"SQLKeyword\">IN</span> (<span class=\"SQLKeyword\">SELECT</span> employee_id\n                        <span class=\"SQLKeyword\">FROM</span>   employee_projects\n                        <span class=\"SQLKeyword\">WHERE</span>  project_id <span class=\"SQLOperator\">=</span> <span class=\"SQLString\">101</span>)<span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Optimized Query:</span>\n<span class=\"SQLKeyword\">WITH</span> dept_avg_salary\n     <span class=\"SQLKeyword\">AS</span> (<span class=\"SQLKeyword\">SELECT</span> department_id<span class=\"SQLOperator\">,</span>\n                <span class=\"SQLFunction\">Avg</span>(salary) <span class=\"SQLKeyword\">AS</span> avg_salary\n         <span class=\"SQLKeyword\">FROM</span>   employees\n         <span class=\"SQLKeyword\">GROUP BY</span>  department_id)<span class=\"SQLOperator\">,</span>\n     project_employees\n     <span class=\"SQLKeyword\">AS</span> (<span class=\"SQLKeyword\">SELECT</span> employee_id\n         <span class=\"SQLKeyword\">FROM</span>   employee_projects\n         <span class=\"SQLKeyword\">WHERE</span>  project_id <span class=\"SQLOperator\">=</span> <span class=\"SQLString\">101</span>)\n<span class=\"SQLKeyword\">SELECT</span> e<span class=\"SQLOperator\">.</span><span class=\"SQLKeyword\">*</span>\n<span class=\"SQLKeyword\">FROM</span>   employees e\n       <span class=\"SQLKeyword\">join</span> dept_avg_salary das\n         <span class=\"SQLKeyword\">ON</span> e<span class=\"SQLOperator\">.</span>department_id <span class=\"SQLOperator\">=</span> das<span class=\"SQLOperator\">.</span>department_id\n       <span class=\"SQLKeyword\">join</span> project_employees pe\n         <span class=\"SQLKeyword\">ON</span> e<span class=\"SQLOperator\">.</span>employee_id <span class=\"SQLOperator\">=</span> pe<span class=\"SQLOperator\">.</span>employee_id\n<span class=\"SQLKeyword\">WHERE</span>  e<span class=\"SQLOperator\">.</span>salary <span class=\"SQLOperator\">></span> das<span class=\"SQLOperator\">.</span>avg_salary<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Explanation:</h4>\n<ul>\n    <li>\n        <strong>Original Query:</strong>\n        <ul>\n            <li>The query retrieves employees whose salary is higher than the average salary in their department and who are assigned to project 101.</li>\n            <li>Two subqueries are used:\n                <ul>\n                    <li>One subquery calculates the average salary for each department and compares it to the employee's salary.</li>\n                    <li>The other subquery checks if the employee is associated with project 101.</li>\n                </ul>\n            </li>\n        </ul>\n    </li>\n    <li>\n        <strong>Optimized Query:</strong>\n        <ul>\n            <li>Uses Common Table Expressions (CTEs) to optimize the query by precomputing the necessary data:\n                <ul>\n                    <li><code>dept_avg_salary</code> CTE calculates the average salary for each department in a single pass.</li>\n                    <li><code>project_employees</code> CTE identifies all employees associated with project 101.</li>\n                </ul>\n            </li>\n            <li>The main query joins the <code>employees</code> table with these CTEs:\n                <ul>\n                    <li>Joins with <code>dept_avg_salary</code> to compare each employee's salary with the department's average salary.</li>\n                    <li>Joins with <code>project_employees</code> to filter employees who are part of project 101.</li>\n                </ul>\n            </li>\n            <li>This approach reduces the number of subquery executions, making the query more efficient.</li>\n        </ul>\n    </li>\n</ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 33,
    "Question": "What are the advantages and disadvantages of using materialized views compared to regular views?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 12px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode {\n                font-size: 11px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">&bull; Advantages of Materialized Views:</h4>\n    <ul>\n        <li><strong>Performance Improvement:</strong> Materialized views store the result set of a query physically, which can significantly speed up complex queries as they avoid re-execution of the base query. Fast data retrieval is possible since the data is precomputed and stored, retrieval is faster compared to computing the result on the fly in regular views.</li>\n        <li><strong>Reduced Load on Base Tables:</strong> Frequent querying of large tables can be resource-intensive. Materialized views reduce the load on the base tables by serving the precomputed results.</li>\n        <li><strong>Data Consolidation:</strong> They can aggregate and summarize data from multiple tables, making it easier to query and analyze.</li>\n        <li><strong>Disaster Recovery and High Availability:</strong> They can be used in distributed databases to maintain copies of data at different locations, aiding in disaster recovery and improving data availability.</li>\n        <li><strong>Indexed Access:</strong> Materialized views can be indexed, allowing for even faster access to specific subsets of data.</li>\n    </ul>\n    <h4 class=\"bold-blue\">&bull; Disadvantages of Materialized Views:</h4>\n    <ul>\n        <li><strong>Storage Overhead:</strong> They require additional storage space since the result set is stored physically.</li>\n        <li><strong>Maintenance Overhead:</strong> Keeping the materialized view up-to-date requires maintenance. Depending on the refresh strategy (e.g., ON COMMIT, ON DEMAND, or periodic), this can introduce additional complexity and overhead. Frequent updates to the base tables can lead to performance overhead due to the need to refresh the materialized view.</li>\n        <li><strong>Complexity:</strong> Managing materialized views (especially in terms of refreshing strategies and dependencies) can be more complex compared to regular views. Ensuring data consistency and handling refresh failures requires careful management.</li>\n        <li><strong>Latency:</strong> Materialized views might show outdated data because they are only updated at set times. This means there is a balance between having fast queries and having the most current data. Regular views always show the latest data because they run the query each time you access them.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Conclusion:</h4>\n    <ul>\n        <li><strong>Materialized Views</strong> are beneficial when you need to improve query performance for complex and read-intensive operations and when some latency is acceptable. They are suitable for reporting and data warehousing scenarios where data does not need to be real-time but needs to be accessed quickly.</li>\n        <li><strong>Regular Views</strong> are better suited for scenarios where real-time data is essential and where there is a need for simpler, more flexible query encapsulation without additional storage overhead.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 34,
    "Question": "What are the advantages and disadvantages of a view?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 12px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode {\n                font-size: 11px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">&bull; Advantages of Views:</h4>\n    <ul>\n        <li><strong>Simplifies Complex Queries:</strong> Views can simplify complex SQL queries, making it easier to work with the data.</li>\n        <li><strong>Security:</strong> Views can restrict access to specific rows and columns, enhancing data security by showing only the necessary data to users.</li>\n        <li><strong>Data Abstraction:</strong> Views provide a simplified version of the data, hiding the complexity of the underlying tables.</li>\n        <li><strong>Consistent Data Representation:</strong> Views ensure that data is consistently shown across different parts of an application.</li>\n        <li><strong>Reusability:</strong> Views can be reused in multiple queries, saving time and effort in rewriting the queries.</li>\n        <li><strong>Logical Data Independence:</strong> Changes to the database schema do not affect applications that use the view, as long as the view's definition remains valid.</li>\n    </ul>\n    <h4 class=\"bold-blue\">&bull; Disadvantages of Views:</h4>\n    <ul>\n        <li><strong>Performance Overhead:</strong> Views do not store data and must run the underlying query each time they are accessed, which can slow down performance for complex or large queries.</li>\n        <li><strong>Limited Functionality:</strong> Views are not always updatable, meaning you can't always insert, update, or delete data through a view, especially with complex joins or aggregations.</li>\n        <li><strong>Lack of Indexes:</strong> Regular views don't have indexes, which can make some queries slower compared to querying indexed tables directly.</li>\n        <li><strong>Potential for Stale Data:</strong> In environments with heavy caching, views might show outdated data, leading to inconsistencies.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Summary:</h4>\n    <ul>\n        <li>Views simplify data access, enhance security, and provide a consistent interface to data. However, they can also slow down performance, be hard to maintain, and have limitations on data updates.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 35,
    "Question": "How do you create and access materialized views and regular views?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 12px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode {\n                font-size: 11px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Creating and Accessing Regular Views:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE OR REPLACE VIEW</span> view_name <span class=\"SQLKeyword\">AS</span>\n<span class=\"SQLKeyword\">SELECT</span> column1<span class=\"SQLOperator\">,</span> column2<span class=\"SQLOperator\">,</span> <span class=\"SQLKeyword\">...</span>\n<span class=\"SQLKeyword\">FROM</span> table_name\n<span class=\"SQLKeyword\">WHERE</span> condition<span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Example:</span>\n<span class=\"SQLKeyword\">CREATE OR REPLACE VIEW</span> employee_view\n<span class=\"SQLKeyword\">AS</span>\n  <span class=\"SQLKeyword\">SELECT</span> employee_id<span class=\"SQLOperator\">,</span>\n         first_name<span class=\"SQLOperator\">,</span>\n         last_name<span class=\"SQLOperator\">,</span>\n         department_id\n  <span class=\"SQLKeyword\">FROM</span>   employees\n  <span class=\"SQLKeyword\">WHERE</span>  department_id <span class=\"SQLOperator\">=</span> <span class=\"SQLString\">10</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Access a view just like a regular table.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">*</span> <span class=\"SQLKeyword\">FROM</span> employee_view<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Creating and Accessing Materialized Views:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE MATERIALIZED VIEW</span> materialized_view_name\n<span class=\"SQLKeyword\">BUILD IMMEDIATE</span>\n<span class=\"SQLKeyword\">REFRESH</span> [<span class=\"SQLKeyword\">FAST</span> <span class=\"SQLOperator\">|</span> <span class=\"SQLKeyword\">COMPLETE</span> <span class=\"SQLOperator\">|</span> <span class=\"SQLKeyword\">FORCE</span>]\n<span class=\"SQLKeyword\">ON</span> [<span class=\"SQLKeyword\">COMMIT</span> <span class=\"SQLOperator\">|</span> <span class=\"SQLKeyword\">DEMAND</span> <span class=\"SQLOperator\">|</span> <span class=\"SQLKeyword\">START WITH</span> date <span class=\"SQLKeyword\">NEXT</span> date]\n<span class=\"SQLKeyword\">AS</span>\n<span class=\"SQLKeyword\">SELECT</span> column1<span class=\"SQLOperator\">,</span> column2<span class=\"SQLOperator\">,</span> <span class=\"SQLKeyword\">...</span>\n<span class=\"SQLKeyword\">FROM</span> table_name\n<span class=\"SQLKeyword\">WHERE</span> condition<span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Example:</span>\n<span class=\"SQLKeyword\">CREATE MATERIALIZED VIEW</span> sales_summary_mv\n    <span class=\"SQLKeyword\">BUILD IMMEDIATE</span>\n    <span class=\"SQLKeyword\">REFRESH</span>\n            <span class=\"SQLKeyword\">FAST</span>\n            <span class=\"SQLKeyword\">ON COMMIT</span>\n<span class=\"SQLKeyword\">AS</span>\n    <span class=\"SQLKeyword\">SELECT</span>\n        product_id<span class=\"SQLOperator\">,</span>\n        <span class=\"SQLFunction\">SUM</span>(sales_amount) <span class=\"SQLKeyword\">AS</span> total_sales\n    <span class=\"SQLKeyword\">FROM</span>\n        sales\n    <span class=\"SQLKeyword\">GROUP BY</span>\n        product_id<span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Access a materialized view just like a regular table.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">*</span> <span class=\"SQLKeyword\">FROM</span> sales_summary_mv<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Summary:</h4>\n    <ul>\n        <li><strong>Regular Views:</strong> Create using <code>CREATE OR REPLACE VIEW</code> and access like a table. They dynamically retrieve data from underlying tables.</li>\n        <li><strong>Materialized Views:</strong> Create using <code>CREATE MATERIALIZED VIEW</code> with options for refresh methods and access like a table. They store data physically to improve query performance. Note that to modify a materialized view, it must be dropped and recreated; REPLACE does not work for materialized views.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 36,
    "Question": "Write a query to find and remove duplicate rows, keeping only the one with the highest timestamp.",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Input Data: Table - TRANSACTIONS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>TRANSACTION_ID</th>\n                <th>CUSTOMER_NAME</th>\n                <th>TIMESTAMP</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>John Cena</td>\n                <td>06-01-2023 10:00:00</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>1</td>\n                <td>John Cena</td>\n                <td>06-01-2023 12:00:00</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>John Cena</td>\n                <td>06-01-2023 18:00:00</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>The Rock</td>\n                <td>06-02-2023 08:00:00</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>2</td>\n                <td>The Rock</td>\n                <td>06-02-2023 09:00:00</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>5</td>\n                <td>Stone Cold</td>\n                <td>06-03-2023 14:00:00</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>TRANSACTION_ID</th>\n                <th>CUSTOMER_NAME</th>\n                <th>TIMESTAMP</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>John Cena</td>\n                <td>06-01-2023 18:00:00</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>The Rock</td>\n                <td>06-02-2023 09:00:00</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Stone Cold</td>\n                <td>06-03-2023 14:00:00</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">Method 1: Using Aggregated Functions</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">--Method 1 by using Aggregated functions</span>\n<span class=\"SQLKeyword\">DELETE FROM</span> transactions t\n<span class=\"SQLKeyword\">WHERE</span> (<span class=\"SQLKeyword\">transaction_id</span><span class=\"SQLOperator\">,</span>customer_name<span class=\"SQLOperator\">,</span>timestamp) <span class=\"SQLKeyword\">not IN</span> (\n        <span class=\"SQLKeyword\">SELECT</span> transaction_id<span class=\"SQLOperator\">,</span>customer_name<span class=\"SQLOperator\">,</span> <span class=\"SQLFunction\">max</span>(timestamp)\n        <span class=\"SQLKeyword\">FROM</span> transactions\n        <span class=\"SQLKeyword\">group by</span> transaction_id<span class=\"SQLOperator\">,</span>customer_name)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Method 2: Using Analytical Functions</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">--Method 2 by using Analytical functions</span>\n<span class=\"SQLKeyword\">DELETE FROM</span> transactions\n      <span class=\"SQLKeyword\">WHERE</span> (<span class=\"SQLKeyword\">transaction_id</span><span class=\"SQLOperator\">,</span> <span class=\"SQLKeyword\">TIMESTAMP</span>) <span class=\"SQLKeyword\">IN</span> (\n  <span class=\"SQLKeyword\">SELECT</span> transaction_id<span class=\"SQLOperator\">,</span>\n         <span class=\"SQLKeyword\">TIMESTAMP</span>\n    <span class=\"SQLKeyword\">FROM</span> (\n           <span class=\"SQLKeyword\">SELECT</span> transaction_id<span class=\"SQLOperator\">,</span>\n                  <span class=\"SQLKeyword\">TIMESTAMP</span><span class=\"SQLOperator\">,</span>\n                  <span class=\"SQLFunction\">ROW_NUMBER</span>() <span class=\"SQLKeyword\">OVER</span> (<span class=\"SQLKeyword\">PARTITION BY</span> transaction_id<span class=\"SQLOperator\">,</span>\n                  customer_name <span class=\"SQLKeyword\">ORDER BY</span> <span class=\"SQLKeyword\">TIMESTAMP DESC</span>) <span class=\"SQLKeyword\">AS</span> rnk\n             <span class=\"SQLKeyword\">FROM</span> transactions\n         )\n   <span class=\"SQLKeyword\">WHERE</span> rnk <span class=\"SQLOperator\">&gt;</span> <span class=\"SQLString\">1</span>\n)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li>\n            <strong>Method 1:</strong> Uses a subquery to find the maximum timestamp for each combination of <code>transaction_id</code> and <code>customer_name</code>. Deletes rows from the <code>transactions</code> table that do not have the maximum timestamp.\n        </li>\n        <li>\n \n <strong>Method 2:</strong> Uses the <code>ROW_NUMBER()</code> analytical function to assign a rank to each row within each <code>transaction_id</code> and <code>customer_name</code> partition, ordered by timestamp in descending order. Deletes rows with a rank greater than 1, keeping only the row with the highest timestamp.\n        </li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 37,
    "Question": "Write a query to delete duplicate rows from a table that does not have a primary key or unique keys.",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Input Data: Table - TRANSACTIONS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>TRANSACTION_ID</th>\n                <th>CUSTOMER_NAME</th>\n                <th>TIMESTAMP</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>John Cena</td>\n                <td>06-01-2023 10:00:00</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>1</td>\n                <td>John Cena</td>\n                <td>06-01-2023 10:00:00</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>John Cena</td>\n                <td>06-01-2023 10:00:00</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>The Rock</td>\n                <td>06-02-2023 09:00:00</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>2</td>\n                <td>The Rock</td>\n                <td>06-02-2023 09:00:00</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>5</td>\n                <td>Stone Cold</td>\n                <td>06-03-2023 14:00:00</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>TRANSACTION_ID</th>\n                <th>CUSTOMER_NAME</th>\n                <th>TIMESTAMP</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>John Cena</td>\n                <td>06-01-2023 10:00:00</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>The Rock</td>\n                <td>06-02-2023 09:00:00</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Stone Cold</td>\n                <td>06-03-2023 14:00:00</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">Method 1: Using Aggregated Functions</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">--Method 1 by using Aggregated functions</span>\n<span class=\"SQLKeyword\">DELETE FROM</span> transactions t\n<span class=\"SQLKeyword\">WHERE</span>\n    (<span class=\"SQLKeyword\">transaction_id</span><span class=\"SQLOperator\">,</span> customer_name<span class=\"SQLOperator\">,</span> <span class=\"SQLKeyword\">TIMESTAMP</span><span class=\"SQLOperator\">,</span> <span class=\"SQLKeyword\">ROWID</span> ) <span class=\"SQLKeyword\">NOT IN</span> (\n        <span class=\"SQLKeyword\">SELECT</span>\n            transaction_id<span class=\"SQLOperator\">,</span> customer_name<span class=\"SQLOperator\">,</span>\n            <span class=\"SQLKeyword\">TIMESTAMP</span><span class=\"SQLOperator\">,</span> <span class=\"SQLFunction\">MAX</span>(<span class=\"SQLKeyword\">ROWID</span>) <span class=\"SQLKeyword\">AS</span> row_id\n        <span class=\"SQLKeyword\">FROM</span>\n            transactions\n        <span class=\"SQLKeyword\">GROUP BY</span>\n            transaction_id<span class=\"SQLOperator\">,</span> customer_name<span class=\"SQLOperator\">,</span> <span class=\"SQLKeyword\">TIMESTAMP</span>\n    )<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Method 2: Using Analytical Functions</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">--Method 2 by using Analytical functions</span>\n<span class=\"SQLKeyword\">DELETE</span> transactions\n<span class=\"SQLKeyword\">WHERE</span> <span class=\"SQLKeyword\">rowid</span> <span class=\"SQLKeyword\">IN</span> (\n<span class=\"SQLKeyword\">SELECT</span> rid\n<span class=\"SQLKeyword\">FROM</span> (\n   <span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">rowid</span> <span class=\"SQLKeyword\">AS</span> rid<span class=\"SQLOperator\">,</span>\n      <span class=\"SQLFunction\">ROW_NUMBER</span>() <span class=\"SQLKeyword\">OVER</span> (\n         <span class=\"SQLKeyword\">PARTITION BY</span> transaction_id<span class=\"SQLOperator\">,</span>\n         customer_name <span class=\"SQLKeyword\">ORDER BY</span> transaction_id<span class=\"SQLOperator\">,</span>\n            customer_name\n         ) <span class=\"SQLKeyword\">AS</span> RN\n   <span class=\"SQLKeyword\">FROM</span> transactions\n )\n<span class=\"SQLKeyword\">WHERE</span> RN <span class=\"SQLOperator\">&gt;</span> <span class=\"SQLString\">1</span>\n)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li>\n            <strong>Method 1:</strong> Uses a subquery to find the maximum <code>ROWID</code> for each unique combination of <code>transaction_id</code>, <code>customer_name</code>, and <code>timestamp</code>. Deletes rows that do not match the maximum <code>ROWID</code>.\n        </li>\n        <li>\n            <strong>Method 2:</strong> Uses the <code>ROW_NUMBER()</code> analytical function to assign a rank to each row within each <code>transaction_id</code> and <code>customer_name</code> partition. Deletes rows with a rank greater than 1, keeping only one instance of each duplicate row.\n        </li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 38,
    "Question": "Write a query to identify employees who have switched departments in the past 6 months.",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Input Data: Table - EMPLOYEES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>EMPLOYEE_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Leonardo DiCaprio</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Scarlett Johansson</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Denzel Washington</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">Input Data: Table - EMPLOYEE_DEPARTMENT_HISTORY</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>DEPARTMENT_ID</th>\n                <th>DEPARTMENT_NAME</th>\n                <th>CHANGE_DATE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>10</td>\n                <td>IT Dev</td>\n                <td>01-01-2024 00:00:00</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>1</td>\n                <td>20</td>\n                <td>IT Sales</td>\n                <td>04-01-2024 00:00:00</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>2</td>\n                <td>30</td>\n                <td>Admin</td>\n                <td>02-01-2024 00:00:00</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>3</td>\n                <td>40</td>\n                <td>Payroll</td>\n                <td>01-15-2024 00:00:00</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">Query to Identify Employees Who Have Switched Departments</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT DISTINCT</span> e<span class=\"SQLOperator\">.</span>employee_id<span class=\"SQLOperator\">,</span>\n                e<span class=\"SQLOperator\">.</span>employee_name<span class=\"SQLOperator\">,</span>\n                change_date<span class=\"SQLOperator\">,</span>\n                previous_department_id<span class=\"SQLOperator\">,</span>\n                previous_department_name<span class=\"SQLOperator\">,</span>\n                department_id <span class=\"SQLKeyword\">AS</span> present_dept_id<span class=\"SQLOperator\">,</span>\n                department_name\n<span class=\"SQLKeyword\">FROM</span>   (<span class=\"SQLKeyword\">SELECT</span> employee_id<span class=\"SQLOperator\">,</span>\n         department_id<span class=\"SQLOperator\">,</span>\n         <span class=\"SQLFunction\">Lag</span>(department_id)\n            <span class=\"SQLKeyword\">over</span> (\n         <span class=\"SQLKeyword\">PARTITION BY</span> employee_id\n         <span class=\"SQLKeyword\">ORDER BY</span> change_date) <span class=\"SQLKeyword\">AS</span> previous_department_id<span class=\"SQLOperator\">,</span>\n   <span class=\"SQLFunction\">Lag</span>(department_name)\n      <span class=\"SQLKeyword\">over</span> (\n         <span class=\"SQLKeyword\">PARTITION BY</span> employee_id\n         <span class=\"SQLKeyword\">ORDER BY</span> change_date) <span class=\"SQLKeyword\">AS</span> previous_department_name<span class=\"SQLOperator\">,</span>\n   change_date<span class=\"SQLOperator\">,</span>\n   department_name\n<span class=\"SQLKeyword\">FROM\n</span>   employee_department_history\n<span class=\"SQLKeyword\">WHERE</span>  change_date <span class=\"SQLOperator\">&gt;=</span> <span class=\"SQLFunction\">Add_months</span>(<span class=\"SQLFunction\">SYSDATE</span><span class=\"SQLOperator\">,</span> <span class=\"SQLOperator\">-6</span>)) edh\n<span class=\"SQLKeyword\">join</span> employees e\n<span class=\"SQLKeyword\">ON</span> edh<span class=\"SQLOperator\">.</span>employee_id <span class=\"SQLOperator\">=</span> e<span class=\"SQLOperator\">.</span>employee_id\n<span class=\"SQLKeyword\">WHERE</span>  edh<span class=\"SQLOperator\">.</span>department_id <span class=\"SQLOperator\">!=</span> edh<span class=\"SQLOperator\">.</span>previous_department_id\n<span class=\"SQLKeyword\">AND</span> edh<span class=\"SQLOperator\">.</span>previous_department_id <span class=\"SQLKeyword\">IS NOT NULL</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li>\n            <strong>Subquery (<code>edh</code>):</strong> This subquery retrieves each employee's department changes and uses the <code>LAG()</code> function to get the previous department for each change.\n            <ul>\n                <li><code>LAG(department_id) OVER (PARTITION BY employee_id ORDER BY change_date)</code>: This analytic function retrieves the department_id and department_name from the previous row (based on <code>change_date</code>) for each employee.</li>\n                <li><code>WHERE change_date >= ADD_MONTHS(SYSDATE, -6)</code>: This filters the changes to only include those within the past 6 months.</li>\n            </ul>\n        </li>\n        <li>\n            <strong>Main Query:</strong>\n            <ul>\n                <li>Joins the <code>employees</code> table with the result of the subquery to get the employee names.</li>\n                <li>Filters the result to include only those rows where the current department is different from the previous department (<code>department_id != previous_department_id</code>) and ensures the previous department is not null (<code>previous_department_id IS NOT NULL</code>).</li>\n            </ul>\n        </li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 39,
    "Question": "What is the function of the DBMS_SCHEDULER package in Oracle?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Function of DBMS_SCHEDULER Package</h4>\n    <p>The <code>DBMS_SCHEDULER</code> package in Oracle manages and schedules jobs and tasks within the database. Key functions include:</p>\n    <ol>\n        <li>\n            <strong>Job Creation and Scheduling:</strong>\n            <ul>\n                <li>Create jobs to run PL/SQL code, scripts, or executables.</li>\n                <li>Schedule jobs with specific start times, frequencies, and end times.</li>\n            </ul>\n        </li>\n        <li>\n            <strong>Job Management:</strong>\n            <ul>\n                <li>Monitor job status and history.</li>\n                <li>Enable, disable, and modify jobs.</li>\n                <li>Prioritize jobs for execution order.</li>\n            </ul>\n        </li>\n        <li>\n            <strong>Resource Management:</strong>\n            <ul>\n                <li>Define windows for job execution.</li>\n                <li>Allocate system resources to jobs using resource consumer groups.</li>\n            </ul>\n        </li>\n        <li>\n            <strong>Event-Based Scheduling:</strong>\n            <ul>\n                <li>Trigger jobs based on system events like file arrivals or table modifications.</li>\n            </ul>\n        </li>\n        <li>\n            <strong>Job Classes:</strong>\n            <ul>\n                <li>Group jobs for easier management with associated resource policies.</li>\n            </ul>\n        </li>\n        <li>\n            <strong>Execution Control:</strong>\n            <ul>\n                <li>Start, stop, and manage job execution.</li>\n                <li>Set up repeating jobs with complex intervals.</li>\n            </ul>\n        </li>\n        <li>\n            <strong>Security:</strong>\n            <ul>\n                <li>Control access to scheduling features using roles and privileges.</li>\n            </ul>\n        </li>\n    </ol>\n    <h4 class=\"bold-blue\">Example of Creating and Scheduling a Job</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">BEGIN</span>\nDBMS_SCHEDULER<span class=\"SQLOperator\">.</span><span class=\"SQLFunction\">create_job</span> (\n<span class=\"SQLKeyword\">job_name</span>        <span class=\"SQLOperator\">=></span> <span class=\"SQLString\">'daily_revenue'</span><span class=\"SQLOperator\">,</span>\n<span class=\"SQLKeyword\">job_type</span>        <span class=\"SQLOperator\">=></span> <span class=\"SQLString\">'PLSQL_BLOCK'</span><span class=\"SQLOperator\">,</span>\n<span class=\"SQLKeyword\">job_action</span>      <span class=\"SQLOperator\">=></span> <span class=\"SQLString\">'BEGIN proc_calc_rev_daily; END;'</span><span class=\"SQLOperator\">,</span>\n<span class=\"SQLKeyword\">start_date</span>      <span class=\"SQLOperator\">=></span> <span class=\"SQLFunction\">SYSTIMESTAMP</span><span class=\"SQLOperator\">,</span>\n<span class=\"SQLKeyword\">repeat_interval</span> <span class=\"SQLOperator\">=></span> <span class=\"SQLString\">'FREQ=DAILY; BYHOUR=10; BYMINUTE=0; BYSECOND=0'</span><span class=\"SQLOperator\">,</span>\n<span class=\"SQLKeyword\">enabled</span>         <span class=\"SQLOperator\">=></span> <span class=\"SQLKeyword\">TRUE</span>\n<span class=\"SQLOperator\">);</span>\n<span class=\"SQLKeyword\">END</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLOperator\">/</span>\n</pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 40,
    "Question": "Write a query to determine the percentage change in sales for each product compared to the previous month.",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Input Data: Table - PRODUCTS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PRODUCT_ID</th>\n                <th>PRODUCT_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Echo Dot</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Fire TV Stick</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">Input Data: Table - PRODUCT_SALES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PRODUCT_ID</th>\n                <th>SALE_DATE</th>\n                <th>SALES_AMOUNT</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>01-01-2023 00:00:00</td>\n                <td>1000</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>1</td>\n                <td>02-01-2023 00:00:00</td>\n                <td>1100</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>03-01-2023 00:00:00</td>\n                <td>1050</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>01-01-2023 00:00:00</td>\n                <td>2000</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>2</td>\n                <td>02-01-2023 00:00:00</td>\n                <td>2100</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>03-01-2023 00:00:00</td>\n                <td>1900</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PRODUCT_ID</th>\n                <th>PRODUCT_NAME</th>\n                <th>SALE_DATE</th>\n                <th>SALES_MONTH</th>\n                <th>SALES_AMOUNT</th>\n                <th>PREVIOUS_MONTH_SALES</th>\n                <th>PERCENTAGE_CHANGE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Echo Dot</td>\n                <td>01-01-2023 00:00:00</td>\n                <td>Jan-2023</td>\n                <td>1000</td>\n                <td></td>\n                <td></td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>1</td>\n                <td>Echo Dot</td>\n                <td>02-01-2023 00:00:00</td>\n                <td>Feb-2023</td>\n                <td>1100</td>\n                <td>1000</td>\n                <td>10</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Echo Dot</td>\n                <td>03-01-2023 00:00:00</td>\n                <td>Mar-2023</td>\n                <td>1050</td>\n                <td>1100</td>\n                <td>-4.55</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Fire TV Stick</td>\n                <td>01-01-2023 00:00:00</td>\n                <td>Jan-2023</td>\n                <td>2000</td>\n                <td></td>\n                <td></td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>2</td>\n                <td>Fire TV Stick</td>\n                <td>02-01-2023 00:00:00</td>\n                <td>Feb-2023</td>\n                <td>2100</td>\n                <td>2000</td>\n                <td>5</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Fire TV Stick</td>\n                <td>03-01-2023 00:00:00</td>\n                <td>Mar-2023</td>\n                <td>1900</td>\n                <td>2100</td>\n                <td>-9.52</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">Query to Determine Percentage Change in Sales</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    ps<span class=\"SQLOperator\">.</span>product_id<span class=\"SQLOperator\">,</span>\n    p<span class=\"SQLOperator\">.</span>product_name<span class=\"SQLOperator\">,</span>\n    ps<span class=\"SQLOperator\">.</span>sale_date<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLFunction\">to_char</span>(sale_date<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'Mon-YYYY'</span>) sales_month<span class=\"SQLOperator\">,</span>\n    ps<span class=\"SQLOperator\">.</span>sales_amount<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLFunction\">LAG</span>(ps<span class=\"SQLOperator\">.</span>sales_amount)\n    <span class=\"SQLKeyword\">OVER</span>(<span class=\"SQLKeyword\">PARTITION BY</span> ps<span class=\"SQLOperator\">.</span>product_id\n         <span class=\"SQLKeyword\">ORDER BY</span>\n             ps<span class=\"SQLOperator\">.</span>sale_date\n    ) <span class=\"SQLKeyword\">AS</span> previous_month_sales<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLFunction\">round</span>((ps<span class=\"SQLOperator\">.</span>sales_amount <span class=\"SQLOperator\">-</span> <span class=\"SQLFunction\">LAG</span>(ps<span class=\"SQLOperator\">.</span>sales_amount)\n    <span class=\"SQLKeyword\">OVER</span>(<span class=\"SQLKeyword\">PARTITION BY</span> ps<span class=\"SQLOperator\">.</span>product_id\n    <span class=\"SQLKeyword\">ORDER BY</span> ps<span class=\"SQLOperator\">.</span>sale_date\n    )) / <span class=\"SQLFunction\">LAG</span>(ps<span class=\"SQLOperator\">.</span>sales_amount)\n         <span class=\"SQLKeyword\">OVER</span>(<span class=\"SQLKeyword\">PARTITION BY</span> ps<span class=\"SQLOperator\">.</span>product_id\n              <span class=\"SQLKeyword\">ORDER BY</span> ps<span class=\"SQLOperator\">.</span>sale_date\n    ) <span class=\"SQLOperator\">*</span> <span class=\"SQLString\">100</span><span class=\"SQLOperator\">,</span>\n          <span class=\"SQLString\">2</span>) <span class=\"SQLKeyword\">AS</span> percentage_change\n<span class=\"SQLKeyword\">FROM</span>\n         product_sales ps\n    <span class=\"SQLKeyword\">JOIN</span> products p <span class=\"SQLKeyword\">ON</span> ps<span class=\"SQLOperator\">.</span>product_id <span class=\"SQLOperator\">=</span> p<span class=\"SQLOperator\">.</span>product_id\n<span class=\"SQLKeyword\">ORDER BY</span>\n    ps<span class=\"SQLOperator\">.</span>product_id<span class=\"SQLOperator\">,</span>\n    ps<span class=\"SQLOperator\">.</span>sale_date<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li>\n            <strong>Joining Tables:</strong> The query joins the <code>product_sales</code> table (<code>ps</code>) with the <code>products</code> table (<code>p</code>) to include product names.\n        </li>\n        <li>\n            <strong>LAG Function:</strong> <code>LAG(ps.sales_amount) OVER (PARTITION BY ps.product_id ORDER BY ps.sale_date)</code> retrieves the sales amount of the previous month for each product.\n        </li>\n        <li>\n            <strong>Percentage Change Calculation:</strong>\n            <ul>\n                <li><code>(ps.sales_amount - LAG(ps.sales_amount) OVER (PARTITION BY ps.product_id ORDER BY ps.sale_date)) / LAG(ps.sales_amount) OVER (PARTITION BY ps.product_id ORDER BY ps.sale_date) * 100</code> calculates the percentage change.</li>\n                <li>The <code>ROUND</code> function is used to round the result to two decimal places.</li>\n            </ul>\n        </li>\n        <li>\n            The <code>LAG</code> function will return <code>NULL</code> for the first record of each product, and the percentage change will also be <code>NULL</code> for that record, which is expected behavior.\n        </li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 41,
    "Question": "Write a query to find the top 5 products based on sales and customer reviews.",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - PRODUCTS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PRODUCT_ID</th>\n                <th>PRODUCT_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Echo Dot</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Fire TV Stick</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Kindle</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>Echo Show</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Ring Doorbell</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>6</td>\n                <td>Amazon Echo</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Input Data: Table - ORDER_ITEMS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PRODUCT_ID</th>\n                <th>PRODUCT_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Echo Dot</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Fire TV Stick</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Kindle</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>Echo Show</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Ring Doorbell</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>6</td>\n                <td>Amazon Echo</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Input Data: Table - REVIEWS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>REVIEW_ID</th>\n                <th>PRODUCT_ID</th>\n                <th>RATING</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>1</td>\n                <td>4.5</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>1</td>\n                <td>4</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>2</td>\n                <td>5</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>2</td>\n                <td>4.5</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>3</td>\n                <td>3.5</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>6</td>\n                <td>4</td>\n                <td>4.8</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>7</td>\n                <td>5</td>\n                <td>4.3</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>8</td>\n                <td>6</td>\n                <td>4</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PRODUCT_ID</th>\n                <th>PRODUCT_NAME</th>\n                <th>TOTAL_SALES</th>\n                <th>AVERAGE_RATING</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>2</td>\n                <td>Fire TV Stick</td>\n                <td>4000</td>\n                <td>4.75</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>Echo Show</td>\n                <td>1500</td>\n                <td>4.8</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Ring Doorbell</td>\n                <td>1200</td>\n                <td>4.3</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>1</td>\n                <td>Echo Dot</td>\n                <td>1000</td>\n                <td>4.25</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>6</td>\n                <td>Amazon Echo</td>\n                <td>800</td>\n                <td>4</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <div class=\"scrollable-container\">\n        <pre class=\"SQLCode\"><span class=\"SQLComment\">-- SQL query to find top 5 products based on sales and reviews</span>\n        <span class=\"SQLKeyword\">SELECT</span> product_id<span class=\"SQLOperator\">,</span>\n               product_name<span class=\"SQLOperator\">,</span>\n               total_sales<span class=\"SQLOperator\">,</span>\n               average_rating\n        <span class=\"SQLKeyword\">FROM</span>   (<span class=\"SQLKeyword\">SELECT</span> p.product_id<span class=\"SQLOperator\">,</span>\n                 p.product_name<span class=\"SQLOperator\">,</span>\n                 <span class=\"SQLFunction\">SUM</span>(oi.quantity <span class=\"SQLOperator\">*</span> oi.unit_price)\n                          <span class=\"SQLKeyword\">AS</span> total_sales<span class=\"SQLOperator\">,</span>\n                 <span class=\"SQLFunction\">Avg</span>(r.rating)\n                          <span class=\"SQLKeyword\">AS</span> average_rating<span class=\"SQLOperator\">,</span>\n                 <span class=\"SQLFunction\">Rank</span>()\n            <span class=\"SQLKeyword\">OVER</span> (\n            <span class=\"SQLKeyword\">ORDER BY</span> <span class=\"SQLFunction\">SUM</span>(oi.quantity <span class=\"SQLOperator\">*</span> oi.unit_price) <span class=\"SQLKeyword\">DESC</span><span class=\"SQLOperator\">,</span> <span class=\"SQLFunction\">Avg</span>(r.rating)\n            <span class=\"SQLKeyword\">DESC</span>)\n                          <span class=\"SQLKeyword\">AS</span> rank\n           <span class=\"SQLKeyword\">FROM</span>   products p\n                 <span class=\"SQLKeyword\">join</span> order_items oi\n                    <span class=\"SQLKeyword\">ON</span> p.product_id <span class=\"SQLOperator\">=</span> oi.product_id\n                 <span class=\"SQLKeyword\">join</span> reviews r\n                    <span class=\"SQLKeyword\">ON</span> p.product_id <span class=\"SQLOperator\">=</span> r.product_id\n           <span class=\"SQLKeyword\">GROUP BY</span> p.product_id<span class=\"SQLOperator\">,</span>\n                    p.product_name)\n        <span class=\"SQLKeyword\">WHERE</span>  rank <span class=\"SQLOperator\"><=</span> <span class=\"SQLString\">5</span><span class=\"SQLOperator\">;</span>\n        </pre>\n        </div>\n        <h4 class=\"bold-maroon\">Explanation:</h4>\n        <ul>\n            <li>\n                <strong>Outer Query:</strong>\n                <ul>\n                    <li>Selects the following columns:\n                        <ul>\n                            <li><code>product_id</code>: The unique identifier for each product.</li>\n                            <li><code>product_name</code>: The name of the product.</li>\n                            <li><code>total_sales</code>: The total sales value of the product, calculated as the sum of the quantity sold multiplied by the unit price.</li>\n                            <li><code>average_rating</code>: The average rating of the product from customer reviews.</li>\n                        </ul>\n                    </li>\n                </ul>\n            </li>\n            <li>\n                <strong>Inner Query:</strong>\n                <ul>\n                    <li>Joins three tables:\n                        <ul>\n                            <li><code>products</code> (alias <code>p</code>): Contains product details.</li>\n                            <li><code>order_items</code> (alias <code>oi</code>): Contains order item details, joined on <code>product_id</code>.</li>\n                            <li><code>reviews</code> (alias <code>r</code>): Contains product reviews, joined on <code>product_id</code>.</li>\n                        </ul>\n                    </li>\n                    <li>Calculates:\n                        <ul>\n                            <li><code>total_sales</code>: The total sales amount for each product using <code>SUM(oi.quantity * oi.unit_price)</code>.</li>\n                            <li><code>average_rating</code>: The average rating for each product using <code>Avg(r.rating)</code>.</li>\n                            <li><code>rank</code>: A ranking based on the total sales (in descending order) and average rating (also in descending order) using the <code>RANK()</code> window function.</li>\n                        </ul>\n                    </li>\n                    <li>Groups the results by <code>product_id</code> and <code>product_name</code>.</li>\n                </ul>\n            </li>\n            <li>\n                <strong>Filtering:</strong>\n                <ul>\n                    <li>The <code>WHERE</code> clause filters the results to include only the top 5 products based on the <code>rank</code>.</li>\n                </ul>\n            </li>\n        </ul>\n        \n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 42,
    "Question": "Write a query to identify the top 3 customers with the most purchases.",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - CUSTOMER_PURCHASES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_ID</th>\n                <th>CUSTOMER_NAME</th>\n                <th>PURCHASE_ID</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Chris Hemsworth</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>1</td>\n                <td>Leonardo DiCaprio</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Robert Downey Jr</td>\n                <td>3</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>5</td>\n                <td>Chris Hemsworth</td>\n                <td>4</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Leonardo DiCaprio</td>\n                <td>5</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>3</td>\n                <td>Robert Downey Jr</td>\n                <td>6</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Chris Hemsworth</td>\n                <td>7</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_ID</th>\n                <th>CUSTOMER_NAME</th>\n                <th>PURCHASE_COUNT</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Chris Hemsworth</td>\n                <td>3</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>1</td>\n                <td>Leonardo DiCaprio</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Robert Downey Jr</td>\n                <td>2</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <div class=\"scrollable-container\">\n        <pre class=\"SQLCode\"><span class=\"SQLComment\">--SQL Query 1 by using Aggregated functions</span>\n        <span class=\"SQLKeyword\">SELECT</span> customer_id\n            <span class=\"SQLOperator\">,</span>customer_name\n            <span class=\"SQLOperator\">,</span><span class=\"SQLFunction\">COUNT</span>(purchase_id) <span class=\"SQLKeyword\">AS</span> purchase_count\n        <span class=\"SQLKeyword\">FROM</span> customer_purchases\n        <span class=\"SQLKeyword\">GROUP BY</span> customer_id\n            <span class=\"SQLOperator\">,</span>customer_name\n        <span class=\"SQLKeyword\">ORDER BY</span> purchase_count <span class=\"SQLKeyword\">DESC</span>\n        <span class=\"SQLKeyword\">FETCH FIRST</span> <span class=\"SQLString\">3</span> <span class=\"SQLKeyword\">ROWS ONLY</span><span class=\"SQLOperator\">;</span>\n        \n        <span class=\"SQLComment\">--SQL Query 2 by using Aggregated and analytical functions</span>\n        <span class=\"SQLKeyword\">WITH</span> ranked_customers\n        <span class=\"SQLKeyword\">AS</span> (\n            <span class=\"SQLKeyword\">SELECT</span> customer_id\n                <span class=\"SQLOperator\">,</span>customer_name\n                <span class=\"SQLOperator\">,</span><span class=\"SQLFunction\">COUNT</span>(purchase_id) <span class=\"SQLKeyword\">AS</span> purchase_count\n                <span class=\"SQLOperator\">,</span><span class=\"SQLFunction\">RANK</span>() <span class=\"SQLKeyword\">OVER</span> (\n                    <span class=\"SQLKeyword\">ORDER BY</span> <span class=\"SQLFunction\">COUNT</span>(purchase_id) <span class=\"SQLKeyword\">DESC</span>\n                    ) <span class=\"SQLKeyword\">AS</span> rank\n            <span class=\"SQLKeyword\">FROM</span> customer_purchases\n            <span class=\"SQLKeyword\">GROUP BY</span> customer_id\n                <span class=\"SQLOperator\">,</span>customer_name\n            )\n        <span class=\"SQLKeyword\">SELECT</span> customer_id\n            <span class=\"SQLOperator\">,</span>customer_name\n            <span class=\"SQLOperator\">,</span>purchase_count\n        <span class=\"SQLKeyword\">FROM</span> ranked_customers\n        <span class=\"SQLKeyword\">WHERE</span> rank <span class=\"SQLOperator\"><=</span> <span class=\"SQLString\">3</span><span class=\"SQLOperator\">;</span></pre>\n        </div>\n        <h4 class=\"bold-maroon\">Explanation:</h4>\n        <ul>\n            <li>\n                <strong>SQL Query 1: Using Aggregated Functions</strong>\n                <ul>\n                    <li>Selects the following columns:\n                        <ul>\n                            <li><code>customer_id</code>: The unique identifier for each customer.</li>\n                            <li><code>customer_name</code>: The name of the customer.</li>\n                            <li><code>purchase_count</code>: The total number of purchases made by each customer, calculated using the <code>COUNT(purchase_id)</code> function.</li>\n                        </ul>\n                    </li>\n                    <li>Groups the results by: customer_id, customer_name\n                    </li>\n                    <li>Orders the results by <code>purchase_count</code> in descending order, so that the customers with the most purchases appear first.</li>\n                    <li>Limits the results to the top 3 customers using <code>FETCH FIRST 3 ROWS ONLY</code>.</li>\n                </ul>\n            </li>\n            \n            <li>\n                <strong>SQL Query 2: Using Aggregated and Analytical Functions</strong>\n                <ul>\n                    <li>Defines a Common Table Expression (CTE) named <code>ranked_customers</code> that:\n                        <ul>\n                            <li>Selects the following columns:\n                                <ul>\n                                    <li><code>customer_id</code>: The unique identifier for each customer.</li>\n                                    <li><code>customer_name</code>: The name of the customer.</li>\n                                    <li><code>purchase_count</code>: The total number of purchases made by each customer, calculated using the <code>COUNT(purchase_id)</code> function.</li>\n                                    <li><code>rank</code>: The rank of each customer based on their <code>purchase_count</code>, calculated using the <code>RANK()</code> analytical function. Customers are ranked in descending order of their purchase count.</li>\n                                </ul>\n                            </li>\n                            <li>Groups the results by: customer_id, customer_name\n                            </li>\n                        </ul>\n                    </li>\n                    <li>The main query then selects from the <code>ranked_customers</code> CTE:\n                        <ul>\n                            <li><code>customer_id</code>: The unique identifier for each customer.</li>\n                            <li><code>customer_name</code>: The name of the customer.</li>\n                            <li><code>purchase_count</code>: The total number of purchases made by each customer.</li>\n                        </ul>\n                    </li>\n                    <li>Filters the results to include only the top 3 customers based on their <code>rank</code> using <code>WHERE rank <= 3</code>.</li>\n                </ul>\n            </li>\n        </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 43,
    "Question": "What is the difference between rowid and rownum in oracle?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p><code>ROWID</code> and <code>ROWNUM</code> are both pseudo-columns in Oracle, but they serve different purposes. Understanding the difference between them is essential for effective database querying.</p>\n    <h4 class=\"bold-maroon\">ROWID:</h4>\n    <p>The <code>ROWID</code> pseudo-column represents the unique address of a row in the database. It is the fastest way to access a row because it points directly to the physical location of the row. <code>ROWID</code> values are unique within a table and stay the same as long as the row exists in the table.</p>\n    <h4 class=\"bold-maroon\">ROWNUM:</h4>\n    <p>The <code>ROWNUM</code> pseudo-column represents the order in which Oracle retrieves rows in a query result set. The first row fetched has a <code>ROWNUM</code> of 1, the second row fetched has a <code>ROWNUM</code> of 2, and so on. <code>ROWNUM</code> is assigned before the ORDER BY clause is applied and is generally used to limit the number of rows returned by a query.</p>\n    <h4 class=\"bold-maroon\">Example Scenario:</h4>\n    <p>Consider a table called <code>EMPLOYEES</code>:</p>\n    <h4 class=\"bold-maroon\">Input Data: Table EMPLOYEES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>EMPLOYEE_NAME</th>\n                <th>SALARY</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Ram</td>\n                <td>5000</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Monika</td>\n                <td>6000</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Sara</td>\n                <td>5500</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>Tom</td>\n                <td>7000</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Anna</td>\n                <td>6500</td>\n            </tr>\n        </tbody>\n    </table>\n    </div>\n    <h4 class=\"bold-maroon\">Example 1: Using ROWID</h4>\n    <p>To fetch the <code>ROWID</code> along with employee details:</p>\n    <div class=\"scrollable-container\">\n    <pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> employee_id<span class=\"SQLOperator\">,</span> \n       employee_name<span class=\"SQLOperator\">,</span> \n       salary<span class=\"SQLOperator\">,</span> \n       <span class=\"SQLKeyword\">ROWID</span>\n<span class=\"SQLKeyword\">FROM</span> employees<span class=\"SQLOperator\">;</span>\n</pre>\n    </div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>EMPLOYEE_NAME</th>\n                <th>SALARY</th>\n                <th>ROWID</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Ram</td>\n                <td>5000</td>\n                <td>AAARpPAAFAAAAAGAAB</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Monika</td>\n                <td>6000</td>\n                <td>AAARpPAAFAAAAAGAAC</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Sara</td>\n                <td>5500</td>\n                <td>AAARpPAAFAAAAAGAAE</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>Tom</td>\n                <td>7000</td>\n                <td>AAARpPAAFAAAAAGAAF</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Anna</td>\n                <td>6500</td>\n                <td>AAARpPAAFAAAAAGAAG</td>\n            </tr>\n        </tbody>\n    </table>\n    </div>\n    <h4 class=\"bold-maroon\">Example 2: Using ROWNUM</h4>\n    <p>To fetch the first three employees based on their ROWNUM:</p>\n    <div class=\"scrollable-container\">\n    <pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> employee_id<span class=\"SQLOperator\">,</span> \n       employee_name<span class=\"SQLOperator\">,</span> \n       salary<span class=\"SQLOperator\">,</span> \n       <span class=\"SQLKeyword\">ROWNUM</span>\n<span class=\"SQLKeyword\">FROM</span> employees\n<span class=\"SQLKeyword\">WHERE</span> <span class=\"SQLKeyword\">ROWNUM</span> <span class=\"SQLOperator\"><</span> <span class=\"SQLString\">4</span><span class=\"SQLOperator\">;</span>\n</pre>\n    </div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>EMPLOYEE_NAME</th>\n                <th>SALARY</th>\n                <th>ROWNUM</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Ram</td>\n                <td>5000</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Monika</td>\n                <td>6000</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Sara</td>\n                <td>5500</td>\n                <td>3</td>\n            </tr>\n        </tbody>\n    </table>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><code>ROWID</code> is used to fetch the unique physical address of a row, as seen in the first example. It is a good way to uniquely identify a row within a table.</li>\n        <li><code>ROWNUM</code> is used to limit the number of rows returned by a query, as shown in the second example where only the first three rows are returned.</li>\n        <li>Remember, <code>ROWNUM</code> is assigned before any sorting, so if sorting is applied and then the rows are limited, a subquery must be used.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 44,
    "Question": "How do you use Oracle SQL Developer to create and execute DDL scripts?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Steps to use Oracle SQL Developer to create and execute DDL scripts:</h4>\n    <!-- <ol class=\"bold-maroon\"> -->\n        <li><b>Open SQL Developer and Connect:</b> Launch Oracle SQL Developer and connect to the database using the appropriate credentials.</li>\n        <li><b>Create a New SQL File and Write DDL:</b>\n            <!-- <ol> -->\n                <li>Go to <code>File -> New</code> and create a new SQL file.</li>\n                <li>Write the DDL statements for creating tables and indexes.</li>\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Create Products Table</span>\n<span class=\"SQLKeyword\">CREATE TABLE</span> products (\n    product_id <span class=\"SQLKeyword\">NUMBER PRIMARY KEY</span><span class=\"SQLOperator\">,</span>\n    product_name <span class=\"SQLKeyword\">VARCHAR2</span>(<span class=\"SQLString\">100</span>) <span class=\"SQLKeyword\">NOT NULL</span><span class=\"SQLOperator\">,</span>\n    price <span class=\"SQLKeyword\">NUMBER</span>(<span class=\"SQLString\">10, 2</span>) <span class=\"SQLKeyword\">NOT NULL</span><span class=\"SQLOperator\">,</span>\n    stock_quantity <span class=\"SQLKeyword\">NUMBER NOT NULL</span>\n)<span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Create Customers Table</span>\n<span class=\"SQLKeyword\">CREATE TABLE</span> customers (\n    customer_id <span class=\"SQLKeyword\">NUMBER PRIMARY KEY</span><span class=\"SQLOperator\">,</span>\n    first_name <span class=\"SQLKeyword\">VARCHAR2</span>(<span class=\"SQLString\">50</span>) <span class=\"SQLKeyword\">NOT NULL</span><span class=\"SQLOperator\">,</span>\n    last_name <span class=\"SQLKeyword\">VARCHAR2</span>(<span class=\"SQLString\">50</span>) <span class=\"SQLKeyword\">NOT NULL</span><span class=\"SQLOperator\">,</span>\n    email <span class=\"SQLKeyword\">VARCHAR2</span>(<span class=\"SQLString\">100</span>) <span class=\"SQLKeyword\">NOT NULL UNIQUE</span><span class=\"SQLOperator\">,</span>\n    phone_number <span class=\"SQLKeyword\">VARCHAR2</span>(<span class=\"SQLString\">15</span>)\n)<span class=\"SQLOperator\">;</span> \n<span class=\"SQLKeyword\">CREATE INDEX</span> idx_customers_phone_number\n  <span class=\"SQLKeyword\">ON</span> customers(phone_number)<span class=\"SQLOperator\">;</span></pre>\n</div>\n            <!-- </ol> -->\n        </li>\n        <li><b>Save the File:</b> Save the SQL file with an appropriate name, such as <code>ecommerce_tables_v3.sql</code>.</li>\n        <li><b>Execute the Script:</b> Open the SQL file and click the <code>Run Script</code> button (or press <code>F5</code>) to execute the DDL statements.</li>\n        <li><b>Verify the Execution:</b> Use SQL queries to verify the tables and indexes have been created.</li>\n    <!-- </ol> -->\n    <h4 class=\"bold-maroon\">Verify Tables and Indexes</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> table_name\n<span class=\"SQLKeyword\">FROM</span>   all_tables\n<span class=\"SQLKeyword\">WHERE</span>  table_name <span class=\"SQLKeyword\">IN</span> ( <span class=\"SQLString\">'PRODUCTS'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'CUSTOMERS'</span> )<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">SELECT *</span>\n<span class=\"SQLKeyword\">FROM</span>   all_indexes\n<span class=\"SQLKeyword\">WHERE</span>  index_name <span class=\"SQLKeyword\">=</span> <span class=\"SQLString\">'IDX_CUSTOMERS_PHONE_NUMBER'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 45,
    "Question": "Write a query to find the top 5 products with the highest sales growth compared to the previous quarter.",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }.SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - PRODUCTS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PRODUCT_ID</th>\n                <th>PRODUCT_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Coffee Maker</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>PlayStation 5</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Headphones</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>eReader</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Cameras</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>6</td>\n                <td>Air Fryer</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>7</td>\n                <td>Vacuum Cleaners</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Input Data: Table - SALES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>SALE_ID</th>\n                <th>PRODUCT_ID</th>\n                <th>SALE_DATE</th>\n                <th>SALES_AMOUNT</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>1</td>\n                <td>01-15-2023 00:00:00</td>\n                <td>1500</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>1</td>\n                <td>04-15-2023 00:00:00</td>\n                <td>1800</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>2</td>\n                <td>01-20-2023 00:00:00</td>\n                <td>1000</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>2</td>\n                <td>04-20-2023 00:00:00</td>\n                <td>1100</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>3</td>\n                <td>01-25-2023 00:00:00</td>\n                <td>900</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>6</td>\n                <td>3</td>\n                <td>04-25-2023 00:00:00</td>\n                <td>1200</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>7</td>\n                <td>4</td>\n                <td>01-30-2023 00:00:00</td>\n                <td>500</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>8</td>\n                <td>4</td>\n                <td>04-30-2023 00:00:00</td>\n                <td>800</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>9</td>\n                <td>5</td>\n                <td>01-05-2023 00:00:00</td>\n                <td>2000</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>10</td>\n                <td>5</td>\n                <td>04-05-2023 00:00:00</td>\n                <td>2500</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>11</td>\n                <td>6</td>\n                <td>01-10-2023 00:00:00</td>\n                <td>1500</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>12</td>\n                <td>6</td>\n                <td>04-10-2023 00:00:00</td>\n                <td>1400</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>13</td>\n                <td>7</td>\n                <td>01-12-2023 00:00:00</td>\n                <td>700</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>14</td>\n                <td>7</td>\n                <td>04-12-2023 00:00:00</td>\n                <td>1000</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PRODUCT_NAME</th>\n                <th>PREVIOUS_SALES</th>\n                <th>CURRENT_SALES</th>\n                <th>SALES_GROWTH</th>\n                <th>SALES_GROWTH_PERCENTAGE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>Cameras</td>\n                <td>2000</td>\n                <td>2500</td>\n                <td>500</td>\n                <td>25</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>Headphones</td>\n                <td>900</td>\n                <td>1200</td>\n                <td>300</td>\n                <td>33.33</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>eReader</td>\n                <td>500</td>\n                <td>800</td>\n                <td>300</td>\n                <td>60</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>Coffee Maker</td>\n                <td>1500</td>\n                <td>1800</td>\n                <td>300</td>\n                <td>20</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>Vacuum Cleaners</td>\n                <td>700</td>\n                <td>1000</td>\n                <td>300</td>\n                <td>42.86</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <div class=\"scrollable-container\">\n        <pre class=\"SQLCode\"><span class=\"SQLComment\">-- SQL query to find the top 5 products with highest sales growth</span>\n        <span class=\"SQLKeyword\">SELECT</span> product_name<span class=\"SQLOperator\">,</span>\n        previous_sales<span class=\"SQLOperator\">,</span>\n        current_sales<span class=\"SQLOperator\">,</span>\n        ( current_sales - previous_sales )\n        <span class=\"SQLKeyword\">AS</span> sales_growth<span class=\"SQLOperator\">,</span>\n        <span class=\"SQLFunction\">Round</span>(((current_sales - previous_sales) / previous_sales) <span class=\"SQLOperator\">*</span> <span class=\"SQLString\">100</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">2</span>)\n        <span class=\"SQLKeyword\">AS</span>\n        sales_growth_percentage\n        <span class=\"SQLKeyword\">FROM</span>   (<span class=\"SQLKeyword\">SELECT</span> p.product_name<span class=\"SQLOperator\">,</span>\n                       <span class=\"SQLFunction\">Lag</span>(s.sales_amount)\n                         <span class=\"SQLKeyword\">OVER</span> (\n                           <span class=\"SQLKeyword\">PARTITION BY</span> s.product_id\n                           <span class=\"SQLKeyword\">ORDER BY</span> s.sale_date) <span class=\"SQLKeyword\">AS</span> previous_sales<span class=\"SQLOperator\">,</span>\n                       s.sales_amount            <span class=\"SQLKeyword\">AS</span> current_sales\n                <span class=\"SQLKeyword\">FROM</span>   sales s\n                       <span class=\"SQLKeyword\">JOIN</span> products p\n                         <span class=\"SQLKeyword\">ON</span> s.product_id <span class=\"SQLOperator\">=</span> p.product_id\n        <span class=\"SQLKeyword\">WHERE</span>  \n            s.sale_date <span class=\"SQLKeyword\">BETWEEN DATE</span> <span class=\"SQLString\">'2023-01-01'</span> <span class=\"SQLKeyword\">AND DATE</span> <span class=\"SQLString\">'2023-06-30'</span>)\n        <span class=\"SQLKeyword\">WHERE</span>  previous_sales <span class=\"SQLKeyword\">IS NOT NULL</span>\n        <span class=\"SQLKeyword\">ORDER BY</span> sales_growth <span class=\"SQLKeyword\">desc</span>\n        <span class=\"SQLKeyword\">FETCH first</span> <span class=\"SQLString\">5</span> <span class=\"SQLKeyword\">ROWS only</span><span class=\"SQLOperator\">;</span>\n        </pre>\n        </div>\n        <h4 class=\"bold-maroon\">Explanation:</h4>\n        <ul>\n            <li>\n                <strong>Main Query:</strong>\n                <ul>\n                    <li>Selects the following columns:\n                        <ul>\n                            <li><code>product_name</code>: The name of the product.</li>\n                            <li><code>previous_sales</code>: The sales amount of the previous period (based on sale date).</li>\n                            <li><code>current_sales</code>: The sales amount of the current period (based on sale date).</li>\n                            <li><code>sales_growth</code>: The absolute growth in sales, calculated as <code>current_sales - previous_sales</code>.</li>\n                            <li><code>sales_growth_percentage</code>: The percentage growth in sales, calculated as <code>Round(((current_sales - previous_sales) / previous_sales) * 100, 2)</code>.</li>\n                        </ul>\n                    </li>\n                </ul>\n            </li>\n            <li>\n                <strong>Subquery:</strong>\n                <ul>\n                    <li>Joins the <code>sales</code> table (alias <code>s</code>) with the <code>products</code> table (alias <code>p</code>) on <code>product_id</code> to retrieve product names associated with sales.</li>\n                    <li>Selects:\n                        <ul>\n                            <li><code>product_name</code>: The name of the product from the <code>products</code> table.</li>\n                            <li><code>previous_sales</code>: Uses the <code>LAG()</code> analytical function to get the sales amount from the previous sale period for the same product, ordered by <code>sale_date</code>.</li>\n                            <li><code>current_sales</code>: The sales amount of the current period.</li>\n                        </ul>\n                    </li>\n                    <li>Filters the results to include only sales data between January 1, 2023, and June 30, 2023, using the <code>WHERE</code> clause.</li>\n                </ul>\n            </li>\n            <li>\n                <strong>Filtering and Ordering:</strong>\n                <ul>\n                    <li>Filters the results to exclude rows where <code>previous_sales</code> is <code>NULL</code>, ensuring that only products with sales data in both periods are considered.</li>\n                    <li>Orders the results by <code>sales_growth</code> in descending order, so that the products with the highest sales growth appear first.</li>\n                    <li>Limits the results to the top 5 products using <code>FETCH FIRST 5 ROWS ONLY</code>.</li>\n                </ul>\n            </li>\n        </ul>\n        \n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 46,
    "Question": "What are constraints in Oracle Database? Provide examples.",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Constraints in Oracle Database</h4>\n    <p>Constraints in Oracle Database are rules applied to table columns to ensure data integrity and accuracy. These constraints restrict the type of data that can be inserted into a table. Oracle supports five types of constraints: primary key, foreign key, unique, not null, and check constraints.</p>\n    <h4 class=\"bold-maroon\">Types of Constraints and Examples</h4>\n    <h4 class=\"bold-blue\">1. Primary Key Constraint:</h4>\n    <p>Ensures that the column (or combination of columns) has unique values and that none of the values are null.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> customers (\n      customer_id <span class=\"SQLKeyword\">NUMBER PRIMARY KEY</span><span class=\"SQLOperator\">,</span>\n      customer_name <span class=\"SQLKeyword\">VARCHAR2</span>(<span class=\"SQLString\">100</span>) <span class=\"SQLKeyword\">NOT NULL</span>\n   )<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">2. Foreign Key Constraint:</h4>\n    <p>Ensures that the values in a column (or combination of columns) match values in another table's primary or unique key column.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> orders\n  (\n     order_id    <span class=\"SQLKeyword\">NUMBER PRIMARY KEY</span><span class=\"SQLOperator\">,</span>\n     customer_id <span class=\"SQLKeyword\">NUMBER</span><span class=\"SQLOperator\">,</span>\n     order_date  <span class=\"SQLKeyword\">DATE</span><span class=\"SQLOperator\">,</span>\n     <span class=\"SQLKeyword\">FOREIGN KEY</span> (customer_id) <span class=\"SQLKeyword\">REFERENCES</span> customers(customer_id)\n  )<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">3. Unique Constraint:</h4>\n    <p>Ensures that all values in a column (or combination of columns) are unique.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> employees (\n   employee_id <span class=\"SQLKeyword\">NUMBER PRIMARY KEY</span><span class=\"SQLOperator\">,</span>\n   email <span class=\"SQLKeyword\">VARCHAR2</span>(<span class=\"SQLString\">100</span>) <span class=\"SQLKeyword\">UNIQUE</span><span class=\"SQLOperator\">,</span>\n   phone_number <span class=\"SQLKeyword\">VARCHAR2</span>(<span class=\"SQLString\">20</span>)\n)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">4. Not Null Constraint:</h4>\n    <p>Ensures that a column cannot have null values.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> products (\n    product_id   <span class=\"SQLKeyword\">NUMBER PRIMARY KEY</span><span class=\"SQLOperator\">,</span>\n    product_name <span class=\"SQLKeyword\">VARCHAR2</span>(<span class=\"SQLString\">100</span>) <span class=\"SQLKeyword\">NOT NULL</span><span class=\"SQLOperator\">,</span>\n    price        <span class=\"SQLKeyword\">NUMBER NOT NULL</span>\n)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">5. Check Constraint:</h4>\n    <p>Ensures that all values in a column satisfy a specific condition.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> sales (\n    sale_id     <span class=\"SQLKeyword\">NUMBER PRIMARY KEY</span><span class=\"SQLOperator\">,</span>\n    product_id  <span class=\"SQLKeyword\">NUMBER</span><span class=\"SQLOperator\">,</span>\n    sale_date   <span class=\"SQLKeyword\">DATE</span><span class=\"SQLOperator\">,</span>\n    sale_amount <span class=\"SQLKeyword\">NUMBER CHECK</span> ( sale_amount <span class=\"SQLOperator\">&gt;</span> <span class=\"SQLString\">0</span> )\n)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Combined Example</h4>\n    <p>Here's a combined example that demonstrates multiple constraints within a single table creation statement:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> orders (\n    order_id    <span class=\"SQLKeyword\">NUMBER PRIMARY KEY</span><span class=\"SQLOperator\">,</span>\n    customer_id <span class=\"SQLKeyword\">NUMBER NOT NULL</span><span class=\"SQLOperator\">,</span>\n    product_id  <span class=\"SQLKeyword\">NUMBER NOT NULL</span><span class=\"SQLOperator\">,</span>\n    order_date  <span class=\"SQLKeyword\">DATE NOT NULL</span><span class=\"SQLOperator\">,</span>\n    quantity    <span class=\"SQLKeyword\">NUMBER CHECK</span> ( quantity <span class=\"SQLOperator\">&gt;</span> <span class=\"SQLString\">0</span> )<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLKeyword\">FOREIGN KEY</span> ( customer_id )\n        <span class=\"SQLKeyword\">REFERENCES</span> customers ( customer_id )<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLKeyword\">FOREIGN KEY</span> ( product_id )\n        <span class=\"SQLKeyword\">REFERENCES</span> products ( product_id )<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLKeyword\">UNIQUE</span> ( order_id<span class=\"SQLOperator\">,</span>\n             customer_id )\n)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>In this example:\n- <code>order_id</code> is a primary key, ensuring unique and non-null values.\n- <code>customer_id</code> and <code>product_id</code> are foreign keys, referencing the <code>customers</code> and <code>products</code> tables respectively.\n- <code>order_date</code> is a not-null column, ensuring that every order has a date.\n- <code>quantity</code> has a check constraint to ensure it is greater than 0.\n- The combination of <code>order_id</code> and <code>customer_id</code> must be unique.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 47,
    "Question": "What are composite primary keys and indexes?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Composite Primary Keys and Indexes:</h4>\n    <h4 class=\"bold-blue\">1. Composite Primary Keys:</h4>\n    <p>A composite primary key consists of two or more columns that together uniquely identify a row.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">ALTER TABLE</span> order_items\n  <span class=\"SQLKeyword\">ADD CONSTRAINT</span> pk_order_items <span class=\"SQLKeyword\">PRIMARY KEY</span> (order_id, product_id)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">2. Composite Indexes:</h4>\n    <p>A composite index is an index on two or more columns that optimizes queries filtering on multiple columns.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE INDEX</span> idx_order_product\n  <span class=\"SQLKeyword\">ON</span> orderdetails (orderid, productid)<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">SELECT *</span>\n<span class=\"SQLKeyword\">FROM</span>   orderdetails\n<span class=\"SQLKeyword\">WHERE</span>  orderid <span class=\"SQLKeyword\">=</span> <span class=\"SQLString\">1001</span>\n       <span class=\"SQLKeyword\">AND</span> productid <span class=\"SQLKeyword\">=</span> <span class=\"SQLString\">2002</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><b>Composite Primary Keys:</b> Useful when a single column cannot uniquely identify a row. They enforce uniqueness across multiple columns.</li>\n        <li><b>Composite Indexes:</b> Improve query performance by indexing multiple columns together, allowing efficient filtering and sorting.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 48,
    "Question": "What is the MERGE statement, and how do you use it in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>The MERGE statement in SQL is used to perform insert, update, or delete operations in a single statement. It is especially useful when synchronizing two tables. The MERGE statement allows conditional insert, update, or delete operations in a target table based on whether the rows match those in a source table.</p>\n    <h4 class=\"bold-maroon\">Input Data: Table - PRODUCTS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PRODUCT_ID</th>\n                <th>PRODUCT_NAME</th>\n                <th>CATEGORY</th>\n                <th>PRICE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Laptop</td>\n                <td>Electronics</td>\n                <td>1200</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Smartphone</td>\n                <td>Electronics</td>\n                <td>800</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Tablet</td>\n                <td>Electronics</td>\n                <td>500</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Input Data: Table - PRODUCTS_UPDATES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PRODUCT_ID</th>\n                <th>PRODUCT_NAME</th>\n                <th>CATEGORY</th>\n                <th>PRICE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Laptop</td>\n                <td>Electronics</td>\n                <td>1150</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>Smartwatch</td>\n                <td>Electronics</td>\n                <td>300</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">MERGE INTO</span> products p\n<span class=\"SQLKeyword\">USING</span> products_updates u\n<span class=\"SQLKeyword\">ON</span> (p.product_id <span class=\"SQLKeyword\">=</span> u.product_id)\n<span class=\"SQLKeyword\">WHEN MATCHED THEN</span>\n  <span class=\"SQLKeyword\">UPDATE SET</span> p.product_name <span class=\"SQLKeyword\">=</span> u.product_name<span class=\"SQLOperator\">,</span>\n             p.category <span class=\"SQLKeyword\">=</span> u.category<span class=\"SQLOperator\">,</span>\n             p.price <span class=\"SQLKeyword\">=</span> u.price\n<span class=\"SQLKeyword\">WHEN NOT MATCHED THEN</span>\n  <span class=\"SQLKeyword\">INSERT</span> (product_id<span class=\"SQLOperator\">,</span>\n          product_name<span class=\"SQLOperator\">,</span>\n          category<span class=\"SQLOperator\">,</span>\n          price)\n  <span class=\"SQLKeyword\">VALUES</span> (u.product_id<span class=\"SQLOperator\">,</span>\n          u.product_name<span class=\"SQLOperator\">,</span>\n          u.category<span class=\"SQLOperator\">,</span>\n          u.price)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Output: Table - PRODUCTS</h4>\n<div class=\"scrollable-container\">\n<table class=\"tg\">\n    <thead>\n        <tr>\n            <th>PRODUCT_ID</th>\n            <th>PRODUCT_NAME</th>\n            <th>CATEGORY</th>\n            <th>PRICE</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr class=\"input-row-even\">\n            <td>1</td>\n            <td>Laptop</td>\n            <td>Electronics</td>\n            <td>1150</td>\n        </tr>\n        <tr class=\"input-row-odd\">\n            <td>2</td>\n            <td>Smartphone</td>\n            <td>Electronics</td>\n            <td>800</td>\n        </tr>\n        <tr class=\"input-row-even\">\n            <td>3</td>\n            <td>Tablet</td>\n            <td>Electronics</td>\n            <td>500</td>\n        </tr>\n        <tr class=\"input-row-odd\">\n            <td>4</td>\n            <td>Smartwatch</td>\n            <td>Electronics</td>\n            <td>300</td>\n        </tr>\n    </tbody>\n        </table>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><b>MERGE INTO products p:</b> Specifies the target table <code>products</code> with an alias <code>p</code>.</li>\n        <li><b>USING products_updates u:</b> Specifies the source table <code>products_updates</code> with an alias <code>u</code>.</li>\n        <li><b>ON (p.product_id = u.product_id):</b> Defines the condition for matching rows between the target and source tables.</li>\n        <li><b>WHEN MATCHED THEN:</b> Specifies the action to take when a match is found. In this case, it updates the target table with the values from the source table.</li>\n        <li><b>WHEN NOT MATCHED THEN:</b> Specifies the action to take when no match is found. In this case, it inserts the new row into the target table.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 49,
    "Question": "What is a trigger in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n     <h4 class=\"bold-maroon\n\">Answer:</h4>\n    <h4 class=\"bold-blue\">&bull; Triggers in Oracle SQL</h4>\n    <p>A trigger in SQL is a stored procedure that automatically executes or \"fires\" when a specified event occurs in the database. These events can be DML operations (INSERT, UPDATE, DELETE) on a table or view, DDL operations (CREATE, ALTER, DROP), or database operations (LOGON, LOGOFF, STARTUP, SHUTDOWN). Triggers can be used to enforce complex business rules, maintain audit trails, replicate data, and more.</p>\n    <h4 class=\"bold-maroon\">Example 1: Maintaining an Audit Trail for Orders</h4>\n    <p>In an e-commerce application, it is crucial to maintain an audit trail of all order modifications. This helps in tracking changes and ensuring data integrity.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE OR REPLACE TRIGGER</span> trg_orders_audit\n  <span class=\"SQLKeyword\">AFTER UPDATE ON</span> orders\n  <span class=\"SQLKeyword\">FOR EACH ROW</span>\n<span class=\"SQLKeyword\">BEGIN</span>\n    <span class=\"SQLComment\">-- Check if the status of the order has changed</span>\n    <span class=\"SQLKeyword\">IF</span> :<span class=\"SQLKeyword\">OLD</span>.status != :<span class=\"SQLKeyword\">NEW</span>.status <span class=\"SQLKeyword\">THEN</span>\n<span class=\"SQLComment\">-- Insert a record into the orders_audit table \n-- with relevant information</span>\n      <span class=\"SQLKeyword\">INSERT INTO</span> orders_audit\n                  (order_id<span class=\"SQLOperator\">,</span>\n                   product_id<span class=\"SQLOperator\">,</span>\n                   user_id<span class=\"SQLOperator\">,</span>\n                   action<span class=\"SQLOperator\">,</span>\n                   action_date<span class=\"SQLOperator\">,</span>\n                   old_status<span class=\"SQLOperator\">,</span>\n                   new_status)\n      <span class=\"SQLKeyword\">VALUES</span>      ( :<span class=\"SQLKeyword\">OLD</span>.order_id<span class=\"SQLOperator\">,</span>\n                   :<span class=\"SQLKeyword\">OLD</span>.product_id<span class=\"SQLOperator\">,</span>\n                   :<span class=\"SQLKeyword\">OLD</span>.user_id<span class=\"SQLOperator\">,</span>\n                   <span class=\"SQLString\">'UPDATE'</span><span class=\"SQLOperator\">,</span>\n                   <span class=\"SQLFunction\">SYSDATE</span><span class=\"SQLOperator\">,</span>\n                   :<span class=\"SQLKeyword\">OLD</span>.status<span class=\"SQLOperator\">,</span>\n                   :<span class=\"SQLKeyword\">NEW</span>.status )<span class=\"SQLOperator\">;</span>\n    <span class=\"SQLKeyword\">END IF</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">END</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLOperator\">/</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li>The <code>trg_orders_audit</code> trigger is created to fire after an update operation on the <code>orders</code> table.</li>\n        <li>The trigger checks if the <code>status</code> of an order has changed.</li>\n        <li>If the status has changed, it inserts a record into the <code>orders_audit</code> table, capturing the old status, new status, and other relevant information.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Example 2: Automatic Recalculation of Stock Levels</h4>\n    <p>In an e-commerce application, it is important to keep track of stock levels whenever an order is placed or canceled.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE OR REPLACE TRIGGER</span> trg_update_stock\n  <span class=\"SQLKeyword\">AFTER INSERT OR DELETE ON</span> order_items\n  <span class=\"SQLKeyword\">FOR EACH ROW</span>\n<span class=\"SQLKeyword\">BEGIN</span>\n    <span class=\"SQLKeyword\">IF</span> <span class=\"SQLKeyword\">INSERTING THEN</span>\n<span class=\"SQLComment\">-- Decrease the stock quantity of the product \n-- when a new order item is inserted</span>\n      <span class=\"SQLKeyword\">UPDATE</span> products\n      <span class=\"SQLKeyword\">SET</span>    stock_quantity <span class=\"SQLKeyword\">=</span> stock_quantity <span class=\"SQLOperator\">-</span> :<span class=\"SQLKeyword\">NEW</span>.quantity\n      <span class=\"SQLKeyword\">WHERE</span>  product_id <span class=\"SQLKeyword\">=</span> :<span class=\"SQLKeyword\">NEW</span>.product_id<span class=\"SQLOperator\">;</span>\n    <span class=\"SQLKeyword\">ELSIF DELETING THEN</span>\n<span class=\"SQLComment\">-- Increase the stock quantity of the product \n-- when an order item is deleted</span>\n      <span class=\"SQLKeyword\">UPDATE</span> products\n      <span class=\"SQLKeyword\">SET</span>    stock_quantity <span class=\"SQLKeyword\">=</span> stock_quantity <span class=\"SQLOperator\">+</span> :<span class=\"SQLKeyword\">OLD</span>.quantity\n      <span class=\"SQLKeyword\">WHERE</span>  product_id <span class=\"SQLKeyword\">=</span> :<span class=\"SQLKeyword\">OLD</span>.product_id<span class=\"SQLOperator\">;</span>\n    <span class=\"SQLKeyword\">END IF</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">END</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLOperator\">/</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li>The <code>trg_update_stock</code> trigger is created to fire after an insert or delete operation on the <code>order_items</code> table.</li>\n        <li>If a new order item is inserted, the trigger decreases the stock quantity of the product.</li>\n        <li>If an order item is deleted (e.g., order cancellation), the trigger increases the stock quantity of the product.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 50,
    "Question": "What are the differences between a procedure and a function in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }@media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In Oracle SQL, both procedures and functions are subprograms that are stored and executed on the database server. However, there are key differences between the two in terms of their purpose, usage, and characteristics.</p>\n    <h4 class=\"bold-maroon\">Differences between Procedure and Function</h4>\n    <h4 class=\"bold-blue\">1. Purpose and Return Value</h4>\n    <ul>\n        <li><b>Function:</b> Designed to compute and return a single value. Functions must return a value using the <code>RETURN</code> statement.</li>\n        <li><b>Procedure:</b> Designed to perform an action but does not return a value. Procedures can return multiple/single values through output parameters.</li>\n    </ul>\n    <h4 class=\"bold-blue\">2. Usage</h4>\n    <ul>\n        <li><b>Function:</b> Can be used in SQL statements (e.g., SELECT, INSERT, UPDATE, DELETE) and can be called from other functions, procedures, or PL/SQL blocks.</li>\n        <li><b>Procedure:</b> Cannot be used in SQL statements directly but can be called from other packages, procedures, functions, or PL/SQL blocks.</li>\n    </ul>\n    <h4 class=\"bold-blue\">3. Syntax</h4>\n    <ul>\n        <li><b>Function:</b> Has a RETURN clause that specifies the data type of the return value.</li>\n        <li><b>Procedure:</b> Does not have a RETURN clause.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Examples in the E-commerce Industry</h4>\n    <h4 class=\"bold-blue\">1. Function Example</h4>\n    <p><b>Scenario:</b> Calculate the total price of items in a shopping cart, including tax.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE OR REPLACE FUNCTION</span> calculate_total_price(cart_id <span class=\"SQLKeyword\">IN NUMBER</span>)\n<span class=\"SQLKeyword\">RETURN NUMBER</span>\n<span class=\"SQLKeyword\">IS</span>\n  total_price <span class=\"SQLKeyword\">NUMBER</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">BEGIN</span>\n    <span class=\"SQLComment\">-- Calculate the total price including a 7% tax</span>\n    <span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">SUM</span>(item_price <span class=\"SQLOperator\">*</span> quantity) <span class=\"SQLOperator\">*</span> <span class=\"SQLString\">1.07</span>\n    <span class=\"SQLKeyword\">INTO</span>   total_price\n    <span class=\"SQLKeyword\">FROM</span>   shopping_cart\n    <span class=\"SQLKeyword\">WHERE</span>  cart_id <span class=\"SQLKeyword\">=</span> calculate_total_price.cart_id<span class=\"SQLOperator\">;</span>\n    <span class=\"SQLKeyword\">RETURN</span> total_price<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">END</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p><b>Usage:</b></p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> calculate_total_price(<span class=\"SQLString\">123</span>) <span class=\"SQLKeyword\">FROM</span> <span class=\"SQLString\">dual</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">2. Procedure Example</h4>\n    <p><b>Scenario:</b> Update the stock quantity of a product after an order is placed.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE OR REPLACE PROCEDURE</span> update_stock (\n    product_id    <span class=\"SQLKeyword\">IN NUMBER</span><span class=\"SQLOperator\">,</span>\n    quantity_sold <span class=\"SQLKeyword\">IN NUMBER</span>\n) <span class=\"SQLKeyword\">IS</span>\n<span class=\"SQLKeyword\">BEGIN</span>\n    <span class=\"SQLComment\">-- Update the stock quantity of the product</span>\n    <span class=\"SQLKeyword\">UPDATE</span> products\n    <span class=\"SQLKeyword\">SET</span>\n        stock_quantity <span class=\"SQLKeyword\">=</span> stock_quantity <span class=\"SQLOperator\">-</span> quantity_sold\n    <span class=\"SQLKeyword\">WHERE</span>\n        id <span class=\"SQLKeyword\">=</span> product_id<span class=\"SQLOperator\">;</span>\n    <span class=\"SQLFunction\">COMMIT</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">END</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p><b>Usage:</b></p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">BEGIN</span>\n   update_stock(<span class=\"SQLString\">101</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">2</span>)<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">END</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Summary:</h4>\n    <ul>\n        <li><b>Functions</b> are used for calculations and returning single values, making them useful in SQL queries.</li>\n        <li><b>Procedures</b> are used for executing business logic and performing actions that do not necessarily return values directly, such as updating records or performing batch processing.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 51,
    "Question": "What are aggregate functions in SQL, and how are they used?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html>\n<head>\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Aggregate functions in SQL perform calculations on multiple rows of a table and return a single result. They are commonly used with the <code>GROUP BY</code> clause to group rows that have the same values in specified columns into summary rows.</p>\n    <h4 class=\"bold-maroon\">Common Aggregate Functions</h4>\n    <ul>\n        <li><b>AVG()</b>: Calculates the average value of a numeric column.</li>\n        <li><b>COUNT()</b>: Counts the number of rows.</li>\n        <li><b>MAX()</b>: Returns the maximum value in a set of values.</li>\n        <li><b>MIN()</b>: Returns the minimum value in a set of values.</li>\n        <li><b>SUM()</b>: Calculates the sum of a numeric column.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Examples in the Banking Domain</h4>\n    <h4 class=\"bold-blue\">1. AVG() Example</h4>\n    <p><b>Scenario:</b> Calculate the average balance of all accounts in the bank.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">AVG</span>(balance) <span class=\"SQLKeyword\">AS</span> average_balance\n<span class=\"SQLKeyword\">FROM</span>   accounts<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">2. COUNT() Example</h4>\n    <p><b>Scenario:</b> Count the number of active loans in the bank.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">COUNT</span>(<span class=\"SQLKeyword\">*</span>) <span class=\"SQLKeyword\">AS</span> active_loans_count\n<span class=\"SQLKeyword\">FROM</span> loans\n<span class=\"SQLKeyword\">WHERE</span> status <span class=\"SQLKeyword\">=</span> <span class=\"SQLString\">'active'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">3. MAX() Example</h4>\n    <p><b>Scenario:</b> Find the highest transaction amount in a particular month.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">MAX</span>(amount) <span class=\"SQLKeyword\">AS</span> max_transaction_amount\n<span class=\"SQLKeyword\">FROM</span>   transactions\n<span class=\"SQLKeyword\">WHERE</span>  transaction_date <span class=\"SQLKeyword\">BETWEEN TO_DATE</span>(<span class=\"SQLString\">'2024-06-01'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span>)\n   <span class=\"SQLKeyword\">AND TO_DATE</span>(<span class=\"SQLString\">'2024-06-30'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span>)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">4. MIN() Example</h4>\n    <p><b>Scenario:</b> Find the minimum balance across all savings accounts.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">MIN</span>(balance) <span class=\"SQLKeyword\">AS</span> min_savings_balance\n<span class=\"SQLKeyword\">FROM</span> accounts\n<span class=\"SQLKeyword\">WHERE</span> account_type <span class=\"SQLKeyword\">=</span> <span class=\"SQLString\">'savings'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">5. SUM() Example</h4>\n    <p><b>Scenario:</b> Calculate the total amount of all deposits made in a specific branch.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">SUM</span>(amount) <span class=\"SQLKeyword\">AS</span> total_deposits\n<span class=\"SQLKeyword\">FROM</span> transactions\n<span class=\"SQLKeyword\">WHERE</span> transaction_type <span class=\"SQLKeyword\">=</span> <span class=\"SQLString\">'deposit'</span> <span class=\"SQLKeyword\">AND</span> branch_id <span class=\"SQLKeyword\">=</span> <span class=\"SQLString\">101</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Using Aggregate Functions with GROUP BY</h4>\n    <p>Aggregate functions are often used with the <code>GROUP BY</code> clause to provide summaries for groups of rows.</p>\n    <h4 class=\"bold-blue\">1. GROUP BY Example</h4>\n    <p><b>Scenario:</b> Calculate the total balance for each account type.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> account_type<span class=\"SQLOperator\">,</span> <span class=\"SQLFunction\">SUM</span>(balance) <span class=\"SQLKeyword\">AS</span> total_balance\n<span class=\"SQLKeyword\">FROM</span> accounts\n<span class=\"SQLKeyword\">GROUP BY</span> account_type<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">2. Another GROUP BY Example</h4>\n    <p><b>Scenario:</b> Count the number of transactions per customer.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> customer_id<span class=\"SQLOperator\">,</span> <span class=\"SQLFunction\">COUNT</span>(<span class=\"SQLKeyword\">*</span>) <span class=\"SQLKeyword\">AS</span> transaction_count\n<span class=\"SQLKeyword\">FROM</span> transactions\n<span class=\"SQLKeyword\">GROUP BY</span> customer_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 52,
    "Question": "What is the difference between RANK, DENSE_RANK, and ROW_NUMBER functions?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html>\n<head>\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In SQL, <code>RANK</code>, <code>DENSE_RANK</code>, and <code>ROW_NUMBER</code> are analytical functions used to rank or number rows within a result set. They are often used in conjunction with the <code>OVER()</code> clause to provide different types of rankings or row numbering.</p>\n    <h4 class=\"bold-maroon\">Differences Between RANK, DENSE_RANK, and ROW_NUMBER</h4>\n    <h4 class=\"bold-blue\">1. RANK</h4>\n    <ul>\n        <li>Assigns a unique rank to each distinct row within the partition of the result set.</li>\n        <li>If there are ties (rows with the same value), they receive the same rank, but the next rank(s) will be skipped.</li>\n        <li>Syntax: <code>RANK() OVER (PARTITION BY ... ORDER BY ...)</code></li>\n    </ul>\n    <h4 class=\"bold-blue\">2. DENSE_RANK</h4>\n    <ul>\n        <li>Similar to <code>RANK</code>, but it does not skip any ranks when there are ties.</li>\n        <li>Tied rows receive the same rank, and the next rank is the immediate next number.</li>\n        <li>Syntax: <code>DENSE_RANK() OVER (PARTITION BY ... ORDER BY ...)</code></li>\n    </ul>\n    <h4 class=\"bold-blue\">3. ROW_NUMBER</h4>\n    <ul>\n        <li>Assigns a unique number to each row within the partition of the result set, with no gaps.</li>\n        <li>No ties are handled; each row gets a distinct number.</li>\n        <li>Syntax: <code>ROW_NUMBER() OVER (PARTITION BY ... ORDER BY ...)</code></li>\n    </ul>\n    <h4 class=\"bold-maroon\">Input Data: Table - TRANSACTIONS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">TRANSACTION_ID</th>\n                <th class=\"tg-th\">CUSTOMER_ID</th>\n                <th class=\"tg-th\">AMOUNT</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">101</td>\n                <td class=\"tg-td\">100</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">102</td>\n                <td class=\"tg-td\">200</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">3</td>\n                <td class=\"tg-td\">101</td>\n                <td class=\"tg-td\">300</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">4</td>\n                <td class=\"tg-td\">103</td>\n                <td class=\"tg-td\">400</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">5</td>\n                <td class=\"tg-td\">101</td>\n                <td class=\"tg-td\">300</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">6</td>\n                <td class=\"tg-td\">102</td>\n                <td class=\"tg-td\">200</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Example Queries</h4>\n    <h4 class=\"bold-blue\">1. RANK</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> transaction_id<span class=\"SQLOperator\">,</span> customer_id<span class=\"SQLOperator\">,</span> amount<span class=\"SQLOperator\">,</span>\n       <span class=\"SQLFunction\">RANK</span>() <span class=\"SQLKeyword\">OVER</span> (<span class=\"SQLKeyword\">ORDER BY</span> amount <span class=\"SQLKeyword\">DESC</span>) <span class=\"SQLKeyword\">AS</span> rank\n<span class=\"SQLKeyword\">FROM</span> transactions<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">TRANSACTION_ID</th>\n                <th class=\"tg-th\">CUSTOMER_ID</th>\n                <th class=\"tg-th\">AMOUNT</th>\n                <th class=\"tg-th\">RANK</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td class=\"tg-td\">4</td>\n                <td class=\"tg-td\">103</td>\n                <td class=\"tg-td\">400</td>\n                <td class=\"tg-td\">1</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">3</td>\n                <td class=\"tg-td\">101</td>\n                <td class=\"tg-td\">300</td>\n                <td class=\"tg-td\">2</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">5</td>\n                <td class=\"tg-td\">101</td>\n                <td class=\"tg-td\">300</td>\n                <td class=\"tg-td\">2</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">102</td>\n                <td class=\"tg-td\">200</td>\n                <td class=\"tg-td\">4</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">6</td>\n                <td class=\"tg-td\">102</td>\n                <td class=\"tg-td\">200</td>\n                <td class=\"tg-td\">4</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">101</td>\n                <td class=\"tg-td\">100</td>\n                <td class=\"tg-td\">6</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">2. DENSE_RANK</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> transaction_id<span class=\"SQLOperator\">,</span>\n       customer_id<span class=\"SQLOperator\">,</span>\n       amount<span class=\"SQLOperator\">,</span>\n       <span class=\"SQLFunction\">DENSE_RANK</span>()\n         <span class=\"SQLKeyword\">OVER</span> (\n           <span class=\"SQLKeyword\">ORDER BY</span> amount <span class=\"SQLKeyword\">DESC</span>) <span class=\"SQLKeyword\">AS</span> dense_rank\n<span class=\"SQLKeyword\">FROM</span>   transactions<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">TRANSACTION_ID</th>\n                <th class=\"tg-th\">CUSTOMER_ID</th>\n                <th class=\"tg-th\">AMOUNT</th>\n                <th class=\"tg-th\">DENSE_RANK</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td class=\"tg-td\">4</td>\n                <td class=\"tg-td\">103</td>\n                <td class=\"tg-td\">400</td>\n                <td class=\"tg-td\">1</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">3</td>\n                <td class=\"tg-td\">101</td>\n                <td class=\"tg-td\">300</td>\n                <td class=\"tg-td\">2</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">5</td>\n                <td class=\"tg-td\">101</td>\n                <td class=\"tg-td\">300</td>\n                <td class=\"tg-td\">2</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">102</td>\n                <td class=\"tg-td\">200</td>\n                <td class=\"tg-td\">3</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">6</td>\n                <td class=\"tg-td\">102</td>\n                <td class=\"tg-td\">200</td>\n                <td class=\"tg-td\">3</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">101</td>\n                <td class=\"tg-td\">100</td>\n                <td class=\"tg-td\">4</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">3. ROW_NUMBER</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> transaction_id<span class=\"SQLOperator\">,</span>\n       customer_id<span class=\"SQLOperator\">,</span>\n       amount<span class=\"SQLOperator\">,</span>\n       <span class=\"SQLFunction\">ROW_NUMBER</span>()\n         <span class=\"SQLKeyword\">OVER</span> (\n           <span class=\"SQLKeyword\">ORDER BY</span> amount <span class=\"SQLKeyword\">DESC</span>) <span class=\"SQLKeyword\">AS</span> row_num\n<span class=\"SQLKeyword\">FROM</span>   transactions<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">TRANSACTION_ID</th>\n                <th class=\"tg-th\">CUSTOMER_ID</th>\n                <th class=\"tg-th\">AMOUNT</th>\n                <th class=\"tg-th\">ROW_NUM</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td class=\"tg-td\">4</td>\n                <td class=\"tg-td\">103</td>\n                <td class=\"tg-td\">400</td>\n                <td class=\"tg-td\">1</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">3</td>\n                <td class=\"tg-td\">101</td>\n                <td class=\"tg-td\">300</td>\n                <td class=\"tg-td\">2</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">5</td>\n                <td class=\"tg-td\">101</td>\n                <td class=\"tg-td\">300</td>\n                <td class=\"tg-td\">3</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">102</td>\n                <td class=\"tg-td\">200</td>\n                <td class=\"tg-td\">4</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">6</td>\n                <td class=\"tg-td\">102</td>\n                <td class=\"tg-td\">200</td>\n                <td class=\"tg-td\">5</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">101</td>\n                <td class=\"tg-td\">100</td>\n                <td class=\"tg-td\">6</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Summary:</h4>\n    <ul>\n        <li><b>RANK</b>: Useful when you want to know the position of each row with ties resulting in skipped ranks.</li>\n        <li><b>DENSE_RANK</b>: Useful when you want to know the position of each row with ties but without skipping ranks.</li>\n        <li><b>ROW_NUMBER</b>: Useful when you need a unique sequential number for each row, regardless of ties.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 53,
    "Question": "How do you use the \"SUBSTR\" row-level function in Oracle SQL, and can you provide some different scenarios?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html>\n<head>\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #B22222;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>The <code>SUBSTR</code> function in Oracle SQL is used to extract a substring from a string. It has the following syntax:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SUBSTR</span>(string, start_position, length)\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Syntax Components</h4>\n    <ul>\n        <li><b>string</b>: The source string.</li>\n        <li><b>start_position</b>: The starting position of the substring. The position is 1-based, meaning that the first character of the string is at position 1.</li>\n        <li><b>length</b>: The number of characters to extract. If omitted, the substring will start from the <code>start_position</code> to the end of the string.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Different Scenarios</h4>\n    <h4 class=\"bold-blue\">1. Extracting the First Name</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">SUBSTR</span>(<span class=\"SQLString\">'John Cena'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">1</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">4</span>) <span class=\"SQLKeyword\">AS</span> first_name\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">FIRST_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td class=\"tg-td\">John</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">2. Extracting the Last Name</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">SUBSTR</span>(<span class=\"SQLString\">'John Cena'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">6</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">4</span>) <span class=\"SQLKeyword\">AS</span> last_name\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">LAST_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td class=\"tg-td\">Cena</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">3. Extracting the Last Three Characters</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">SUBSTR</span>(<span class=\"SQLString\">'The Undertaker'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">-3</span>) <span class=\"SQLKeyword\">AS</span> last_three_chars\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">LAST_THREE_CHARS</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td class=\"tg-td\">ker</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">4. Extracting a Middle Name/Part</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">SUBSTR</span>(<span class=\"SQLString\">'Bret The Hitman Hart'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">6</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">3</span>) <span class=\"SQLKeyword\">AS</span> middle_part\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">MIDDLE_PART</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td class=\"tg-td\">The</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">5. Extracting with a Dynamic Length</h4>\n    <p><b>Extract \"Cold\" starting from position 7</b></p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">SUBSTR</span>(<span class=\"SQLString\">'Stone Cold Steve Austin'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">7</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">4</span>) <span class=\"SQLKeyword\">AS</span> nickname\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">NICKNAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td class=\"tg-td\">Cold</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">6. Extracting Substring from the End</h4>\n    <p><b>Extract \"Orton\" using negative starting position</b></p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">SUBSTR</span>(<span class=\"SQLString\">'Randy Orton'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">-5</span>) <span class=\"SQLKeyword\">AS</span> last_name\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">LAST_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td class=\"tg-td\">Orton</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">7. Extracting a Single Character</h4>\n    <p><b>Extract the 5th character</b></p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">SUBSTR</span>(<span class=\"SQLString\">'Hulk Hogan'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">5</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">1</span>) <span class=\"SQLKeyword\">AS</span> fifth_char\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">FIFTH_CHAR</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td class=\"tg-td\">H</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 54,
    "Question": "How do you use the \"INSTR\" row-level function in Oracle SQL, and can you provide some different scenarios?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html>\n<head>\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>The <code>INSTR</code> function in Oracle SQL searches for a substring within a string and returns its position. If the substring is not found, it returns 0. The function can also specify which occurrence of the substring to find and the starting position for the search.</p>\n    <h4 class=\"bold-maroon\">Syntax</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">INSTR</span>(string, substring [, start_position [, occurrence]])\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Syntax Components</h4>\n    <ul>\n        <li><b>string</b>: The string to search within.</li>\n        <li><b>substring</b>: The substring to search for.</li>\n        <li><b>start_position</b>: (Optional) The position in the string where the search starts. Default is 1.</li>\n        <li><b>occurrence</b>: (Optional) Specifies which occurrence of the substring to search for. Default is 1.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Different Scenarios</h4>\n    <h4 class=\"bold-blue\">1. Finding the Position of a Substring</h4>\n    <p><b>Query:</b> Find the position of the substring \"Cena\".</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">INSTR</span>(<span class=\"SQLString\">'John Cena'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'Cena'</span>) <span class=\"SQLKeyword\">AS</span> position\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">POSITION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td class=\"tg-td\">6</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">2. Finding the Position from a Specified Start Position</h4>\n    <p><b>Query:</b> Find the position of the substring \"e\" starting from position 5.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">INSTR</span>(<span class=\"SQLString\">'The Undertaker'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'e'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">5</span>) <span class=\"SQLKeyword\">AS</span> position\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">POSITION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td class=\"tg-td\">8</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">3. Finding the Second Occurrence of a Substring</h4>\n    <p><b>Query:</b> Find the position of the second occurrence of the substring \"t\".</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">INSTR</span>(<span class=\"SQLString\">'Bret The Hitman Hart'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'t'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">1</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">2</span>) <span class=\"SQLKeyword\">AS</span> position\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">POSITION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td class=\"tg-td\">12</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">4. Finding a Substring That Does Not Exist</h4>\n    <p><b>Query:</b> Find the position of the substring \"Rock\".</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">INSTR</span>(<span class=\"SQLString\">'Stone Cold Steve Austin'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'Rock'</span>) <span class=\"SQLKeyword\">AS</span> position\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">POSITION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td class=\"tg-td\">0</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">5. Finding the Position of a Space Character</h4>\n    <p><b>Query:</b> Find the position of the first space character.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">INSTR</span>(<span class=\"SQLString\">'Randy Orton'</span><span class=\"SQLOperator\n\">,</span> <span class=\"SQLString\">' '</span>) <span class=\"SQLKeyword\">AS</span> position\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">POSITION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td class=\"tg-td\">6</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">6. Finding the Position of a Substring Starting from a Specific Position</h4>\n    <p><b>Query:</b> Find the position of the substring \"H\" starting from position 2.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">INSTR</span>(<span class=\"SQLString\">'Hulk Hogan'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'H'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">2</span>) <span class=\"SQLKeyword\">AS</span> position\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">POSITION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td class=\"tg-td\">6</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">7. Finding the Last Occurrence of a Substring</h4>\n    <p><b>Query:</b> Find the position of the last occurrence of the substring \"e\".</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">INSTR</span>(<span class=\"SQLString\">'The Rock'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'e'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">-1</span>) <span class=\"SQLKeyword\">AS</span> position\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">POSITION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td class=\"tg-td\">3</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 55,
    "Question": "In which scenario would you use \"SUBSTR\" and \"INSTR\" together?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html>\n<head>\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Using <code>SUBSTR</code> and <code>INSTR</code> together in Oracle SQL can be particularly useful when you need to extract a specific part of a string that is located between known delimiters or when you need to dynamically determine the position and length of the substring to extract.</p>\n    <h4 class=\"bold-maroon\">Scenario: Extracting a Middle Name</h4>\n    <p>Suppose you have a table of customer names where the names are stored in the format \"First Middle Last\", and you want to extract the middle name.</p>\n    <h4 class=\"bold-maroon\">Input Data: Table - CUSTOMERS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">CUSTOMER_ID</th>\n                <th class=\"tg-th\">CUSTOMER_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">John Felix Cena</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">Mark William Calaway</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">3</td>\n                <td class=\"tg-td\">Terry Eugene Bollea</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Query to Extract the Middle Name</h4>\n    <ol>\n        <li><b>Use <code>INSTR</code> to Find the Positions of the Spaces</b>:\n            <ul>\n                <li>Find the position of the first space.</li>\n                <li>Find the position of the second space.</li>\n            </ul>\n        </li>\n        <li><b>Use <code>SUBSTR</code> to Extract the Middle Name</b>:\n            <ul>\n                <li>Use the positions obtained from <code>INSTR</code> to determine the start position and length for <code>SUBSTR</code>.</li>\n            </ul>\n        </li>\n    </ol>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> customer_id<span class=\"SQLOperator\">,</span>\n   customer_name<span class=\"SQLOperator\">,</span>\n   <span class=\"SQLFunction\">SUBSTR</span>(customer_name<span class=\"SQLOperator\">,</span> <span class=\"SQLFunction\">INSTR</span>(customer_name<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">' '</span>) <span class=\"SQLOperator\">+</span> <span class=\"SQLString\">1</span><span class=\"SQLOperator\">,</span>\n   <span class=\"SQLFunction\">INSTR</span>(customer_name<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">' '</span><span class=\"SQLOperator\">,</span> <span class=\"SQLFunction\">INSTR</span>(customer_name<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">' '</span>) <span class=\"SQLOperator\">+</span> <span class=\"SQLString\">1</span>)\n   <span class=\"SQLOperator\">-</span>\n   <span class=\"SQLFunction\">INSTR</span>(customer_name<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">' '</span>)\n   <span class=\"SQLOperator\">-</span> <span class=\"SQLString\">1</span>) <span class=\"SQLKeyword\">AS</span> middle_name\n<span class=\"SQLKeyword\">FROM</span>   customers<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><code>INSTR(customer_name, ' ') + 1</code>: Finds the start position of the middle name by locating the first space and adding 1.</li>\n        <li><code>INSTR(customer_name, ' ', INSTR(customer_name, ' ') + 1)</code>: Finds the position of the second space, starting the search just after the first space.</li>\n        <li><code>INSTR(customer_name, ' ', INSTR(customer_name, ' ') + 1) - INSTR(customer_name, ' ') - 1</code>: Calculates the length of the middle name by subtracting the position of the first space from the position of the second space and subtracting 1 for the space itself.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">CUSTOMER_ID</th>\n                <th class=\"tg-th\">CUSTOMER_NAME</th>\n                <th class=\"tg-th\">MIDDLE_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">John Felix Cena</td>\n                <td class=\"tg-td\">Felix</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">Mark William Calaway</td>\n                <td class=\"tg-td\">William</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">3</td>\n                <td class=\"tg-td\">Terry Eugene Bollea</td>\n                <td class=\"tg-td\">Eugene</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Another Scenario: Extracting Domain from Email Addresses</h4>\n    <p>Suppose you have a table of email addresses, and you want to extract the domain part of the email addresses (everything after the <code>@</code> symbol).</p>\n    <h4 class=\"bold-maroon\">Input Data: Table - EMAIL_ADDRESSES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">EMAIL_ID</th>\n                <th class=\"tg-th\">EMAIL</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">john.cena@aityl.com</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">undertaker@wwe.com</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">3</td>\n                <td class=\"tg-td\">hogan@hulkamania.com</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Query to Extract the Domain</h4>\n    <ol>\n        <li><b>Use <code>INSTR</code> to Find the Position of the <code>@</code> Symbol</b>:\n            <ul>\n                <li>Find the position of the <code>@</code> symbol.</li>\n            </ul>\n        </li>\n        <li><b>Use <code>SUBSTR</code> to Extract the Domain</b>:\n            <ul>\n                <li>Use the position obtained from <code>INSTR</code> to determine the start position for <code>SUBSTR</code>.</li>\n            </ul>\n        </li>\n    </ol>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    email_id<span class=\"SQLOperator\">,</span>\n    email<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLFunction\">SUBSTR</span>(email<span class=\"SQLOperator\">,</span> <span class=\"SQLFunction\">INSTR</span>(email<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'@'</span>)\n <span class=\"SQLOperator\">+</span> <span class=\"SQLString\">1</span>) <span class=\"SQLKeyword\">AS</span>\n       domain\n<span class=\"SQLKeyword\">FROM</span>\n    email_addresses<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><code>INSTR(email, '@') + 1</code>: Finds the start position of the domain by locating the <code>@</code> symbol and adding 1.</li>\n        <li><code>SUBSTR(email, INSTR(email, '@') + 1)</code>: Extracts the substring starting from the position after the <code>@</code> symbol to the end of the string.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">EMAIL_ID</th>\n                <th class=\"tg-th\">EMAIL</th>\n                <th class=\"tg-th\">DOMAIN</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">john.cena@aityl.com</td>\n                <td class=\"tg-td\">aityl.com</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">undertaker@wwe.com</td>\n                <td class=\"tg-td\">wwe.com</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">3</td>\n                <td class=\"tg-td\">hogan@hulkamania.com</td>\n                <td class=\"tg-td\">hulkamania.com</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 56,
    "Question": "How do you use the \"REGEXP_LIKE\" function in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>The <code>REGEXP_LIKE</code> function in Oracle SQL is used to perform regular expression matching. It evaluates whether a string matches a specified regular expression pattern.</p>\n    <h4 class=\"bold-maroon\">Syntax</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLFunction\">REGEXP_LIKE</span>(string<span class=\"SQLOperator\">,</span> pattern<span class=\"SQLOperator\">,</span> [match_parameter])</pre>\n</div>\n    <ul>\n        <li><strong>string</strong>: The string to be searched.</li>\n        <li><strong>pattern</strong>: The regular expression pattern to match.</li>\n        <li><strong>match_parameter</strong> (optional): Modifiers such as 'i' for case-insensitive matching.</li>\n    </ul>\n    <h4 class=\"bold-blue\">Examples Using <code>REGEXP_LIKE</code> in the <code>WHERE</code> Clause</h4>\n    <h4 class=\"bold-blue\">1. Basic Matching: Select rows where the string contains the word \"Oracle\".</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of a basic match using REGEXP_LIKE.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLString\">'Oracle Database'</span> <span class=\"SQLKeyword\">AS</span> field\n<span class=\"SQLKeyword\">FROM</span> dual\n<span class=\"SQLKeyword\">WHERE</span> <span class=\"SQLFunction\">REGEXP_LIKE</span>(<span class=\"SQLString\">'Oracle Database'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'Oracle'</span>)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>FIELD</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>Oracle Database</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">2. Case-Insensitive Matching: Select rows where the string contains the word \"oracle\" regardless of case.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of case-insensitive match using REGEXP_LIKE.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLString\">'oracle database'</span> <span class=\"SQLKeyword\">AS</span> field\n<span class=\"SQLKeyword\">FROM</span> dual\n<span class=\"SQLKeyword\">WHERE</span> <span class=\"SQLFunction\">REGEXP_LIKE</span>(<span class=\"SQLString\">'oracle database'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'Oracle'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'i'</span>)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>FIELD</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>oracle database</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">3. Matching Digits: Select rows where the string contains any digits.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of matching digits using REGEXP_LIKE.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLString\">'Version 19c'</span> <span class=\"SQLKeyword\">AS</span> field\n<span class=\"SQLKeyword\">FROM</span> dual\n<span class=\"SQLKeyword\">WHERE</span> <span class=\"SQLFunction\">REGEXP_LIKE</span>(<span class=\"SQLString\">'Version 19c'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'\\d'</span>)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>FIELD</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>Version 19c</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">4. Matching Start of String: Select rows where the string starts with \"Hello\".</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of matching start of string using REGEXP_LIKE.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLString\">'Hello World'</span> <span class=\"SQLKeyword\">AS</span> field\n<span class=\"SQLKeyword\">FROM</span> dual\n<span class=\"SQLKeyword\">WHERE</span> <span class=\"SQLFunction\">REGEXP_LIKE</span>(<span class=\"SQLString\">'Hello World'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'^Hello'</span>)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>FIELD</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>Hello World</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">5. Matching End of String: Select rows where the string ends with \"SQL\".</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of matching end of string using REGEXP_LIKE.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLString\">'Learning SQL'</span> <span class=\"SQLKeyword\">AS</span> field\n<span class=\"SQLKeyword\">FROM</span> dual\n<span class=\"SQLKeyword\">WHERE</span> <span class=\"SQLFunction\">REGEXP_LIKE</span>(<span class=\"SQLString\">'Learning SQL'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'SQL$'</span>)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>FIELD</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>Learning SQL</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">6. Matching Any Character: Select rows where the string contains \"a\", \"b\", or \"c\".</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of matching any character using REGEXP_LIKE.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLString\">'abc123'</span> <span class=\"SQLKeyword\">AS</span> field\n<span class=\"SQLKeyword\">FROM</span> dual\n<span class=\"SQLKeyword\">WHERE</span> <span class=\"SQLFunction\">REGEXP_LIKE</span>(<span class=\"SQLString\">'abc123'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'[abc]'</span>)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>FIELD</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>abc123</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">7. Matching Consecutive Characters: Select rows where the string contains three consecutive digits.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of matching consecutive characters using REGEXP_LIKE.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLString\">'Year 2024'</span> <span class=\"SQLKeyword\">AS</span> field\n<span class=\"SQLKeyword\">FROM</span> dual\n<span class=\"SQLKeyword\">WHERE</span> <span class=\"SQLFunction\">REGEXP_LIKE</span>(<span class=\"SQLString\">'Year 2024'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'\\d{3}'</span>)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>FIELD</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>Year 2024</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">Example with a Table</h4>\n    <p>Suppose there is a table called <code>PEOPLE</code> with the following structure:</p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PERSON_ID</th>\n                <th>FULL_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>John Cena</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Mark Calaway</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Terry Bollea</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>Steve Austin</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">Select Rows Based on Different Criteria</h4>\n    <h4 class=\"bold-blue\">1. Names Containing 'a'</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of matching names containing 'a' using REGEXP_LIKE.</span>\n<span class=\"SQLKeyword\">SELECT</span> person_id<span class=\"SQLOperator\">,</span> full_name\n<span class=\"SQLKeyword\">FROM</span> people\n<span class=\"SQLKeyword\">WHERE</span> <span class=\"SQLFunction\">REGEXP_LIKE</span>(full_name<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'a'</span>)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PERSON_ID</th>\n                <th>FULL_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>2</td>\n                <td>Mark Calaway</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>3</td>\n                <td>Terry Bollea</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>4</td>\n                <td>Steve Austin</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">2. Names Starting with 'S'</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of matching names starting with 'S' using REGEXP_LIKE.</span>\n<span class=\"SQLKeyword\">SELECT</span> person_id<span class=\"SQLOperator\">,</span> full_name\n<span class=\"SQLKeyword\">FROM</span> people\n<span class=\"SQLKeyword\">WHERE</span> <span class=\"SQLFunction\">REGEXP_LIKE</span>(full_name<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'^S'</span>)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PERSON_ID</th>\n                <th>FULL_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>4</td>\n                <td>Steve Austin</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">3. Names Ending with 'a'</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of matching names ending with 'a' using REGEXP_LIKE.</span>\n<span class=\"SQLKeyword\">SELECT</span> person_id<span class=\"SQLOperator\">,</span> full_name\n<span class=\"SQLKeyword\">FROM</span> people\n<span class=\"SQLKeyword\">WHERE</span> <span class=\"SQLFunction\">REGEXP_LIKE</span>(full_name<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'a$'</span>)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PERSON_ID</th>\n                <th>FULL_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>John Cena</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Mark Calaway</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Terry Bollea</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">4. Names Containing 'e' in Case-Insensitive Manner</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of case-insensitive match for names \n-- containing 'e' using REGEXP_LIKE.</span>\n<span class=\"SQLKeyword\">SELECT</span> person_id<span class=\"SQLOperator\">,</span> full_name\n<span class=\"SQLKeyword\">FROM</span> people\n<span class=\"SQLKeyword\">WHERE</span> <span class=\"SQLFunction\">REGEXP_LIKE</span>(full_name<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'e'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'i'</span>)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PERSON_ID</th>\n                <th>FULL_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Terry Bollea</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>Steve Austin</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 57,
    "Question": "How do you use the \"REGEXP_INSTR\" function in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>The <code>REGEXP_INSTR</code> function in Oracle SQL enables advanced substring search within strings using regular expressions. It provides enhanced pattern matching capabilities compared to the standard <code>INSTR</code> function.</p>\n    <h4 class=\"bold-maroon\">Syntax</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLFunction\">REGEXP_INSTR</span>(string<span class=\"SQLOperator\">,</span> pattern <span class=\"SQLSQLOperator\">,</span> [start_position <span class=\"SQLSQLOperator\">,</span> nth_appearance <span class=\"SQLSQLOperator\">,</span> return_option <span class=\"SQLSQLOperator\">,</span> match_parameter <span class=\"SQLSQLOperator\">,</span> sub_expression])</pre>\n</div>\n    <ul>\n        <li><strong>string</strong>: The string to search within.</li>\n        <li><strong>pattern</strong>: The regular expression pattern to search for.</li>\n        <li><strong>start_position</strong>: (Optional) The position in the string where the search starts. Default is 1.</li>\n        <li><strong>nth_appearance</strong>: (Optional) Specifies which occurrence of the pattern to search for. Default is 1.</li>\n        <li><strong>return_option</strong>: (Optional) Specifies whether to return the position of the beginning or end of the match. 0 (default) returns the position of the beginning, and 1 returns the position of the end.</li>\n        <li><strong>match_parameter</strong>: (Optional) A text literal that controls the matching behavior. For example, 'i' makes the match case-insensitive.</li>\n        <li><strong>sub_expression</strong>: (Optional) Specifies which sub-expression in the pattern to use.</li>\n    </ul>\n    <h4 class=\"bold-blue\">Examples Using <code>REGEXP_INSTR</code></h4>\n    <h4 class=\"bold-blue\">1. Basic Matching: Find the position of the substring \"Database\" in the string \"Oracle Database 19c\".</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of basic match using REGEXP_INSTR.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">REGEXP_INSTR</span>(<span class=\"SQLString\">'Oracle Database 19c'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'Database'</span>) <span class=\"SQLKeyword\">AS</span> position\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>POSITION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>8</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">2. Case-Insensitive Matching: Find the position of the substring \"19c\" in the string \"Oracle Database 19c\" regardless of case.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of case-insensitive match using REGEXP_INSTR.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">REGEXP_INSTR</span>(<span class=\"SQLString\">'Oracle Database 19c'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'19C'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">1</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">1</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">0</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'i'</span>) <span class=\"SQLKeyword\">AS</span> position\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>POSITION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>17</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">3. Matching Digits: Find the position of the first digit in the string \"Version 12c\".</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of matching digits using REGEXP_INSTR.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">REGEXP_INSTR</span>(<span class=\"SQLString\">'Version 12c'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'\\d'</span>) <span class=\"SQLKeyword\">AS</span> position\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>POSITION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>9</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">4. Matching Start of String: Find the position of the substring \"Hello\" at the start of the string \"Hello World\".</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of matching start of string using REGEXP_INSTR.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">REGEXP_INSTR</span>(<span class=\"SQLString\">'Hello World'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'^Hello'</span>) <span class=\"SQLKeyword\">AS</span> position\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>POSITION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">5. Matching End of String: Find the position of the substring \"Interview\" at the end of the string \"Preparing SQL Interview\".</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of matching end of string using REGEXP_INSTR.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">REGEXP_INSTR</span>(<span class=\"SQLString\">'Preparing SQL Interview'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'Interview$'</span>) <span class=\"SQLKeyword\">AS</span> position\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>POSITION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>15</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">6. Matching Any Character: Find the position of the first occurrence of \"b\", or \"c\" in the string \"abc123\".</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of matching any character using REGEXP_INSTR.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">REGEXP_INSTR</span>(<span class=\"SQLString\">'abc123'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'[bc]'</span>) <span class=\"SQLKeyword\">AS</span> position\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>POSITION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>2</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">7. Matching Consecutive Characters: Find the position of three consecutive digits in the string \"Year 2024\".</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of matching consecutive characters using REGEXP_INSTR.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">REGEXP_INSTR</span>(<span class=\"SQLString\">'Year 2024'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'\\d{3}'</span>) <span class=\"SQLKeyword\">AS</span> position\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>POSITION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>6</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 58,
    "Question": "How do you use the \"REGEXP_SUBSTR\" function in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>The <code>REGEXP_SUBSTR</code> function in Oracle SQL is used to search a string for a regular expression pattern and return the substring that matches the pattern. This function provides advanced pattern matching capabilities and is useful for extracting specific parts of a string based on complex criteria.</p>\n    <h4 class=\"bold-maroon\">Syntax</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLFunction\">REGEXP_SUBSTR</span>(string<span class=\"SQLOperator\">,</span> pattern <span class=\"SQLSQLOperator\">,</span> [start_position <span class=\"SQLSQLOperator\">,</span> nth_appearance <span class=\"SQLSQLOperator\">,</span> match_parameter <span class=\"SQLSQLOperator\">,</span> sub_expression])</pre>\n</div>\n    <ul>\n        <li><strong>string</strong>: The string to search within.</li>\n        <li><strong>pattern</strong>: The regular expression pattern to search for.</li>\n        <li><strong>start_position</strong>: (Optional) The position in the string where the search starts. Default is 1.</li>\n        <li><strong>nth_appearance</strong>: (Optional) Specifies which occurrence of the pattern to search for. Default is 1.</li>\n        <li><strong>match_parameter</strong>: (Optional) A text literal that controls the matching behavior. For example, 'i' makes the match case-insensitive.</li>\n        <li><strong>sub_expression</strong>: (Optional) Specifies which sub-expression in the pattern to use.</li>\n    </ul>\n    <h4 class=\"bold-blue\">Examples Using <code>REGEXP_SUBSTR</code></h4>\n    <h4 class=\"bold-blue\">1. Basic Matching: Extract the word \"19c\" from the string \"Oracle Database 19c\".</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of basic matching using REGEXP_SUBSTR.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">REGEXP_SUBSTR</span>(<span class=\"SQLString\">'Oracle Database 19c'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'19c'</span>) <span class=\"SQLKeyword\">AS</span> extracted_word\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EXTRACTED_WORD</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>19c</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">2. Case-Insensitive Matching: Extract the word \"database\" from the string \"Oracle Database\" regardless of case.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of case-insensitive match using REGEXP_SUBSTR.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">REGEXP_SUBSTR</span>(<span class=\"SQLString\">'Oracle Database'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'database'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">1</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">1</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'i'</span>) <span class=\"SQLKeyword\">AS</span> extracted_word\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EXTRACTED_WORD</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>Database</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">3. Extracting Digits: Extract the first occurrence of digits from the string \"Version 12c\".</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of extracting digits using REGEXP_SUBSTR.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">REGEXP_SUBSTR</span>(<span class=\"SQLString\">'Version 12c'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'\\d+'</span>) <span class=\"SQLKeyword\">AS</span> extracted_digits\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EXTRACTED_DIGITS</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>12</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">4. Extracting a Specific Substring: Extract the first word from the string \"Hello World\".</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of extracting a specific substring using REGEXP_SUBSTR.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">REGEXP_SUBSTR</span>(<span class=\"SQLString\">'Hello World'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'^\\w+'</span>) <span class=\"SQLKeyword\">AS</span> first_word\n<span class=\"SQLKeyword\n\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>FIRST_WORD</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>Hello</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">5. Extracting Email Domain: Extract the domain from an email address \"user@aityl.com\".</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of extracting email domain using REGEXP_SUBSTR.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">REGEXP_SUBSTR</span>(<span class=\"SQLString\">'user@aityl.com'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'@(\\w+\\.\\w+)'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">1</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">1</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">NULL</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">1</span>) <span class=\"SQLKeyword\">AS</span> email_domain\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMAIL_DOMAIN</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>aityl.com</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">6. Extracting Multiple Words: Extract the second word from the string \"Oracle SQL Database\".</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of extracting multiple words using REGEXP_SUBSTR.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">REGEXP_SUBSTR</span>(<span class=\"SQLString\">'Oracle SQL Database'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'\\w+'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">1</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">2</span>) <span class=\"SQLKeyword\">AS</span> second_word\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>SECOND_WORD</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>SQL</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">7. Extracting a Substring with a Specific Pattern: Extract the first occurrence of a substring that starts with \"S\" and is followed by any number of characters in the string \"Oracle SQL Database\".</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of extracting a substring with a specific pattern \n-- using REGEXP_SUBSTR.</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">REGEXP_SUBSTR</span>(<span class=\"SQLString\">'Oracle SQL Database'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'S\\w*'</span>) <span class=\"SQLKeyword\">AS</span> pattern_match\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PATTERN_MATCH</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>SQL</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 59,
    "Question": "What are the key differences between basic queries and advanced queries in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">&bull; Basic Queries:</h4>\n    <p>Basic queries are simple and typically involve retrieving data from one or more tables using fundamental SQL clauses. They use standard functions and may include basic join operations.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> name<span class=\"SQLOperator\">,</span> salary\n<span class=\"SQLKeyword\">FROM</span> employees\n<span class=\"SQLKeyword\">WHERE</span> department_id <span class=\"SQLKeyword\">=</span> <span class=\"SQLString\">10</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">&bull; Advanced Queries:</h4>\n    <p>Advanced queries are more complex and may involve multiple steps, subqueries, and use of analytic functions. They often perform sophisticated data retrieval and manipulation.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> department_id<span class=\"SQLOperator\">,</span>\n       name<span class=\"SQLOperator\">,</span>\n       salary\n<span class=\"SQLKeyword\">FROM</span>   (<span class=\"SQLKeyword\">SELECT</span> department_id<span class=\"SQLOperator\">,</span>\n               name<span class=\"SQLOperator\">,</span>\n               salary<span class=\"SQLOperator\">,</span>\n               <span class=\"SQLFunction\">RANK</span>()\n                 <span class=\"SQLKeyword\">OVER</span> (\n                   <span class=\"SQLKeyword\">PARTITION BY</span> department_id\n                   <span class=\"SQLKeyword\">ORDER BY</span> salary <span class=\"SQLKeyword\">ASC</span>) <span class=\"SQLKeyword\">AS</span> rnk\n        <span class=\"SQLKeyword\">FROM</span>   employees)\n<span class=\"SQLKeyword\">WHERE</span>  rnk <span class=\"SQLKeyword\"><=</span> <span class=\"SQLString\">3</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Key Differences Summarized:</h4>\n    <ul>\n        <li><strong>Complexity:</strong> Basic queries are straightforward; advanced queries are complex and involve multiple layers.</li>\n        <li><strong>Functions:</strong> Basic queries use standard SQL functions; advanced queries use analytic and complex functions.</li>\n        <li><strong>Joins:</strong> Advanced queries may include more complex join conditions and multiple joins.</li>\n        <li><strong>Subqueries:</strong> Advanced queries often use subqueries and nested queries, rarely used in basic queries.</li>\n        <li><strong>Analytic Functions:</strong> Advanced queries make extensive use of analytic and window functions.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Practical Applications:</h4>\n    <h4 class=\"bold-blue\">&bull; Basic Query:</h4>\n    <p>Retrieve the names and email addresses of all customers.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> name<span class=\"SQLOperator\">,</span> email\n<span class=\"SQLKeyword\">FROM</span> customers<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">&bull; Advanced Query:</h4>\n    <p>Calculate the cumulative sales for each customer and rank them by total sales.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> customer_id<span class=\"SQLOperator\">,</span>\n       name<span class=\"SQLOperator\">,</span>\n       total_sales<span class=\"SQLOperator\">,</span>\n       <span class=\"SQLFunction\">RANK</span>()\n         <span class=\"SQLKeyword\">OVER</span> (\n           <span class=\"SQLKeyword\">ORDER BY</span> total_sales <span class=\"SQLKeyword\">DESC</span>) <span class=\"SQLKeyword\">AS</span> sales_rank\n<span class=\"SQLKeyword\">FROM</span>   (<span class=\"SQLKeyword\">SELECT</span> customer_id<span class=\"SQLOperator\">,</span>\n            name<span class=\"SQLOperator\">,</span>\n            <span class=\"SQLFunction\">SUM</span>(amount) <span class=\"SQLKeyword\">AS</span> total_sales\n      <span class=\"SQLKeyword\">FROM</span>   sales\n      <span class=\"SQLKeyword\">GROUP BY</span> customer_id<span class=\"SQLOperator\">,</span>\n               name)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 60,
    "Question": "What is the difference between correlated and non-correlated subqueries?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">&bull; Non-Correlated Subqueries:</h4>\n    <p>Non-correlated subqueries can be executed independently of the outer query. They do not rely on columns from the outer query and can provide results on their own.</p>\n    <h4 class=\"bold-maroon\">Example Table: PRODUCTS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PRODUCT_ID</th>\n                <th>PRODUCT_NAME</th>\n                <th>CATEGORY_ID</th>\n                <th>PRICE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Smartphone</td>\n                <td>1</td>\n                <td>699.99</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Laptop</td>\n                <td>1</td>\n                <td>999.99</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Novel</td>\n                <td>2</td>\n                <td>19.99</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>T-Shirt</td>\n                <td>3</td>\n                <td>29.99</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Example Table: CATEGORIES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CATEGORY_ID</th>\n                <th>CATEGORY_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Electronics</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Books</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Clothing</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">*</span>\n<span class=\"SQLKeyword\">FROM</span>   products\n<span class=\"SQLKeyword\">WHERE</span>  category_id <span class=\"SQLKeyword\">=</span> (<span class=\"SQLKeyword\">SELECT</span> category_id\n                      <span class=\"SQLKeyword\">FROM</span>   categories\n                      <span class=\"SQLKeyword\">WHERE</span>  category_name <span class=\"SQLKeyword\">=</span> <span class=\"SQLString\">'Electronics'</span>)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">&bull; Correlated Subqueries:</h4>\n    <p>Correlated subqueries reference columns from the outer query and are executed for each row processed by the outer query.</p>\n    <h4 class=\"bold-maroon\">Example Table: ORDERS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORDER_ID</th>\n                <th>CUSTOMER_ID</th>\n                <th>PRODUCT_ID</th>\n                <th>ORDER_DATE</th>\n                <th>QUANTITY</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>1</td>\n                <td>1</td>\n                <td>2024-06-19 23:27:00</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>2</td>\n                <td>3</td>\n                <td>2024-06-24 23:27:00</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>3</td>\n                <td>2</td>\n                <td>2024-06-09 23:27:00</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>1</td>\n                <td>4</td>\n                <td>2024-06-26 23:27:00</td>\n                <td>3</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">*</span>\n<span class=\"SQLKeyword\">FROM</span>   products p\n<span class=\"SQLKeyword\">WHERE</span>  <span class=\"SQLKeyword\">EXISTS</span> (<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLString\">1</span>\n         <span class=\"SQLKeyword\">FROM</span>   orders o\n         <span class=\"SQLKeyword\">WHERE</span>  o.product_id <span class=\"SQLKeyword\">=</span> p.product_id\n                  <span class=\"SQLKeyword\">AND</span> o.order_date <span class=\"SQLKeyword\">></span> <span class=\"SQLFunction\">SYSDATE</span> <span class=\"SQLKeyword\">-</span> <span class=\"SQLString\">15</span>)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 61,
    "Question": "How do you perform a \"CROSS JOIN\"/Cartesian product in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">&bull; Method 1: Using the <code>CROSS JOIN</code> Keyword</h4>\n    <p>This method explicitly indicates the intention to perform a \"CROSS JOIN\". It makes the code easy to understand.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> a.column1<span class=\"SQLOperator\">,</span> b.column2\n<span class=\"SQLKeyword\">FROM</span> table1 a\n<span class=\"SQLKeyword\">CROSS JOIN</span> table2 b<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">&bull; Method 2: Listing Tables Without a Join Condition</h4>\n    <p>This approach results in a Cartesian product by simply listing the tables without any join condition. It is generally recommended to use the explicit \"CROSS JOIN\" for clarity.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> a.column1<span class=\"SQLOperator\">,</span> b.column2\n<span class=\"SQLKeyword\">FROM</span> table1 a<span class=\"SQLOperator\">,</span> table2 b<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Practical Considerations:</h4>\n    <ul>\n        <li><strong>Performance:</strong> Caution is advised with cross joins, especially with large tables, as they can result in a very high number of rows, potentially leading to performance issues.</li>\n        <li><strong>Use Cases:</strong> Cross joins are useful in scenarios where all possible combinations of one set of data with another are needed, such as generating all possible combinations of products and customers, or categories and orders.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 62,
    "Question": "How does a CTE differ from a subquery in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">&bull; Common Table Expressions (CTEs):</h4>\n    <p>CTEs are defined using the \"WITH\" clause and provide a temporary result set that you can reference within your main query. They improve readability, modularity, and can be reused multiple times within the same query.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">WITH</span> cte_name <span class=\"SQLKeyword\">AS</span> (\n    <span class=\"SQLKeyword\">SELECT</span> column1<span class=\"SQLOperator\">,</span> column2\n    <span class=\"SQLKeyword\">FROM</span> table\n    <span class=\"SQLKeyword\n\">WHERE</span> condition\n)\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">*</span>\n<span class=\"SQLKeyword\">FROM</span> cte_name<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">&bull; Subqueries:</h4>\n    <p>Subqueries are nested queries within a main query. They can be placed in various parts of the SQL statement such as the \"SELECT\", \"FROM\", \"WHERE\", or \"HAVING\" clauses. Subqueries are not reusable and can sometimes make the main query harder to read.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> column1<span class=\"SQLOperator\">,</span>\n    (<span class=\"SQLKeyword\">SELECT</span> column2\n    <span class=\"SQLKeyword\">FROM</span> table2\n    <span class=\"SQLKeyword\">WHERE</span> condition) <span class=\"SQLKeyword\">AS</span> derived_column\n<span class=\"SQLKeyword\">FROM</span> table1\n<span class=\"SQLKeyword\">WHERE</span> column3 <span class=\"SQLKeyword\">IN</span> (<span class=\"SQLKeyword\">SELECT</span> column4\n                  <span class=\"SQLKeyword\">FROM</span> table3\n                  <span class=\"SQLKeyword\">WHERE</span> condition)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Key Differences:</h4>\n    <ul>\n        <li><strong>Syntax and Definition:</strong> CTEs use the \"WITH\" clause, while subqueries are nested within other queries.</li>\n        <li><strong>Readability:</strong> CTEs enhance readability and modularity; subqueries can complicate the query.</li>\n        <li><strong>Reusability:</strong> CTEs can be reused within the same query; subqueries are not reusable.</li>\n        <li><strong>Scope and Lifetime:</strong> CTEs are available only within the query they are defined in.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 63,
    "Question": "What are hints in Oracle SQL and how do you use hints to optimize queries in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Hints are special instructions embedded within a SQL statement that guide the Oracle optimizer on how to execute the query. They can affect the optimization process and enhance performance.</p>\n    <h4 class=\"bold-maroon\">1. ALL_ROWS Hint:</h4>\n    <p>Chooses a plan that minimizes the total resource consumption, typically used for batch processing.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLComment\">/*+ ALL_ROWS */</span> <span class=\"SQLKeyword\">*</span>\n<span class=\"SQLKeyword\">FROM</span> employees\n<span class=\"SQLKeyword\">WHERE</span> department_id <span class=\"SQLKeyword\">=</span> <span class=\"SQLString\">10</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">2. FIRST_ROWS(n) Hint:</h4>\n    <p>Retrieves the first \"n\" rows as quickly as possible, useful for interactive applications.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLComment\">/*+ FIRST_ROWS(10) */</span> <span class=\"SQLKeyword\">*</span>\n<span class=\"SQLKeyword\">FROM</span> employees\n<span class=\"SQLKeyword\">ORDER BY</span> salary <span class=\"SQLKeyword\">DESC</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">3. INDEX Hint:</h4>\n    <p>Uses a specific index for the specified table.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLComment\">/*+ INDEX(employees emp_index) */</span> <span class=\"SQLKeyword\">*</span>\n<span class=\"SQLKeyword\">FROM</span> employees\n<span class=\"SQLKeyword\">WHERE</span> last_name <span class=\"SQLKeyword\">=</span> <span class=\"SQLString\">'Ramanujan'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">4. FULL Hint:</h4>\n    <p>Performs a full table scan.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLComment\">/*+ FULL(employees) */</span> <span class=\"SQLKeyword\">*</span>\n<span class=\"SQLKeyword\">FROM</span> employees\n<span class=\"SQLKeyword\">WHERE</span> department_id <span class=\"SQLKeyword\">=</span> <span class=\"SQLString\">20</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">5. PARALLEL Hint:</h4>\n    <p>Enables parallel processing for the specified table.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLComment\">/*+ PARALLEL(employees, 4) */</span> <span class=\"SQLKeyword\">*</span>\n<span class=\"SQLKeyword\">FROM</span> employees<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">6. LEADING Hint:</h4>\n    <p>Specifies the join order of the tables in a multi-table query.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLComment\">/*+ LEADING(departments employees) */\n    </span> departments.department_name<span class=\"SQLOperator\">,</span>\n       employees.last_name\n<span class=\"SQLKeyword\">FROM</span> departments\n<span class=\"SQLKeyword\">JOIN</span> employees\n  <span class=\"SQLKeyword\">ON</span> departments.department_id <span class\n=\"SQLKeyword\">=</span> employees.department_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">7. USE_NL Hint:</h4>\n    <p>Instructs the optimizer to use a nested loops join.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLComment\">/*+ USE_NL(employees) */</span>\n    departments.department_name<span class=\"SQLOperator\">,</span>\n    employees.last_name\n<span class=\"SQLKeyword\">FROM</span> departments\n<span class=\"SQLKeyword\">JOIN</span> employees\n  <span class=\"SQLKeyword\">ON</span> departments.department_id <span class=\"SQLKeyword\">=</span> employees.department_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">8. USE_HASH Hint:</h4>\n    <p>Instructs the optimizer to use a hash join.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLComment\">/*+ USE_HASH(employees) */</span>\n    departments.department_name<span class=\"SQLOperator\">,</span>\n    employees.last_name\n<span class=\"SQLKeyword\">FROM</span> departments\n<span class=\"SQLKeyword\">JOIN</span> employees\n  <span class=\"SQLKeyword\">ON</span> departments.department_id <span class=\"SQLKeyword\">=</span> employees.department_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Practical Considerations:</h4>\n    <ul>\n        <li><strong>Use Case:</strong> Hints can be useful when the optimizer's default plan is not the most efficient.</li>\n        <li><strong>Performance:</strong> While hints can improve performance, they can also lead to suboptimal plans if misused.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 64,
    "Question": "What are the drawbacks of using hints in Oracle?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Drawbacks of Using Hints in Oracle:</h4>\n    <ol>\n        <li><strong>Maintenance Overhead:</strong> Hints are embedded in SQL statements, and if the database environment changes, they might require manual updates, increasing maintenance efforts.</li>\n        <li><strong>Reduced Flexibility:</strong> Hints force the optimizer to follow specific execution plans, limiting its ability to adapt to changes in data distribution, statistics, or hardware.</li>\n        <li><strong>Complexity and Errors:</strong> Hints can make SQL code more complex and harder to understand. Incorrect usage can lead to poor performance or errors.</li>\n        <li><strong>Optimizer Dependence:</strong> Over-reliance on hints can prevent the optimizer from using its own advanced methods to find the best execution plan.</li>\n        <li><strong>Potential Performance Degradation:</strong> Incorrect or outdated hints can degrade performance compared to letting the optimizer choose the execution plan.</li>\n    </ol>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 65,
    "Question": "What role does the optimizer play in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Role of the Optimizer in Oracle SQL:</h4>\n    <p>The optimizer in Oracle SQL determines the most efficient way to execute a SQL query by examining multiple execution plans and choosing the one with the lowest cost. Its primary roles include:</p>\n    <h4 class=\"bold-maroon\">1. Query Parsing and Analysis:</h4>\n    <ul>\n        <li>Performs syntax and semantic checks on the SQL query.</li>\n        <li>Analyzes the query to understand the required operations (e.g., joins, filters, aggregations).</li>\n    </ul>\n    <h4 class=\"bold-maroon\">2. Cost Estimation:</h4>\n    <ul>\n        <li>Estimates the cost of different execution plans based on factors like I/O, CPU usage, and memory.</li>\n        <li>Uses statistics on tables and indexes to make accurate cost estimates.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">3. Plan Generation:</h4>\n    <ul>\n        <li>Generates multiple potential execution plans for the query.</li>\n        <li>Considers different methods for accessing tables and join strategies.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">4. Plan Selection:</h4>\n    <ul>\n        <li>Evaluates the cost of each generated execution plan.</li>\n        <li>Selects the plan with the lowest estimated cost for query execution.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">5. Execution:</h4>\n    <ul>\n        <li>The selected execution plan is passed to the SQL execution engine for actual query execution.</li>\n    </ul>\n    <h4 class=\"bold-blue\">&bull; Types of Optimizers:</h4>\n    <h4 class=\"bold-maroon\">1. Rule-Based Optimizer (RBO):</h4>\n    <ul>\n        <li>Uses predefined rules to determine the execution plan.</li>\n        <li>Less flexible and efficient compared to the cost-based optimizer.</li>\n        <li>Deprecated and not recommended for use in modern Oracle versions.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">2. Cost-Based Optimizer (CBO):</h4>\n    <ul>\n        <li>Considers the cost of different execution plans and chooses the one with the lowest cost.</li>\n        <li>Requires up-to-date statistics on tables and indexes for accurate cost estimation.</li>\n        <li>Highly sophisticated and adaptive, suitable for complex queries and large databases.</li>\n    </ul>\n    <h4 class=\"bold-blue\">&bull; Key Features of the Oracle Optimizer:</h4>\n    <h4 class=\"bold-maroon\">1. Adaptive Query Optimization:</h4>\n    <ul>\n        <li>Adapts plans based on runtime statistics and feedback, refining execution plans dynamically.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">2. Dynamic Sampling:</h4>\n    <ul>\n        <li>Performs dynamic sampling to gather necessary information during query compilation in the absence of comprehensive statistics.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">3. SQL Plan Management:</h4>\n    <ul>\n        <li>Manages and maintains a SQL plan baseline, ensuring consistent performance by using known good execution plans.</li>\n    </ul>\n    <h4 class=\"bold-blue\">&bull; Best Practices:</h4>\n    <ul>\n        <li><strong>Keep Statistics Up-to-Date:</strong> Regularly gather statistics on tables and indexes for accurate optimizer decisions.</li>\n        <li><strong>Use Hints Wisely:</strong> Guide the optimizer with hints when necessary but use them judiciously.</li>\n        <li><strong>Monitor and Tune Queries:</strong> Regularly monitor query performance and use tools like SQL Tuning Advisor and SQL Plan Baselines for optimization.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 66,
    "Question": "What is a bind variable in Oracle SQL, and how do you use bind variables in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n   <p>A bind variable is a placeholder in SQL statements that allows you to pass different values to the query at runtime. Bind variables enhance efficiency and performance by enabling the reuse of SQL statements and reducing parsing and compilation overhead.</p>\n    <h4 class=\"bold-maroon\">Key Points about Bind Variables:</h4>\n    <ul>\n        <li><strong>Placeholders for Values:</strong> Represented by a colon followed by the variable name (e.g., \":customer_id\").</li>\n        <li><strong>Performance Benefits:</strong> Reduces parsing overhead and allows reuse of execution plans.</li>\n        <li><strong>Security Enhancement:</strong> Helps prevent SQL injection attacks by treating input values separately.</li>\n        <li><strong>Usage in PL/SQL and Applications:</strong> Commonly used in PL/SQL blocks, stored procedures, and dynamic SQL.</li>\n    </ul>\n    <h4 class=\"bold-blue\">&bull; Example Without Bind Variable:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">*</span> <span class=\"SQLKeyword\">FROM</span> customers\n<span class=\"SQLKeyword\">WHERE</span> customer_id <span class=\"SQLKeyword\">=</span> <span class=\"SQLString\">101</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">*</span> <span class=\"SQLKeyword\">FROM</span> customers\n<span class=\"SQLKeyword\">WHERE</span> customer_id <span class=\"SQLKeyword\">=</span> <span class=\"SQLString\">102</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">With Bind Variable:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">*</span> <span class=\"SQLKeyword\">FROM</span> customers\n<span class=\"SQLKeyword\">WHERE</span> customer_id <span class=\"SQLKeyword\">=</span> <span class=\"SQLString\">:customer_id</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Passing Values to Bind Variable:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">VARIABLE</span> customer_id <span class=\"SQLKeyword\">NUMBER</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLFunction\">EXEC</span> <span class=\"SQLString\">:customer_id</span> <span class=\"SQLKeyword\">:=</span> <span class=\"SQLString\">101</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLFunction\">EXEC SQL SELECT</span> <span class=\"SQLKeyword\">*</span> <span class=\"SQLKeyword\">FROM</span> customers <span class=\"SQLKeyword\">WHERE</span> customer_id <span class=\"SQLKeyword\">=</span> <span class=\"SQLString\">:customer_id</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLFunction\">EXEC</span> <span class=\"SQLString\">:customer_id</span> <span class=\"SQLKeyword\">:=</span> <span class=\"SQLString\">102</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLFunction\">EXEC SQL SELECT</span> <span class=\"SQLKeyword\">*</span> <span class=\"SQLKeyword\">FROM</span> customers <span class=\"SQLKeyword\">WHERE</span> customer_id <span class=\"SQLKeyword\">=</span> <span class=\"SQLString\">:customer_id</span><span class=\"SQLOperator\">;</span\n>\n</pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 67,
    "Question": "What is a transaction in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">&bull; Transaction in Oracle SQL:</h4>\n    <p>A transaction in Oracle SQL refers to a sequence of one or more SQL statements that are executed as a single unit of work. A transaction ensures that either all of the operations within the transaction are completed successfully, or none of them are. This is critical for maintaining the integrity of the database, especially in applications where multiple operations must all succeed for the system to be in a consistent state.</p>\n    <h4 class=\"bold-maroon\">Key Concepts of Transactions:</h4>\n    <ul>\n        <li><strong>Atomicity:</strong> Ensures that all operations within a transaction are completed; if not, the transaction is aborted.</li>\n        <li><strong>Consistency:</strong> Ensures the database remains in a consistent state before and after the transaction.</li>\n        <li><strong>Isolation:</strong> Ensures that transactions are isolated from each other until they are completed.</li>\n        <li><strong>Durability:</strong> Ensures that the results of a committed transaction are permanent, even in the event of a system failure.</li>\n    </ul>\n    <h4 class=\"bold-blue\">&bull; Basic Transaction Control Statements:</h4>\n    <ul>\n        <li><strong>BEGIN (or implicit):</strong> Marks the start of a transaction.</li>\n        <li><strong>COMMIT:</strong> Saves all changes made during the transaction.</li>\n        <li><strong>ROLLBACK:</strong> Undoes all changes made during the transaction.</li>\n        <li><strong>SAVEPOINT:</strong> Sets a point within a transaction to which you can later roll back.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Example Scenario in E-commerce:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of a transaction in Oracle SQL</span>\n<span class=\"SQLComment\">-- Start the transaction (implicit BEGIN)</span>\n<span class=\"SQLComment\">-- Deduct product quantity from inventory</span>\n<span class=\"SQLKeyword\">UPDATE</span> inventory\n<span class=\"SQLKeyword\">SET</span> quantity <span class=\"SQLKeyword\">=</span> quantity <span class=\"SQLKeyword\">-</span> <span class=\"SQLString\">1</span>\n<span class=\"SQLKeyword\">WHERE</span> product_id <span class=\"SQLKeyword\">=</span> <span class=\"SQLString\">1001</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Record the sale</span>\n<span class=\"SQLKeyword\">INSERT INTO</span> sales\n            (sale_id<span class=\"SQLOperator\">,</span>\n             product_id<span class=\"SQLOperator\">,</span>\n             user_id<span class=\"SQLOperator\">,</span>\n             sale_date<span class=\"SQLOperator\">,</span>\n             amount)\n<span class=\"SQLKeyword\">VALUES</span>      (seq_sale_id<span class=\"SQLFunction\">.NEXTVAL</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLString\">1001</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLString\">500</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLFunction\">SYSDATE</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLString\">59.99</span>)<span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Update the user's order history</span>\n<span class=\"SQLKeyword\">INSERT INTO</span> order_history\n            (order_id<span class=\"SQLOperator\">,</span>\n             user_id<span class=\"SQLOperator\">,</span>\n             product_id<span class=\"SQLOperator\">,</span>\n             order_date<span class=\"SQLOperator\">,</span>\n             status)\n<span class=\"SQLKeyword\">VALUES</span>      (seq_order_id<span class=\"SQLFunction\">.NEXTVAL</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLString\">500</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLString\">1001</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLFunction\">SYSDATE</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLString\">'Processing'</span>)<span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Commit the transaction if all operations succeed</span>\n<span class=\"SQLKeyword\">COMMIT</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- If any of the above operations fail, a rollback can be performed</span>\n<span class=\"SQLComment\">-- ROLLBACK;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Summary:</h4>\n    <p>If all these steps are executed successfully, the \"COMMIT\" statement will permanently save the changes to the database. If any step fails, the \"ROLLBACK\" statement can be used to undo all changes, ensuring the database remains in a consistent state. This example highlights the importance of transactions in maintaining data integrity in an e-commerce application.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 68,
    "Question": "What are the purposes of the \"COMMIT\", \"ROLLBACK\", and \"SAVEPOINT\" commands in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">1. COMMIT:</h4>\n    <ul>\n        <li>Makes all modifications made during the transaction permanent.</li>\n        <li>Releases all locks held during the transaction, making the changed data available to other users.</li>\n        <li>Marks the successful completion of a transaction.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">2. ROLLBACK:</h4>\n    <ul>\n        <li>Undoes all changes made during the transaction if an error occurs or if the transaction needs to be cancelled.</li>\n        <li>Ensures the database remains in a consistent state if part of a transaction fails.</li>\n        <li>Releases all locks held during the transaction, reverting data to its previous state.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">3. SAVEPOINT:</h4>\n    <ul>\n        <li>Sets a point within a transaction to which you can roll back without affecting the entire transaction.</li>\n        <li>Provides a mechanism for rolling back part of a transaction while allowing other parts to continue.</li>\n        <li>Improves transaction management by enabling recovery from errors at specific points within a transaction.</li>\n    </ul>\n    <h4 class=\"bold-blue\">&bull; Example Scenario:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Start transaction (implicitly)</span>\n<span class=\"SQLComment\">-- Update user profile</span>\n<span class=\"SQLKeyword\">UPDATE</span> users\n<span class=\"SQLKeyword\">SET</span> email <span class=\"SQLKeyword\">=</span> <span class=\"SQLString\">'newemail@aityl.com'</span>\n<span class=\"SQLKeyword\">WHERE</span> user_id <span class=\"SQLKeyword\">=</span> <span class=\"SQLString\">500</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Set a savepoint after updating the profile</span>\n<span class=\"SQLKeyword\">SAVEPOINT</span> profile_updated<span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Insert new order</span>\n<span class=\"SQLKeyword\">INSERT INTO</span> orders\n            (order_id<span class=\"SQLOperator\">,</span>\n             user_id<span class=\"SQLOperator\">,</span>\n             product_id<span class=\"SQLOperator\">,</span>\n             order_date<span class=\"SQLOperator\">,</span>\n             status)\n<span class=\"SQLKeyword\">VALUES</span>      (seq_order_id<span class=\"SQLFunction\">.NEXTVAL</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLString\">500</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLString\">1001</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLFunction\">SYSDATE</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLString\">'Pending'</span>)<span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- An error occurs; rollback to the savepoint</span>\n<span class=\"SQLKeyword\">ROLLBACK TO</span> profile_updated<span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Retry inserting the order</span>\n<span class=\"SQLKeyword\">INSERT INTO</span> orders\n            (order_id<span class=\"SQLOperator\">,</span>\n             user_id<span class=\"SQLOperator\">,</span>\n             product_id<span class=\"SQLOperator\">,</span>\n             order_date<span class=\"SQLOperator\">,</span>\n             status)\n<span class=\"SQLKeyword\">VALUES</span>      (seq_order_id<span class=\"SQLFunction\">.NEXTVAL</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLString\">500</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLString\">1001</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLFunction\">SYSDATE</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLString\">'Pending'</span>)<span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Commit the transaction</span>\n<span class=\"SQLKeyword\">COMMIT</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <p>In this example, the user profile is updated, and a \"SAVEPOINT\" named \"profile_updated\" is set. If an error occurs while inserting the order, a \"ROLLBACK TO profile_updated\" reverts only the order insertion, leaving the profile update intact. The transaction is retried and, if successful, a \"COMMIT\" is issued to save all changes permanently.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 69,
    "Question": "How do you use the AUTOCOMMIT feature in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In SQL*Plus, you can enable and disable AUTOCOMMIT using the \"SET AUTOCOMMIT\" command.</p>\n    <h4 class=\"bold-maroon\">Enable AUTOCOMMIT:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SET AUTOCOMMIT</span> <span class=\"SQLKeyword\">ON</span><span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">Disable AUTOCOMMIT:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SET AUTOCOMMIT</span> <span class=\"SQLKeyword\">OFF</span><span class=\"SQLOperator\">;</span></pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 70,
    "Question": "What are the ACID properties of a transaction?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In Oracle and other database management systems, the ACID properties ensure that database transactions are processed reliably. The ACID properties are defined as follows:</p>\n    <h4 class=\"bold-maroon\">1. Atomicity:</h4>\n    <ul>\n        <li>Ensures that all operations within a transaction are completed successfully. If any operation fails, the entire transaction is rolled back, reverting the database to its previous state.</li>\n        <li>A transaction is treated as a single, indivisible unit of work.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">2. Consistency:</h4>\n    <ul>\n        <li>Guarantees that a transaction transforms the database from one valid state to another, adhering to the defined rules and constraints of the database.</li>\n        <li>Upon completion of the transaction, the database must be in a consistent state, meaning all data integrity constraints are satisfied.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">3. Isolation:</h4>\n    <ul>\n        <li>Ensures that the operations of a transaction are isolated from those of other transactions.</li>\n        <li>Changes made by a transaction are not visible to other transactions until the transaction is committed.</li>\n        <li>This prevents transactions from interfering with each other, thereby maintaining data consistency and accuracy.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">4. Durability:</h4>\n    <ul>\n        <li>Ensures that once a transaction has been committed, it will remain so even in the event of a system failure.</li>\n        <li>The changes made by the transaction are permanently recorded in the database.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Summary:</h4>\n    <p>These properties collectively ensure that database transactions are processed in a reliable, consistent, and predictable manner.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 71,
    "Question": "What are the differences between SQL and PL/SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">SQL (Structured Query Language)</h4>\n    <ul>\n        <li><strong>Purpose:</strong> SQL is primarily used for querying and managing data in relational database management systems (RDBMS). It allows users to insert, update, delete, and retrieve data from databases.</li>\n        <li><strong>Type:</strong> SQL is a declarative language, which means it specifies what needs to be done without specifying how it should be done.</li>\n        <li><strong>Operations:</strong> SQL consists of Data Query Language (DQL), Data Definition Language (DDL), Data Manipulation Language (DML), and Data Control Language (DCL).\n            <ul>\n                <li><strong>DQL:</strong> SELECT</li>\n                <li><strong>DDL:</strong> CREATE, ALTER, DROP</li>\n                <li><strong>DML:</strong> INSERT, UPDATE, DELETE</li>\n                <li><strong>DCL:</strong> GRANT, REVOKE</li>\n            </ul>\n        </li>\n        <li><strong>Execution:</strong> SQL statements are executed one at a time. SQL is typically used for single operations or ad-hoc queries.</li>\n        <li><strong>Procedural Capabilities:</strong> SQL lacks procedural capabilities like loops, conditionals, and error handling. It is purely a query language.</li>\n        <li><strong>Usage:</strong> SQL is used across different RDBMS systems like MySQL, PostgreSQL, SQL Server, Oracle, and others.</li>\n    </ul>\n    <h4 class=\"bold-blue\">PL/SQL (Procedural Language/SQL)</h4>\n    <ul>\n        <li><strong>Purpose:</strong> PL/SQL is a procedural extension of SQL designed specifically for Oracle databases. It is used to write full programs to perform complex operations, often involving multiple SQL statements.</li>\n        <li><strong>Type:</strong> PL/SQL is a procedural language, meaning it can execute a sequence of statements (procedures), handle conditions, loops, and exceptions.</li>\n        <li><strong>Operations:</strong> PL/SQL supports all SQL operations and adds procedural constructs such as:\n            <ul>\n                <li><strong>Control Structures:</strong> IF-THEN-ELSE, CASE, LOOP, FOR, WHILE</li>\n                <li><strong>Error Handling:</strong> EXCEPTION</li>\n                <li><strong>Procedures and Functions:</strong> CREATE PROCEDURE, CREATE FUNCTION</li>\n                <li><strong>Packages:</strong> Grouping related procedures, functions, and variables</li>\n                <li><strong>Triggers:</strong> Code that automatically executes in response to certain events on a table or view.</li>\n            </ul>\n        </li>\n        <li><strong>Execution:</strong> PL/SQL allows the execution of blocks of code, which can include multiple SQL statements, procedural logic, and exception handling. PL/SQL code is compiled and stored in the database.</li>\n        <li><strong>Procedural Capabilities:</strong> PL/SQL includes robust procedural capabilities, making it suitable for developing complex applications. It supports variables, constants, arrays, and more complex data structures.</li>\n        <li><strong>Usage:</strong> PL/SQL is specific to Oracle databases and is not used in other RDBMS systems. However, other databases have their procedural extensions, like T-SQL for SQL Server and PL/pgSQL for PostgreSQL.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Summary:</h4>\n    <p><strong>SQL:</strong> A standard language for querying and managing data in relational databases. It is declarative and lacks procedural capabilities.</p>\n    <p><strong>PL/SQL:</strong> A procedural extension of SQL for Oracle databases, providing the ability to write complex programs with procedural logic, control structures, and exception handling.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 72,
    "Question": "How do you retrieve unique records from a table in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>You can retrieve unique records using the <code>DISTINCT</code> keyword or by using the <code>GROUP BY</code> clause. Here are some examples:</p>\n    <h4 class=\"bold-blue\">Query 1: Selecting Distinct Names</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT DISTINCT</span> customer_name\n<span class=\"SQLKeyword\">FROM</span> Customers<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Query 2: Grouping by Name</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> customer_name\n<span class=\"SQLKeyword\">FROM</span> Customers\n<span class=\"SQLKeyword\">GROUP BY</span> customer_name<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Query 3: Selecting Distinct Names and Emails</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT DISTINCT</span> customer_name<span class=\"SQLOperator\">,</span> email\n<span class=\"SQLKeyword\">FROM</span> Customers<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Query 4: Grouping by Name and Email</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> customer_name<span class=\"SQLOperator\">,</span> email\n<span class=\"SQLKeyword\">FROM</span> Customers\n<span class=\"SQLKeyword\">GROUP BY</span> customer_name<span class=\"SQLOperator\">,</span> email<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Comparison and Insights</h4>\n    <p>Both <code>DISTINCT</code> and <code>GROUP BY</code> can be used to retrieve unique records, but their usage can be optimized based on the context:</p>\n    <ul>\n        <li><strong>DISTINCT:</strong>\n            <ul>\n                <li>Best for simple queries where the goal is to eliminate duplicates.</li>\n                <li>Straightforward and clear in purpose, making it easy to read and understand in queries focused purely on uniqueness.</li>\n            </ul>\n        </li>\n        <li><strong>GROUP BY:</strong>\n            <ul>\n                <li>Essential when working with aggregates but also effective for ensuring uniqueness.</li>\n                <li>Offers flexibility for more complex queries, such as adding aggregate functions or filtering groups with <code>HAVING</code>.</li>\n            </ul>\n        </li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 73,
    "Question": "What challenges are associated with real-time data analysis using Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Real-time data analysis in Oracle SQL presents several challenges, including:</p>\n    <h4 class=\"bold-blue\">1. Performance and Scalability</h4>\n    <ul>\n        <li><strong>High Volume:</strong> Real-time systems need to handle large amounts of data quickly to avoid delays.</li>\n        <li><strong>Scalability:</strong> Scaling databases for higher loads requires careful planning and significant investment in hardware and software.</li>\n    </ul>\n    <h4 class=\"bold-blue\">2. Data Freshness and Accuracy</h4>\n    <ul>\n        <li><strong>Latency:</strong> Reducing the time between data creation and availability is crucial for timely decisions.</li>\n        <li><strong>Data Integrity:</strong> Keeping data consistent and accurate during frequent updates is challenging.</li>\n    </ul>\n    <h4 class=\"bold-blue\">3. Complexity of Queries</h4>\n    <ul>\n        <li><strong>Real-Time Analytics:</strong> Complex queries for deep analysis can be slow and use a lot of resources, which is a problem for real-time needs.</li>\n        <li><strong>Optimization:</strong> Making queries fast and efficient requires advanced knowledge of Oracle's optimization tools and indexing.</li>\n    </ul>\n    <h4 class=\"bold-blue\">4. Concurrency and Transaction Management</h4>\n    <ul>\n        <li><strong>Locking and Concurrency:</strong> High levels of access and updates can cause locking issues, where multiple users are trying to access the same data.</li>\n        <li><strong>Transaction Isolation:</strong> Ensuring data accuracy with high concurrency can slow down performance.</li>\n    </ul>\n    <h4 class=\"bold-blue\">5. Data Integration</h4>\n    <ul>\n        <li><strong>Heterogeneous Sources:</strong> Integrating data from different sources into one environment is difficult.</li>\n        <li><strong>Streaming Data:</strong> Adding streaming data requires extra tools like Oracle GoldenGate.</li>\n    </ul>\n    <h4 class=\"\nbold-maroon\">Strategies for Overcoming Challenges</h4>\n    <ul>\n        <li><strong>Optimization Techniques:</strong> Use query optimization, efficient indexing, and partitioning to improve performance.</li>\n        <li><strong>Hybrid Systems:</strong> Combine Oracle SQL with NoSQL databases or streaming data platforms for specific tasks.</li>\n        <li><strong>Using Oracle Features:</strong> Use Oracle RAC for scalability, Oracle Advanced Analytics for integrated functions, and Oracle TimesTen for reduced latency.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 74,
    "Question": "What are the categories of SQL statements and how are they used in database management?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In Oracle databases, SQL statements are categorized by function and role. This overview highlights their importance in transaction management, focusing on commit and rollback operations essential for data integrity.</p>\n    <h4 class=\"bold-blue\">1. DDL (Data Definition Language)</h4>\n    <p>DDL statements are used to create, alter, or drop schema objects like tables, indexes, and views. Examples include <code>ALTER</code>, <code>CREATE</code>, <code>DROP</code>, <code>FLASHBACK</code>, <code>GRANT</code>, <code>PURGE</code>, <code>RENAME</code>, <code>REVOKE</code>, and <code>TRUNCATE</code>.</p>\n    <ul>\n        <li><strong>Commit and Rollback:</strong> DDL statements are auto-committing, meaning they automatically commit changes to the database when executed. Therefore, you cannot roll back a DDL statement once it has been executed; the changes are permanent immediately.</li>\n    </ul>\n    <h4 class=\"bold-blue\">2. DML (Data Manipulation Language)</h4>\n    <p>DML statements are used to insert, update, delete, or query data in the database. Examples include <code>UPDATE</code>, <code>SELECT</code>, <code>MERGE</code>, <code>LOCK TABLE</code>, <code>INSERT</code>, <code>EXPLAIN PLAN</code>, <code>DELETE</code>, and <code>CALL</code>.</p>\n    <ul>\n        <li><strong>Commit and Rollback:</strong> DML statements can be committed or rolled back. They do not automatically commit changes to the database, allowing multiple DML operations to be grouped into a single transaction. This transaction can then be either committed (making all changes permanent) or rolled back (undoing all changes made during the transaction).</li>\n    </ul>\n    <h4 class=\"bold-blue\">3. TCL (Transaction Control Language)</h4>\n    <p>TCL statements are used to manage transactions within a database. The primary statements are <code>COMMIT</code>, <code>ROLLBACK</code>, and <code>SAVEPOINT</code>.</p>\n    <ul>\n        <li><strong>Commit and Rollback:</strong> These statements directly control the commit and rollback operations. <code>COMMIT</code> makes all changes made in the current transaction permanent, <code>ROLLBACK</code> undoes all changes made in the current transaction, and <code>SAVEPOINT</code> allows for partial rollbacks to a marked point within the transaction.</li>\n    </ul>\n    <h4 class=\"bold-blue\">4. Session Control Statements</h4>\n    <p>These statements control the properties of a user session. Examples include <code>ALTER SESSION</code> and <code>SET ROLE</code>.</p>\n    <ul>\n        <li><strong>Commit and Rollback:</strong> Session control statements generally do not involve data manipulation, so they do not directly interact with commit or rollback operations. However, executing some session control statements can cause an implicit commit.</li>\n    </ul>\n    <h4 class=\"bold-blue\">5. System Control Statements</h4>\n    <p>System control statements are used to configure and manage database systems at a higher level, such as <code>ALTER SYSTEM</code>.</p>\n    <ul>\n        <li><strong>Commit and Rollback:</strong> Similar to session control statements, system control statements typically trigger an implicit commit. However, since they do not directly manipulate data, they do not engage with transaction control in the conventional way.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 75,
    "Question": "What considerations are important when designing a database schema to ensure data integrity and performance?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Effectively designing a database schema is essential for maintaining data integrity and ensuring optimal performance, particularly in an Oracle database environment. Here are several important factors to consider during this process:</p>\n    <h4 class=\"bold-blue\">1. Normalization</h4>\n    <ul>\n        <li><strong>Objective:</strong> Minimize data redundancy and enhance data integrity.</li>\n        <li><strong>Implementation:</strong> Apply normalization principles (commonly up to the Third Normal Form - 3NF) to ensure each table has minimal redundancy, making maintenance easier and data consistency more reliable.</li>\n    </ul>\n    <h4 class=\"bold-blue\">2. Data Types and Precision</h4>\n    <ul>\n        <li><strong>Objective:</strong> Ensure accuracy and efficiency in data storage.</li>\n        <li><strong>Implementation:</strong> Select appropriate data types and define precise limits to balance storage efficiency with the accurate representation of data properties.</li>\n    </ul>\n    <h4 class=\"bold-blue\">3. Indexes</h4>\n    <ul>\n        <li><strong>Objective:</strong> Improve data retrieval performance.</li>\n        <li><strong>Implementation:</strong> Strategically create indexes on columns frequently used in WHERE clauses and as join keys, while avoiding over-indexing to prevent degradation of write performance.</li>\n    </ul>\n    <h4 class=\"bold-blue\">4. Constraints</h4>\n    <ul>\n        <li><strong>Objective:</strong> Enforce data integrity at the database level.</li>\n        <li><strong>Implementation:</strong> Utilize primary keys, foreign keys, unique constraints, and check constraints to ensure the accuracy and reliability of data within and across tables.</li>\n    </ul>\n    <h4 class=\"bold-blue\">5. Partitioning</h4>\n    <ul>\n        <li><strong>Objective:</strong> Enhance query performance and efficiently manage large datasets.</li>\n        <li><strong>Implementation:</strong> Implement partitioning strategies like range, list, or hash partitioning on large tables, especially those subject to frequent queries and updates.</li>\n    </ul>\n    <h4 class=\"bold-blue\">6. Storage Considerations</h4>\n    <ul>\n        <li><strong>Objective:</strong> Optimize physical storage for performance.</li>\n        <li><strong>Implementation:</strong> Define tablespaces and configure Oracle storage parameters such as PCTFREE, PCTUSED, and INITRANS to fine-tune data storage and access.</li>\n    </ul>\n    <h4 class=\"bold-blue\">7. Security</h4>\n    <ul>\n        <li><strong>Objective:</strong> Protect sensitive data and comply with regulatory requirements.</li>\n        <li><strong>Implementation:</strong> Apply security measures at the schema level, including role-based access controls, and consider encryption for sensitive data both at rest and in transit.</li>\n    </ul>\n    <h4 class=\"bold-blue\">8. Scalability and Flexibility</h4>\n    <ul>\n        <li><strong>Objective:</strong> Ensure the database can grow and adapt to increased data volumes or changing business needs.</li>\n        <li><strong>Implementation:</strong> Design the schema with scalability in mind, allowing for easy modification and expansion. Anticipate future use cases and data growth.</li>\n    </ul>\n    <h4 class=\"bold-blue\">9. Business Rules and Logic</h4>\n    <ul>\n        <li><strong>Objective:</strong> Implement and enforce business logic directly within the database.</li>\n        <li><strong>Implementation:</strong> Use stored procedures, triggers, and Oracle's PL/SQL programming capabilities to centralize and efficiently manage business logic.</li>\n    </ul>\n    <h4 class=\"bold-blue\">10. Backup and Recovery</h4>\n    <ul>\n        <li><strong>Objective:</strong> Ensure data recovery to maintain business continuity.</li>\n        <li><strong>Implementation:</strong> Plan for regular backups and design the schema with recovery in mind, considering aspects like logging and data replication strategies.</li>\n    </ul>\n    <h4 class=\"bold-blue\">11. Oracle-Specific Features</h4>\n    <ul>\n        <li><strong>Objective:</strong> Leverage Oracle-specific enhancements for performance and management.</li>\n        <li><strong>Implementation:</strong> Utilize features such as Oracle Real Application Clusters (RAC) for high availability, Advanced Compression for storage optimization, and Automatic Storage Management (ASM) for simplifying database administration.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 76,
    "Question": "What challenges might arise when migrating data from an old system to a new Oracle database, and how would you address them?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Migrating data from an old system to a new Oracle database can present several challenges. Below are common issues and strategies for addressing them:</p>\n    <h4 class=\"bold-blue\">1. Data Quality Issues</h4>\n    <ul>\n        <li><strong>Challenge:</strong> The legacy system may have incomplete, inaccurate, or inconsistent data.</li>\n        <li><strong>Solution:</strong> Conduct a detailed data profiling and cleansing process before migration. Utilize tools like ODI, Talend, and Data Ladder, along with scripts, to validate and rectify data, ensuring it aligns with the new system's standards.</li>\n    </ul>\n    <h4 class=\"bold-blue\">2. Schema Differences</h4>\n    <ul>\n        <li><strong>Challenge:</strong> Variations in data models between the old and new systems.</li>\n        <li><strong>Solution:</strong> Carefully map the old schema structures to the new ones. Employ Oracle SQL Developer or other ETL (Extract, Transform, Load) tools to convert data into the required formats.</li>\n    </ul>\n    <h4 class=\"bold-blue\">3. Data Volume</h4>\n    <ul>\n        <li><strong>Challenge:</strong> Handling large volumes of data can make migration time-consuming and complex.</li>\n        <li><strong>Solution:</strong> Adopt a phased migration approach, transferring data in batches during periods of low usage. Leverage Oracle Data Pump for efficient bulk data transfer.</li>\n    </ul>\n    <h4 class=\"bold-blue\">4. Downtime</h4>\n    <ul>\n        <li><strong>Challenge:</strong> Minimizing downtime during the migration to prevent business disruption.</li>\n        <li><strong>Solution:</strong> Schedule the migration during off-peak hours and use strategies such as rolling migrations or Oracle GoldenGate for real-time data replication to minimize downtime.</li>\n    </ul>\n    <h4 class=\"bold-blue\">5. Compatibility Issues</h4>\n    <ul>\n        <li><strong>Challenge:</strong> Differences in data types, database features, and application compatibility.</li>\n        <li><strong>Solution:</strong> Thoroughly test the migration process in a staging environment. Address compatibility issues by adjusting data types and database features to ensure smooth integration.</li>\n    </ul>\n    <h4 class=\"bold-blue\">6. Performance Optimization</h4>\n    <ul>\n        <li><strong>Challenge:</strong> Ensuring the new system performs well with the migrated data.</li>\n        <li><strong>Solution:</strong> Optimize database configurations and index structures. Perform performance testing and tuning to identify and resolve any bottlenecks.</li>\n    </ul>\n    <h4 class=\"bold-blue\">7. Business Logic and Stored Procedures</h4>\n    <ul>\n        <li><strong>Challenge:</strong> Migrating and validating business logic, stored procedures, and triggers.</li>\n        <li><strong>Solution:</strong> Recreate and test business logic, stored procedures, and triggers in the new Oracle database to ensure they function correctly and perform as expected.</li>\n    </ul>\n    <h4 class=\"bold-blue\">8. User Training and Adoption</h4>\n    <ul>\n        <li><strong>Challenge:</strong> Ensuring users are comfortable with the new system.</li>\n        <li><strong>Solution:</strong> Provide comprehensive training and support to users. Develop detailed documentation and conduct hands-on sessions to facilitate a smooth transition.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 77,
    "Question": "Provide real-world examples of using the DECODE() function in Oracle SQL.",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>The <code>DECODE()</code> function in Oracle SQL is used to implement conditional logic in SQL queries, allowing for value substitution based on specific conditions. Here are some real-world examples:</p>\n    <h4 class=\"bold-blue\">Example 1: Simple Data Transformation</h4>\n    <p>Consider a table named <code>employees</code> with columns <code>employee_id</code>, <code>name</code>, and <code>department_id</code>. The goal is to map department IDs to their respective department names.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    employee_id<span class=\"SQLOperator\">,</span>\n    name<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLFunction\">DECODE</span>(department_id<span class=\"SQLOperator\">,</span>\n           <span class=\"SQLString\">10</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'Finance'</span><span class=\"SQLOperator\">,</span>\n           <span class=\"SQLString\">20</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'Human Resources'</span><span class=\"SQLOperator\">,</span>\n           <span class=\"SQLString\">30</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'IT'</span><span class=\"SQLOperator\">,</span>\n           <span class=\"SQLString\">40</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'Marketing'</span><span class=\"SQLOperator\">,</span>\n           <span class=\"SQLString\">'Unknown Dept'</span>) <span class=\"SQLKeyword\">AS</span> department_name\n<span class=\"SQLKeyword\">FROM</span>\n    employees<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Example 2: Handling Null Values</h4>\n    <p>Imagine a table called <code>orders</code> with columns <code>order_id</code>, <code>customer_id</code>, and <code>status</code>. The goal is to replace null values in the <code>status</code> column with 'Pending'.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    order_id<span class\n=\"SQLOperator\">,</span>\n    customer_id<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLFunction\">DECODE</span>(status<span class=\"SQLOperator\">,</span>\n           <span class=\"SQLKeyword\">NULL</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'Pending'</span><span class=\"SQLOperator\">,</span>\n           status) <span class=\"SQLKeyword\">AS</span> order_status\n<span class=\"SQLKeyword\">FROM</span>\n    orders<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Example 3: Conditional Aggregation</h4>\n    <p>Suppose there is a <code>sales</code> table with columns <code>sale_id</code>, <code>product_id</code>, <code>sale_date</code>, <code>amount</code>, and <code>total_amount</code>. The goal is to calculate the total sales amount for each product, distinguishing between sales before and after a specific date.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    product_id<span class=\"SQLOperator\">,</span>\n<span class=\"SQLFunction\">SUM</span>(<span class=\"SQLFunction\">DECODE</span>(<span class=\"SQLFunction\">SIGN</span>(sale_date <span class=\"SQLKeyword\">-</span> <span class=\"SQLFunction\">TO_DATE</span>(<span class=\"SQLString\">'2023-01-01'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span>))<span class=\"SQLOperator\">,</span>\n               <span class=\"SQLString\">1</span><span class=\"SQLOperator\">,</span>\n               total_amount<span class=\"SQLOperator\">,</span>\n               <span class=\"SQLString\">0</span>)) <span class=\"SQLKeyword\">AS</span> sales_after_2023<span class=\"SQLOperator\">,</span>\n<span class=\"SQLFunction\">SUM</span>(<span class=\"SQLFunction\">DECODE</span>(<span class=\"SQLFunction\">SIGN</span>(sale_date <span class=\"SQLKeyword\">-</span> <span class=\"SQLFunction\">TO_DATE</span>(<span class=\"SQLString\">'2023-01-01'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span>))<span class=\"SQLOperator\">,</span>\n               <span class=\"SQLString\">-1</span><span class=\"SQLOperator\">,</span>\n               amount<span class=\"SQLOperator\">,</span>\n               <span class=\"SQLString\">0</span>)) <span class=\"SQLKeyword\">AS</span> sales_before_2023\n<span class=\"SQLKeyword\">FROM</span>\n    sales\n<span class=\"SQLKeyword\">GROUP BY</span>\n    product_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>In this query:</p>\n    <ul>\n        <li>The <code>SIGN</code> function determines whether <code>sale_date</code> is before or after <code>2023-01-01</code>.</li>\n        <li>If the result is 1 (i.e., <code>sale_date</code> is after <code>2023-01-01</code>), it includes <code>total_amount</code> in <code>sales_after_2023</code>.</li>\n        <li>If the result is -1 (i.e., <code>sale_date</code> is before <code>2023-01-01</code>), it includes <code>amount</code> in <code>sales_before_2023</code>.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 78,
    "Question": "How do you retrieve all records from a table in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>You can retrieve all records from a table using the <code>SELECT *</code> statement. For example:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">*</span> <span class=\"SQLKeyword\">FROM</span> products<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This query returns all columns and rows from the <code>products</code> table.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 79,
    "Question": "What are the different methods to insert new rows/records into a table in SQL? Please provide examples.",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In Oracle SQL, there are several methods to insert new rows or records into a table. These methods include using the <code>INSERT INTO</code> statement, <code>INSERT ALL</code>, <code>INSERT FIRST</code>, and <code>MERGE</code>.</p>\n    <h4 class=\"bold-blue\">1. Single Record Insert</h4>\n    <p>This method inserts a single record into a table.</p>\n    <p><strong>Example:</strong></p>\n    <p>Inserting a new customer into the <code>CUSTOMERS</code> table.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">INSERT INTO</span> customers\n            (customer_id<span class=\"SQLOperator\">,</span>\n             first_name<span class=\"SQLOperator\">,</span>\n             last_name<span class=\"SQLOperator\">,</span>\n             email<span class=\"SQLOperator\">,</span>\n             created_at)\n<span class=\"SQLKeyword\">VALUES</span>      (<span class=\"SQLString\">101</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLString\">'Rick'</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLString\">'Flair'</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLString\">'ric.flair@aityl.com'</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLFunction\">SYSDATE</span>)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">2. Multiple Records Insert</h4>\n    <p>This method inserts multiple records into a table in a single SQL statement.</p>\n    <p><strong>Example:</strong></p>\n    <p>Inserting multiple products into the <code>PRODUCTS</code> table.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">INSERT INTO</span> products\n            (product_id<span class=\"SQLOperator\">,</span>\n             product_name<span class=\"SQLOperator\">,</span>\n             category<span class=\"SQLOperator\">,</span>\n             price<span class=\"SQLOperator\">,</span>\n             stock)\n<span class=\"SQLKeyword\">VALUES</span>      (<span class=\"SQLString\">201</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLString\">'Digital Watch'</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLString\">'Electronics'</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLString\">999.99</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLString\">50</span>)<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">INSERT INTO</span> products\n            (product_id<span class=\"SQLOperator\">,</span>\n             product_name<span class=\"SQLOperator\">,</span>\n             category<span class=\"SQLOperator\">,</span>\n             price<span class=\"SQLOperator\">,</span>\n             stock)\n<span class=\"SQLKeyword\">VALUES</span>      (<span class=\"SQLString\">202</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLString\">'Smartphone'</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLString\">'Electronics'</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLString\">499.99</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLString\">100</span>)<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">INSERT INTO</span> products\n            (product_id<span class=\"SQLOperator\">,</span>\n             product_name<span class=\"SQLOperator\">,</span>\n             category<span class=\"SQLOperator\">,</span>\n             price<span class=\"SQLOperator\">,</span>\n             stock)\n<span class=\"SQLKeyword\">VALUES</span>      (<span class=\"SQLString\">203</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLString\">'Tablet'</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLString\">'Electronics'</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLString\">299.99</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLString\">200</span>)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">3. Insert Using Subquery</h4>\n    <p>This method inserts records into a table based on the results of a subquery.</p>\n    <p><strong>Example:</strong></p>\n    <p>Inserting summarized orders into the <code>ORDER_SUMMARY</code> table based on records from the <code>orders</code> table.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">INSERT INTO</span> order_summary\n            (order_id<span class=\"SQLOperator\">,</span>\n             customer_id<span class=\"SQLOperator\">,</span>\n             total_amount)\n<span class=\"SQLKeyword\">SELECT</span> order_id<span class=\"SQLOperator\">,</span>\n       customer_id<span class=\"SQLOperator\">,</span>\n       <span class=\"SQLFunction\">SUM</span>(quantity <span class=\"SQLOperator\">*</span> unit_price)\n<span class=\"SQLKeyword\">FROM</span>   orders\n<span class=\"SQLKeyword\">GROUP BY</span> order_id<span class=\"SQLOperator\">,</span>\n          customer_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>Inserting records into the <code>ORDER_BKP</code> table from the <code>orders</code> table, assuming all columns and data types are in the same order.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">INSERT INTO</span> order_bkp\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">*</span>\n<span class=\"SQLKeyword\">FROM</span> orders<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">4. Insert All</h4>\n    <p>This method conditionally inserts multiple rows into multiple tables.</p>\n    <p><strong>Example:</strong></p>\n    <p>Inserting records into both <code>PRODUCTS</code> and <code>INVENTORY</code> tables.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">INSERT ALL</span>\n<span class=\"SQLKeyword\">INTO</span> products (product_id<span class=\"SQLOperator\">,</span> product_name<span class=\"SQLOperator\">,</span> category<span class=\"SQLOperator\">,</span> price)\n<span class=\"SQLKeyword\">VALUES</span> (<span class=\"SQLString\">301</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'Headphones'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'Electronics'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">89.99</span>)\n<span class=\"SQLKeyword\">INTO</span> inventory (product_id<span class=\"SQLOperator\">,</span> quantity<span class=\"SQLOperator\">,</span> warehouse)\n<span class=\"SQLKeyword\">VALUES</span> (<span class=\"SQLString\">301</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">150</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'Warehouse A'</span>)\n<span class=\"SQLKeyword\">INTO</span> inventory (product_id<span class=\"SQLOperator\">,</span> quantity<span class=\"SQLOperator\">,</span> warehouse)\n<span class=\"SQLKeyword\">VALUES</span> (<span class=\"SQLString\">301</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">200</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'Warehouse B'</span>)\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">*</span>\n<span class=\"SQLKeyword\">FROM</span>   dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">5. Insert First</h4>\n    <p>This method conditionally inserts records into tables based on specified conditions.</p>\n    <p><strong>Example:</strong></p>\n    <p>Inserting into different tables based on stock availability.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">INSERT FIRST</span>\n<span class=\"SQLKeyword\">WHEN</span> stock <span class=\"SQLKeyword\">></span> <span class=\"SQLString\">100</span> <span class=\"SQLKeyword\">THEN</span>\n<span class=\"SQLKeyword\">INTO</span> high_stock_products (product_id<span class=\"SQLOperator\">,</span> product_name<span class=\"SQLOperator\">,</span> stock)\n<span class=\"SQLKeyword\">VALUES</span> (product_id<span class=\"SQLOperator\">,</span> product_name<span class=\"SQLOperator\">,</span> stock)\n<span class=\"SQLKeyword\">WHEN</span> stock <span class=\"SQLKeyword\">BETWEEN</span> <span class=\"SQLString\">50</span> <span class=\"SQLKeyword\">AND</span> <span class=\"SQLString\">100</span> <span class=\"SQLKeyword\">THEN</span>\n<span class=\"SQLKeyword\">INTO</span> medium_stock_products (product_id<span class=\"SQLOperator\">,</span> product_name<span class=\"SQLOperator\">,</span> stock)\n<span class=\"SQLKeyword\">VALUES</span> (product_id<span class=\"SQLOperator\">,</span> product_name<span class=\"SQLOperator\">,</span> stock)\n<span class=\"SQLKeyword\">ELSE</span>\n<span class=\"SQLKeyword\">INTO</span> low_stock_products (product_id<span class=\"SQLOperator\">,</span> product_name<span class=\"SQLOperator\">,</span> stock)\n<span class=\"SQLKeyword\">VALUES</span> (product_id<span class=\"SQLOperator\">,</span> product_name<span class=\"SQLOperator\">,</span> stock)\n<span class=\"SQLKeyword\">SELECT</span> product_id<span class=\"SQLOperator\">,</span>\n       product_name<span class=\"SQLOperator\">,</span>\n       stock\n<span class=\"SQLKeyword\">FROM</span>   products<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">6. Merge Statement</h4>\n    <p>This method inserts, updates, or deletes records in a table based on a source table.</p>\n    <p><strong>Example:</strong></p>\n    <p>Merging new orders into the <code>ORDER_SUMMARY</code> table.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">MERGE INTO</span> order_summary os\n<span class=\"SQLKeyword\">USING</span> new_orders no\n<span class=\"SQLKeyword\">ON</span> (os.order_id <span class=\"SQLKeyword\">=</span> no.order_id)\n<span class=\"SQLKeyword\">WHEN MATCHED THEN</span>\n  <span class=\"SQLKeyword\">UPDATE SET</span> os.total_amount <span class=\"SQLKeyword\">=</span> no.total_amount\n<span class=\"SQLKeyword\">WHEN NOT MATCHED THEN</span>\n  <span class=\"SQLKeyword\">INSERT</span> (order_id<span class=\"SQLOperator\">,</span>\n          customer_id<span class=\"SQLOperator\">,</span>\n          total_amount)\n  <span class=\"SQLKeyword\">VALUES</span> (no.order_id<span class=\"SQLOperator\">,</span>\n          no.customer_id<span class=\"SQLOperator\">,</span>\n          no.total_amount)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 80,
    "Question": "What are the various ways to apply the ORDER BY clause in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>The <code>ORDER BY</code> clause in Oracle SQL is utilized to arrange the results of a query based on one or more columns. Sorting can be performed in ascending order (default) or descending order. Below are some examples:</p>\n    <h4 class=\"bold-blue\">Example 1: Basic Usage</h4>\n    <p>Retrieve all customers sorted by their last name in ascending order.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> customer_id<span class=\"SQLOperator\">,</span>\n       first_name<span class=\"SQLOperator\">,</span>\n       last_name<span class=\"SQLOperator\">,</span>\n       email\n<span class=\"SQLKeyword\">FROM</span>   customers\n<span class=\"SQLKeyword\">ORDER BY</span> last_name<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Example 2: Sorting in Descending Order</h4>\n    <p>Retrieve all products sorted by price in descending order.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> product_id<span class=\"SQLOperator\">,</span>\n       product_name<span class=\"SQLOperator\">,</span>\n       category<span class=\"SQLOperator\">,</span>\n       price\n<span class=\"SQLKeyword\">FROM</span>   products\n<span class=\"SQLKeyword\">ORDER BY</span> price <span class=\"SQLKeyword\">DESC</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Example 3: Multiple Columns Sorting</h4>\n    <p>Retrieve all orders sorted by customer ID in ascending order and then by order date in descending order.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> order_id<span class=\"SQLOperator\">,</span>\n       customer_id<span class=\"SQLOperator\">,</span>\n       order_date<span class=\"SQLOperator\">,</span>\n       total_amount\n<span class=\"SQLKeyword\">FROM</span>   orders\n<span class=\"SQLKeyword\">ORDER BY</span> customer_id <span class=\"SQLKeyword\">ASC</span><span class=\"SQLOperator\">,</span>\n          order_date <span class=\"SQLKeyword\">DESC</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Example 4: Sorting by an Expression</h4>\n    <p>Retrieve all products sorted by the length of the product name in ascending order.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> product_id<span class=\"SQLOperator\">,</span>\n       product_name<span class=\"SQLOperator\">,</span>\n       category<span class=\"SQLOperator\">,</span>\n       price\n<span class=\"SQLKeyword\">FROM</span>   products\n<span class=\"SQLKeyword\">ORDER BY</span> <span class=\"SQLFunction\">LENGTH</span>(product_name)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Example 5: Sorting with Null Values</h4>\n    <p>Retrieve all customers sorted by their email addresses, placing null email addresses at the end.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> customer_id<span class=\"SQLOperator\">,</span>\n       first_name<span class=\"SQLOperator\">,</span>\n       last_name<span class=\"SQLOperator\">,</span>\n       email\n<span class=\"SQLKeyword\">FROM</span>   customers\n<span class=\"SQLKeyword\">ORDER BY</span> email <span class=\"SQLKeyword\">NULLS LAST</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Example 6: Using Column Alias in ORDER BY</h4>\n    <p>Retrieve all products and sort them by their discounted price (calculated as price minus discount) in ascending order.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> product_id<span class=\"SQLOperator\">,</span>\n       product_name<span class=\"SQLOperator\">,</span>\n       category<span class=\"SQLOperator\">,</span>\n       price<span class=\"SQLOperator\">,</span>\n       price <span class=\"SQLKeyword\">-</span> discount <span class=\"SQLKeyword\">AS</span> discounted_price\n<span class=\"SQLKeyword\">FROM</span>   products\n<span class=\"SQLKeyword\">ORDER BY</span> discounted_price<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Example 7: Combining ORDER BY with Other Clauses</h4>\n    <p>Retrieve the top 10 most expensive products sorted by price in descending order.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> product_id<span class=\"SQLOperator\">,</span> product_name<span class=\"SQLOperator\">,</span> category<span class=\"SQLOperator\">,</span> price\n<span class=\"SQLKeyword\">FROM</span> products\n<span class=\"SQLKeyword\">ORDER BY</span> price <span class=\"SQLKeyword\">DESC</span>\n<span class=\"SQLKeyword\">FETCH FIRST</span> <span class=\"SQLString\">10</span> <span class=\"SQLKeyword\">ROWS ONLY</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Example 8: Ordering by Column Numbers</h4>\n    <p>Retrieve all customers and sort by the first column (customer_id) in ascending order and the third column (last_name) in descending order.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">*</span>\n<span class=\"SQLKeyword\">FROM</span> customers\n<span class=\"SQLKeyword\">ORDER BY</span> <span class=\"SQLString\">1</span> <span class=\"SQLKeyword\">ASC</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">3</span> <span class=\"SQLKeyword\">DESC</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 81,
    "Question": "What is the function of the DISTINCT keyword in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 12px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode {\n                font-size: 11px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4>Answer:</h4>\n    <p>The <code>DISTINCT</code> keyword is used to remove duplicate rows from the result set.</p>\n    <h4>Example:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Removes duplicate rows from a single column.</span>\n<span class=\"SQLKeyword\">SELECT DISTINCT</span> category_id\n<span class=\"SQLKeyword\">FROM</span> products<span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Removes duplicate rows from multiple columns.</span>\n<span class=\"SQLKeyword\">SELECT DISTINCT</span> category_id<span class=\"SQLOperator\">,</span> category_name\n<span class=\"SQLKeyword\">FROM</span> products<span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Removes any duplicate rows across all columns in the table.</span>\n<span class=\"SQLKeyword\">SELECT DISTINCT</span> <span class=\"SQLKeyword\">*</span>\n<span class=\"SQLKeyword\">FROM</span> products<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 82,
    "Question": "How do you use the LIKE operator for pattern matching in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 12px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode {\n                font-size: 11px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4>Answer:</h4>\n    <p>The <code>LIKE</code> operator in Oracle SQL is used for pattern matching in string comparisons. It allows searching for specified patterns in a column. The <code>LIKE</code> operator is often used with the <code>%</code> and <code>_</code> wildcard characters:</p>\n    <ul>\n        <li><code>%</code> represents zero or more characters.</li>\n        <li><code>_</code> stands for exactly one character.</li>\n    </ul>\n    <h4>1. Identifying Product Names Following a Specific Pattern:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> product_name\n<span class=\"SQLKeyword\">FROM</span> products\n<span class=\"SQLKeyword\">WHERE</span> product_name <span class=\"SQLKeyword\">LIKE</span> <span class=\"SQLString\">'%Earbuds%'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This query retrieves all product names containing \"Earbuds\" at any position within the name.</p>\n    <h4>2. Searching for Customers Based on Email Domain:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> customer_name<span class=\"SQLOperator\">,</span> email\n<span class=\"SQLKeyword\">FROM</span> customers\n<span class=\"SQLKeyword\">WHERE</span> email <span class=\"SQLKeyword\">LIKE</span> <span class=\"SQLString\">'%@gmail.com'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This query lists all customer names and their email addresses that finish with \"@gmail.com.\"</p>\n    <h4>3. Locating Orders Placed in a Specific Month:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> order_id<span class=\"SQLOperator\">,</span> order_date\n<span class=\"SQLKeyword\">FROM</span> orders\n<span class=\"SQLKeyword\">WHERE</span> order_date <span class=\"SQLKeyword\">LIKE</span> <span class=\"SQLString\">'2024-01%'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This query fetches all orders from January 2024.</p>\n    <h4>4. Identifying Products Within a Specific Category:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> category_id<span class=\"SQLOperator\">,</span> category_name\n<span class=\"SQLKeyword\">FROM</span> product_categories\n<span class=\"SQLKeyword\">WHERE</span> category_name <span class=\"SQLKeyword\">LIKE</span> <span class=\"SQLString\">'Electronics%'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This query fetches all categories starting with \"Electronics.\"</p>\n    <h4>5. Searching for SKU Codes Following a Specified Pattern:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> sku<span class=\"SQLOperator\">,</span> product_name\n<span class=\"SQLKeyword\">FROM</span> products\n<span class=\"SQLKeyword\">WHERE</span> sku <span class=\"SQLKeyword\">LIKE</span> <span class=\"SQLString\">'__AB%'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This query retrieves all SKUs where \"AB\" appears as the third and fourth characters in the code.</p>\n    <p>SKU stands for Stock Keeping Unit, which is a unique identifier for each distinct product and service that can be purchased.</p>\n    <h4>6. Case-Insensitive Search for Product Names:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> product_name\n<span class=\"SQLKeyword\">FROM</span> products\n<span class=\"SQLKeyword\">WHERE</span> <span class=\"SQLFunction\">upper</span>(product_name) <span class=\"SQLKeyword\">LIKE</span> <span class=\"SQLString\">'%SPEAKERS%'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This query ensures a case-insensitive search by converting product names to uppercase before matching.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 83,
    "Question": "What is the BETWEEN operator used for in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 12px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode {\n                font-size: 11px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4>Answer:</h4>\n    <p>The <code>BETWEEN</code> operator in Oracle SQL is used to filter the result set within a certain range. It is inclusive, meaning it includes the values specified at both ends of the range. The <code>BETWEEN</code> operator can be used with numeric, date, and text data types.</p>\n    <h4>Syntax:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> column_names\n<span class=\"SQLKeyword\">FROM</span> table_name\n<span class=\"SQLKeyword\">WHERE</span> column_name <span class=\"SQLKeyword\">BETWEEN</span> value1 <span class=\"SQLKeyword\">AND</span>\n                     value2<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4>1. Selecting Orders within a Date Range:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> order_id<span class=\"SQLOperator\">,</span>\n       customer_id<span class=\"SQLOperator\">,</span>\n       order_date\n<span class=\"SQLKeyword\">FROM</span>   orders\n<span class=\"SQLKeyword\">WHERE</span>  order_date <span class=\"SQLKeyword\">BETWEEN</span> <span class=\"SQLFunction\">TO_DATE</span>(<span class=\"SQLString\">'2023-01-01'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span>) <span class=\"SQLKeyword\">AND</span>\n                     <span class=\"SQLFunction\">TO_DATE</span>(<span class=\"SQLString\">'2023-01-31'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span>)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This query finds all orders placed between January 1, 2023, and January 31, 2023.</p>\n    <h4>2. Filtering Products within a Price Range:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> product_id<span class=\"SQLOperator\">,</span> product_name<span class=\"SQLOperator\">,</span> price\n<span class=\"SQLKeyword\">FROM</span> products\n<span class=\"SQLKeyword\">WHERE</span> price <span class=\"SQLKeyword\">BETWEEN</span> <span class=\"SQLString\">50</span> <span class=\"SQLKeyword\">AND</span> <span class=\"SQLString\">100</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This query lists all products priced between $50 and $100.</p>\n    <h4>3. Text Range:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">*</span>\n<span class=\"SQLKeyword\">FROM</span> products\n<span class=\"SQLKeyword\">WHERE</span> product_name <span class=\"SQLKeyword\">BETWEEN</span> <span class=\"SQLString\">'A'</span> <span class=\"SQLKeyword\">AND</span> <span class=\"SQLString\">'M'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This query fetches all product names that fall alphabetically between \"A\" and \"M\".</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 84,
    "Question": "What is a Tablespace in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 12px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode {\n                font-size: 11px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4>Answer:</h4>\n    <p>A tablespace in Oracle SQL is a logical entity that groups related structures within an Oracle database. Essentially, it acts as a storage container for data structures like tables and indexes. Tablespaces play a crucial role in organizing data storage in the database and enhancing both space management and performance.</p>\n    <h4>Characteristics of Tablespaces:</h4>\n    <ul>\n        <li><strong>Logical Structure:</strong> A tablespace organizes related structures and typically comprises one or more physical files on disk, known as data files.</li>\n        <li><strong>Tablespace Types:</strong></li>\n        <ul>\n            <li><strong>Permanent Tablespaces:</strong> Utilized for storing enduring user and application data.</li>\n            <li><strong>Temporary Tablespaces:</strong> Employed for temporary data storage during operations like query sorting.</li>\n            <li><strong>Undo Tablespaces:</strong> Dedicated to storing undo data necessary for reversing transactions when needed.</li>\n        </ul>\n        <li><strong>Data Files:</strong> These are the physical manifestations of tablespaces on disk. The database performance and its ability to scale can be influenced by the number and size of these files.</li>\n        <li><strong>Management Practices:</strong> Database administrators (DBAs) manage tablespaces by adding or adjusting data files, optimizing disk utilization, and potentially improving database performance.</li>\n        <li><strong>Storage Allocation Mechanisms:</strong></li>\n        <ul>\n            <li><strong>Extent Management:</strong> Tablespaces allocate space in blocks called extents.</li>\n            <li><strong>Segment Management:</strong> Larger structures, such as tables and indexes, are organized in segments within a tablespace.</li>\n        </ul>\n        <li><strong>Advantages:</strong></li>\n        <ul>\n            <li><strong>Effective Space Management:</strong> They efficiently manage the allocation of disk space.</li>\n            <li><strong>Performance Enhancement:</strong> They allow specific tuning of storage settings to meet application demands, enhancing performance.</li>\n            <li><strong>Security and Isolation:</strong> They can segregate data, enhancing security and structuring.</li>\n        </ul>\n    </ul>\n    <p>In essence, tablespaces are integral to Oracle databases, ensuring efficient data management, performance enhancement, and data integrity.</p>\n    <h4>Creating a Tablespace: Syntax Overview:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLESPACE</span> tablespace_name <span class=\"SQLKeyword\">DATAFILE</span> <span class=\"SQLString\">'file_path'</span> \n<span class=\"SQLKeyword\">SIZE</span> file_size <span class=\"SQLKeyword\">[</span>\n<span class=\"SQLKeyword\">AUTOEXTEND ON</span> <span class=\"SQLKeyword\">[</span> <span class=\"SQLKeyword\">NEXT</span> size_increment <span class=\"SQLKeyword\">]</span> <span class=\"SQLKeyword\">[</span> <span class=\"SQLKeyword\">MAXSIZE</span> max_size <span class=\"SQLKeyword\">]</span> <span class=\"SQLKeyword\">]</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">CREATE TABLESPACE</span> tbs_example <span class=\"SQLKeyword\">DATAFILE</span> <span class=\"SQLString\">'example_ts01.dbf'</span> \n<span class=\"SQLKeyword\">SIZE</span> <span class=\"SQLString\">100M</span> <span class=\"SQLKeyword\">AUTOEXTEND</span>\n<span class=\"SQLKeyword\">ON</span> <span class=\"SQLKeyword\">NEXT</span> <span class=\"SQLString\">10M</span> <span class=\"SQLKeyword\">MAXSIZE</span> <span class=\"SQLString\">500M</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <ul>\n        <li><code>tablespace_name</code>: The name of the new tablespace.</li>\n        <li><code>file_path</code>: The path where the data file associated with the tablespace will be stored.</li>\n        <li><code>file_size</code>: The initial size of the data file.</li>\n        <li><code>AUTOEXTEND ON</code>: Optional. If set, allows the data file to automatically increase in size.</li>\n        <li><code>size_increment</code>: Optional. The size by which the data file will increase.</li>\n        <li><code>max_size</code>: Optional. The maximum size to which the data file can grow.</li>\n    </ul>\n    <p>This command creates a new tablespace named <code>sales_data</code> with a data file <code>sales_data01.dbf</code> of size 100MB.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 85,
    "Question": "What is the Oracle Data Dictionary?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4>Answer:</h4>\n    <p>The Oracle Data Dictionary is a set of read-only tables and views that provide comprehensive information about the database. It includes details about database objects such as tables, indexes, columns, users, and other structures. The data dictionary is essential for database administrators and developers as it provides metadata about the database's structure and contents.</p>\n    <h4>Key Components of the Oracle Data Dictionary:</h4>\n    <ul>\n        <li><strong>User Views:</strong></li>\n        <ul>\n            <li><strong>USER_TABLES:</strong> Information about tables owned by the user.</li>\n            <li><strong>USER_TAB_COLUMNS:</strong> Information about columns in the user's tables.</li>\n            <li><strong>USER_INDEXES:</strong> Information about indexes owned by the user.</li>\n            <li><strong>USER_CONSTRAINTS:</strong> Information about constraints on the user's tables.</li>\n        </ul>\n        <li><strong>All Views:</strong></li>\n        <ul>\n            <li><strong>ALL_TABLES:</strong> Information about all tables accessible to the user.</li>\n            <li><strong>ALL_TAB_COLUMNS:</strong> Information about columns in accessible tables.</li>\n            <li><strong>ALL_INDEXES:</strong> Information about indexes accessible to the user.</li>\n        </ul>\n        <li><strong>DBA Views:</strong></li>\n        <ul>\n            <li><strong>DBA_TABLES:</strong> Information about all tables in the database.</li>\n            <li><strong>DBA_TAB_COLUMNS:</strong> Information about all columns in the database.</li>\n            <li><strong>DBA_INDEXES:</strong> Information about all indexes in the database.</li>\n            <li><strong>DBA_USERS:</strong> Information about all users in the database.</li>\n        </ul>\n    </ul>\n    <h4>Examples and Queries:</h4>\n    <h4>1. USER_TABLES:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> table_name <span class=\"SQLKeyword\">FROM</span> user_tables<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4>Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>TABLE_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>PRODUCTS</td>\n            </tr>\n            <tr>\n                <td>ORDERS</td>\n            </tr>\n            <tr>\n                <td>CUSTOMERS</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4>2. USER_TAB_COLUMNS:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> column_name<span class=\"SQLOperator\">,</span> data_type<span class=\"SQLOperator\">,</span> data_length\n<span class=\"SQLKeyword\">FROM</span> user_tab_columns\n<span class=\"SQLKeyword\">WHERE</span> table_name <span class=\"SQLKeyword\">=</span> <span class=\"SQLString\">'ORDERS'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4>Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>COLUMN_NAME</th>\n                <th>DATA_TYPE</th>\n                <th>DATA_LENGTH</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>ORDER_ID</td>\n                <td>NUMBER</td>\n                <td>22</td>\n            </tr>\n            <tr>\n                <td>CUSTOMER_ID</td>\n                <td>NUMBER</td>\n                <td>22</td>\n            </tr>\n            <tr>\n                <td>ORDER_DATE</td>\n                <td>DATE</td>\n                <td>7</td>\n            </tr>\n            <tr>\n                <td>TOTAL_AMOUNT</td>\n                <td>NUMBER</td>\n                <td>22</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4>3. USER_INDEXES:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> index_name<span class=\"SQLOperator\">,</span> table_name\n<span class=\"SQLKeyword\">FROM</span> user_indexes\n<span class=\"SQLKeyword\">WHERE</span> table_name <span class=\"SQLKeyword\">=</span> <span class=\"SQLString\">'CUSTOMERS'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4>Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>INDEX_NAME</th>\n                <th>TABLE_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>IDX_CUSTOMER_ID</td>\n                <td>CUSTOMERS</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4>4. USER_CONSTRAINTS:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> constraint_name<span class=\"SQLOperator\">,</span> constraint_type\n<span class=\"SQLKeyword\">FROM</span> user_constraints\n<span class=\"SQLKeyword\">WHERE</span> table_name <span class=\"SQLKeyword\">=</span> <span class=\"SQLString\">'PRODUCTS'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4>Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CONSTRAINT_NAME</th>\n                <th>CONSTRAINT_TYPE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>SYS_C0011345</td>\n                <td>P (Primary Key)</td>\n            </tr>\n            <tr>\n                <td>SYS_C0011346</td>\n                <td>U (Unique)</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4>5. ALL_TABLES:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> owner<span class=\"SQLOperator\">,</span> table_name\n<span class=\"SQLKeyword\">FROM</span> all_tables<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4>Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>OWNER</th>\n                <th>TABLE_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>HR</td>\n                <td>EMPLOYEES</td>\n            </tr>\n            <tr>\n                <td>SALES</td>\n                <td>ORDERS</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4>6. DBA_USERS:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> username<span class=\"SQLOperator\">,</span> account_status\n<span class=\"SQLKeyword\">FROM</span> dba_users<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4>Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>USERNAME</th>\n                <th>ACCOUNT_STATUS</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>ADMIN</td>\n                <td>OPEN</td>\n            </tr>\n            <tr>\n                <td>ECOMM_USER</td>\n                <td>OPEN</td>\n            </tr>\n            <tr>\n                <td>TEST_USER</td>\n                <td>LOCKED</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 86,
    "Question": "How is the CONNECT BY PRIOR clause used in hierarchical queries?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>The <code>CONNECT BY PRIOR</code> clause in Oracle is used to perform hierarchical queries, which allow retrieval of data based on hierarchical relationships, such as parent-child relationships. This clause is often used with the <code>START WITH</code> clause to specify the root of the hierarchy.</p>\n    <h4 class=\"bold-maroon\">Syntax:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> column1<span class=\"SQLOperator\">,</span> column2<span class=\"SQLOperator\">,</span> <span class=\"SQLKeyword\">...</span>\n<span class=\"SQLKeyword\">FROM</span> table\n<span class=\"SQLKeyword\">START WITH</span> condition\n<span class=\"SQLKeyword\">CONNECT BY PRIOR</span> parent_column <span class=\"SQLKeyword\">=</span> child_column<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Example Scenario:</h4>\n    <p>Consider an example of an employee table where each employee has a manager, creating a hierarchical relationship.</p>\n    <h4 class=\"bold-maroon\">Input Data: Table EMPLOYEES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>EMPLOYEE_NAME</th>\n                <th>MANAGER_ID</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Ram</td>\n                <td>NULL</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Monika</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Sara</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>Tom</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Anna</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>6</td>\n                <td>Nancy</td>\n                <td>3</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Hierarchical Query</h4>\n    <p>Retrieve the hierarchical structure starting from Ram (employee_id = 1):</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> employee_id<span class=\"SQLOperator\">,</span>\n       employee_name<span class=\"SQLOperator\">,</span>\n       manager_id<span class=\"SQLOperator\">,</span>\n       <span class=\"SQLKeyword\">LEVEL</span>\n<span class=\"SQLKeyword\">FROM</span>   employees\n<span class=\"SQLKeyword\">START WITH</span> employee_id <span class=\"SQLKeyword\">=</span> <span class=\"SQLString\">1</span>\n<span class=\"SQLKeyword\">CONNECT BY PRIOR</span> employee_id <span class=\"SQLKeyword\">=</span> manager_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>EMPLOYEE_NAME</th>\n                <th>MANAGER_ID</th>\n                <th>LEVEL</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Ram</td>\n                <td>NULL</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Monika</td>\n                <td>1</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Sara</td>\n                <td>1</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>Tom</td>\n                <td>2</td>\n                <td>3</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Anna</td>\n                <td>2</td>\n                <td>3</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>6</td>\n                <td>Nancy</td>\n                <td>3</td>\n                <td>3</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><code>START WITH employee_id = 1</code>: The hierarchy starts with the employee Ram (employee_id = 1).</li>\n        <li><code>CONNECT BY PRIOR employee_id = manager_id</code>: For each employee, find their subordinates by matching the <code>employee_id</code> of the parent (manager) to the <code>manager_id</code> of the child (employee).</li>\n        <li><code>LEVEL</code>: This pseudo-column indicates the level of the hierarchy, with the root being at level 1.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Another Example with Different Root</h4>\n    <p>Retrieve the hierarchical structure starting from Monika (employee_id = 2):</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> employee_id<span class=\"SQLOperator\">,</span>\n       employee_name<span class=\"SQLOperator\">,</span>\n       manager_id<span class=\"SQLOperator\">,</span>\n       <span class=\"SQLKeyword\">LEVEL</span>\n<span class=\"SQLKeyword\">FROM</span>   employees\n<span class=\"SQLKeyword\">START WITH</span> employee_id <span class=\"SQLKeyword\">=</span> <span class=\"SQLString\">2</span>\n<span class=\"SQLKeyword\">CONNECT BY PRIOR</span> employee_id <span class=\"SQLKeyword\">=</span> manager_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>EMPLOYEE_NAME</th>\n                <th>MANAGER_ID</th>\n                <th>LEVEL</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>2</td>\n                <td>Monika</td>\n                <td>1</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>Tom</td>\n                <td>2</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Anna</td>\n                <td>2</td>\n                <td>2</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><code>START WITH employee_id = 2</code>: The hierarchy starts with the employee Monika (employee_id = 2).</li>\n        <li><code>CONNECT BY PRIOR employee_id = manager_id</code>: For each employee, find their subordinates by matching the <code>employee_id</code> of the parent (manager) to the <code>manager_id</code> of the child (employee).</li>\n    </ul>\n    <p>The <code>CONNECT BY PRIOR</code> clause is an important feature in Oracle for querying hierarchical data, providing a straightforward way to traverse parent-child relationships within a table.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 87,
    "Question": "What does the SYSTIMESTAMP function do in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>The <code>SYSTIMESTAMP</code> function in Oracle SQL returns the current date and time in the system's time zone as a <code>TIMESTAMP WITH TIME ZONE</code> value. It provides a high-precision timestamp that includes the year, month, day, hour, minute, second, and fractional seconds, along with the time zone offset.</p>\n    <h4 class=\"bold-maroon\">Example:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">SYSTIMESTAMP</span> <span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n    </div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th><code>SYSTIMESTAMP</code></th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>05-JUL-24 11.45.30.123456 AM -07:00</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 88,
    "Question": "How do you write recursive queries in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Oracle SQL's <code>CONNECT BY</code> clause is purpose-built for managing hierarchical or recursive queries, which is essential when dealing with data that naturally forms a tree-like structure, such as organizational hierarchies. This clause is often used in conjunction with <code>START WITH</code> to specify the root of the recursion.</p>\n    <h4 class=\"bold-maroon\">Scenario: Organizational Hierarchy</h4>\n    <p>Consider a table named <code>employees</code> that represents a simple organizational structure. Each employee is linked to a manager, except for the CEO who has no manager. Below is the structure and sample data for the <code>employees</code> table:</p>\n    <h4 class=\"bold-maroon\">Input Data: Table - EMPLOYEES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>Employee ID</th>\n                <th>NAME</th>\n                <th>Manager ID</th>\n                <th>Reports to</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Alice</td>\n                <td>NULL</td>\n                <td>(CEO, no manager)</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Bob</td>\n                <td>1</td>\n                <td>Alice</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Charlie</td>\n                <td>2</td>\n                <td>Bob</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>David</td>\n                <td>2</td>\n                <td>Bob</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Eva</td>\n                <td>3</td>\n                <td>Charlie</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Recursive Query with <code>CONNECT BY</code></h4>\n    <p>To illustrate how to retrieve an entire organizational hierarchy starting from the CEO, consider the following SQL query:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> employee_id<span class=\"SQLOperator\">,</span>\n       name<span class=\"SQLOperator\">,</span>\n       manager_id<span class=\"SQLOperator\">,</span>\n       <span class=\"SQLKeyword\">LEVEL</span>\n<span class=\"SQLKeyword\">FROM</span>   employees\n<span class=\"SQLKeyword\">START WITH</span> manager_id <span class=\"SQLKeyword\">IS NULL</span> <span class=\"SQLComment\">-- Starts with the CEO, Alice</span>\n<span class=\"SQLKeyword\">CONNECT BY PRIOR</span> employee_id <span class=\"SQLKeyword\">=</span> manager_id\n<span class=\"SQLKeyword\">ORDER SIBLINGS BY</span> name<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>NAME</th>\n                <th>MANAGER_ID</th>\n                <th>LEVEL</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Alice</td>\n                <td>NULL</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Bob</td>\n                <td>1</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Charlie</td>\n                <td>2</td>\n                <td>3</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>5</td>\n                <td>Eva</td>\n                <td>3</td>\n                <td>4</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>4</td>\n                <td>David</td>\n                <td>2</td>\n                <td>3</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <p>This query effectively constructs the hierarchy beginning with the CEO (where <code>manager_id</code> is <code>NULL</code>) and recursively identifies all direct and indirect subordinates. The <code>LEVEL</code> pseudo-column in the query output indicates the hierarchical level of each employee relative to the CEO.</p>\n    <h4 class=\"bold-maroon\">Key Components of the Query:</h4>\n    <ul>\n        <li><b><code>START WITH</code></b>: Identifies the root of the hierarchy; in this scenario, the CEO, as indicated by <code>manager_id IS NULL</code>.</li>\n        <li><b><code>CONNECT BY PRIOR</code></b>: Establishes the recursive relationship, linking each employee to their manager. The current row's <code>employee_id</code> should match the preceding row's <code>manager_id</code>.</li>\n        <li><b><code>ORDER SIBLINGS BY</code></b>: Ensures that the employees are alphabetically sorted at each level of the hierarchy.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 89,
    "Question": "How do you use the TO_TIMESTAMP function in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>The <code>TO_TIMESTAMP</code> function converts a string to a timestamp type, using a specified timestamp format.</p>\n    <h4 class=\"bold-maroon\">Syntax:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> \n<span class=\"SQLFunction\">TO_TIMESTAMP</span>(<span class=\"SQLString\">'2024-06-17 12:34:56.789'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD HH24:MI:SS.FF'</span>)\n<span class=\"SQLKeyword\">FROM</span>   dual<span class=\"SQLOperator\">;</span>\n</pre>\n    </div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th><code>TO_TIMESTAMP</code></th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>17-JUN-24 12.34.56.789000 PM</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 90,
    "Question": "How do you use the EXTRACT function in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>The <code>EXTRACT</code> function in Oracle SQL is designed to retrieve specific components from date or time values, such as the year, month, day, hour, minute, or second. It can also extract elements from interval values, like the number of years or months. This capability is particularly useful for data analysis, reporting, or when manipulating or comparing date and time values based on their individual components.</p>\n    <h4 class=\"bold-maroon\">Syntax and Usage of <code>EXTRACT</code></h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLFunction\">EXTRACT</span> <span class=\"SQLKeyword\">(</span>field <span class=\"SQLKeyword\">FROM</span> source<span class=\"SQLKeyword\">)</span>\n</pre>\n</div>\n    <ul>\n        <li><b>field</b>: Specifies the component to extract, such as <code>YEAR</code>, <code>MONTH</code>, <code>DAY</code>, <code>HOUR</code>, <code>MINUTE</code>, or <code>SECOND</code> for date and time values.</li>\n        <li><b>source</b>: The date, time, or interval expression from which the component is extracted.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Examples of Using <code>EXTRACT</code></h4>\n    <h4 class=\"bold-maroon\">Example 1: Extracting Date Components</h4>\n    <p>To extract the year, month, and day from a specific date:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n  <span class=\"SQLFunction\">EXTRACT</span>(<span class=\"SQLKeyword\">YEAR FROM</span> <span class=\"SQLKeyword\">DATE</span> <span class=\"SQLString\">'2023-07-05'</span>) <span class=\"SQLKeyword\">AS</span> year<span class=\"SQLOperator\">,</span>\n  <span class=\"SQLFunction\">EXTRACT</span>(<span class=\"SQLKeyword\">MONTH FROM</span> <span class=\"SQLKeyword\">DATE</span> <span class=\"SQLString\">'2023-07-05'</span>) <span class=\"SQLKeyword\">AS</span> month<span class=\"SQLOperator\">,</span>\n  <span class=\"SQLFunction\">EXTRACT</span>(<span class=\"SQLKeyword\">DAY FROM</span> <span class=\"SQLKeyword\">DATE</span> <span class=\"SQLString\">'2023-07-05'</span>) <span class=\"SQLKeyword\">AS</span> day\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>YEAR</th>\n                <th>MONTH</th>\n                <th>DAY</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>2023</td>\n                <td>7</td>\n                <td>5</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <p>This query separates the year, month, and day from a given date.</p>\n    <h4 class=\"bold-maroon\">Example 2: Extracting Time Components</h4>\n    <p>For extracting hour, minute, and second from a timestamp:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n  <span class=\"SQLFunction\">EXTRACT</span>(<span class=\"SQLKeyword\">HOUR FROM</span> <span class=\"SQLKeyword\">TIMESTAMP</span> <span class=\"SQLString\">'2023-07-05 14:35:45'</span>) <span class=\"SQLKeyword\">AS</span> hour<span class=\"SQLOperator\">,</span>\n  <span class=\"SQLFunction\">EXTRACT</span>(<span class=\"SQLKeyword\">MINUTE FROM</span> <span class=\"SQLKeyword\">TIMESTAMP</span> <span class=\"SQLString\">'2023-07-05 14:35:45'</span>) <span class=\"SQLKeyword\">AS</span> minute<span class=\"SQLOperator\">,</span>\n  <span class=\"SQLFunction\">EXTRACT</span>(<span class\n=\"SQLKeyword\">SECOND FROM</span> <span class=\"SQLKeyword\">TIMESTAMP</span> <span class=\"SQLString\">'2023-07-05 14:35:45'</span>) <span class=\"SQLKeyword\">AS</span> second\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>HOUR</th>\n                <th>MINUTE</th>\n                <th>SECOND</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>14</td>\n                <td>35</td>\n                <td>45</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <p>This example demonstrates how to retrieve time components from a specific timestamp.</p>\n    <h4 class=\"bold-maroon\">Example 3: Extracting Components from System Date</h4>\n    <p>Utilizing <code>EXTRACT</code> with the system's current date:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n  <span class=\"SQLFunction\">EXTRACT</span>(<span class=\"SQLKeyword\">YEAR FROM</span> <span class=\"SQLFunction\">SYSDATE</span>) <span class=\"SQLKeyword\">AS</span> current_year<span class=\"SQLOperator\">,</span>\n  <span class=\"SQLFunction\">EXTRACT</span>(<span class=\"SQLKeyword\">MONTH FROM</span> <span class=\"SQLFunction\">SYSDATE</span>) <span class=\"SQLKeyword\">AS</span> current_month<span class=\"SQLOperator\">,</span>\n  <span class=\"SQLFunction\">EXTRACT</span>(<span class=\"SQLKeyword\">DAY FROM</span> <span class=\"SQLFunction\">SYSDATE</span>) <span class=\"SQLKeyword\">AS</span> current_day\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CURRENT_YEAR</th>\n                <th>CURRENT_MONTH</th>\n                <th>CURRENT_DAY</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>2024</td>\n                <td>7</td>\n                <td>5</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <p>This query is useful for dynamically obtaining the current date's components.</p>\n    <h4 class=\"bold-maroon\">Example 4: Extracting from Intervals</h4>\n    <p>Extracting years and months from a defined interval:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n<span class=\"SQLFunction\">EXTRACT</span>(<span class=\"SQLKeyword\">YEAR FROM INTERVAL</span> <span class=\"SQLString\">'5-2'</span> <span class=\"SQLKeyword\">YEAR TO MONTH</span>)  <span class=\"SQLKeyword\">AS</span> interval_years<span class=\"SQLOperator\">,</span>\n<span class=\"SQLFunction\">EXTRACT</span>(<span class=\"SQLKeyword\">MONTH FROM INTERVAL</span> <span class=\"SQLString\">'5-2'</span> <span class=\"SQLKeyword\">YEAR TO MONTH</span>) <span class=\"SQLKeyword\">AS</span> interval_months\n<span class=\"SQLKeyword\">FROM</span>\n    dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>INTERVAL_YEARS</th>\n                <th>INTERVAL_MONTHS</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>2</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <p>This example showcases the extraction of components from an interval value.</p>\n    <h4 class=\"bold-maroon\">Use Case: Analyzing Sales Data</h4>\n    <p>For a practical application, consider analyzing sales data grouped by sale month and year:</p>\n    <h4 class=\"bold-maroon\">Input Data: Table SALES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>SALE_ID</th>\n                <th>SALE_DATE</th>\n                <th>AMOUNT</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>01-15-2023 00:00:00</td>\n                <td>150</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>01-20-2023 00:00:00</td>\n                <td>200.5</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>02-10-2023 00:00:00</td>\n                <td>980</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>02-15-2023 00:00:00</td>\n                <td>300.25</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>03-05-2023 00:00:00</td>\n                <td>450</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>6</td>\n                <td>03-12-2023 00:00:00</td>\n                <td>330</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>7</td>\n                <td>04-25-2023 00:00:00</td>\n                <td>720</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>8</td>\n                <td>05-03-2023 00:00:00</td>\n                <td>210</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>9</td>\n                <td>05-19-2023 00:00:00</td>\n                <td>650</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>10</td>\n                <td>06-29-2023 00:00:00</td>\n                <td>120</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n  <span class=\"SQLFunction\">EXTRACT</span>(<span class=\"SQLKeyword\">YEAR FROM</span> sale_date) <span class=\"SQLKeyword\">AS</span> sale_year<span class=\"SQLOperator\">,</span>\n  <span class=\"SQLFunction\">EXTRACT</span>(<span class=\"SQLKeyword\">MONTH FROM</span> sale_date) <span class=\"SQLKeyword\">AS</span> sale_month<span class=\"SQLOperator\">,</span>\n  <span class=\"SQLKeyword\">COUNT</span>(<span class=\"SQLKeyword\">*</span>) <span class=\"SQLKeyword\">AS</span> total_sales\n<span class=\"SQLKeyword\">FROM</span> sales\n<span class=\"SQLKeyword\">GROUP BY</span>\n  <span class=\"SQLFunction\">EXTRACT</span>(<span class=\"SQLKeyword\">YEAR FROM</span> sale_date)<span class=\"SQLOperator\">,</span>\n  <span class=\"SQLFunction\">EXTRACT</span>(<span class=\"SQLKeyword\">MONTH FROM</span> sale_date)\n<span class=\"SQLKeyword\">ORDER BY</span> sale_year<span class=\"SQLOperator\">,</span> sale_month<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>SALE_YEAR</th>\n                <th>SALE_MONTH</th>\n                <th>TOTAL_SALES</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>2023</td>\n                <td>1</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2023</td>\n                <td>2</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>2023</td>\n                <td>3</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2023</td>\n                <td>4</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>2023</td>\n                <td>5</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2023</td>\n                <td>6</td>\n                <td>1</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <p>This SQL query groups sales records by month and year, utilizing <code>EXTRACT</code> to facilitate temporal grouping in the dataset.</p>\n    <h4 class=\"bold-maroon\">Conclusion:</h4>\n    <p>Oracle SQL's <code>EXTRACT</code> function simplifies the process of decomposing date and time values into individual components, enhancing data manipulation capabilities for detailed temporal analysis and reporting.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 91,
    "Question": "What is ETL in the context of SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>ETL (Extract, Transform, Load) is a process used primarily in data warehousing projects where data is extracted from heterogeneous sources, transformed into a format suitable for analysis and reporting, and then loaded into a target database or data warehouse. In the context of SQL (Structured Query Language), ETL involves several steps and techniques:</p>\n    <h4 class=\"bold-maroon\">1. Extract</h4>\n    <ul>\n        <li>Data is collected from various sources, which could include relational databases, flat files, web services, and more.</li>\n        <li>SQL is often used to query and retrieve this data, especially from relational databases.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">2. Transform</h4>\n    <ul>\n        <li>The extracted data often needs to be cleaned, normalized, and converted to ensure it fits the schema of the target database and meets the business requirements.</li>\n        <li>SQL provides various functions and procedures for tasks like converting data types, merging fields, splitting strings, handling null values, and applying business logic.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">3. Load</h4>\n    <ul>\n        <li>The final step involves loading the transformed data into a target database or data warehouse.</li>\n        <li>SQL is used to insert the data into the appropriate tables. This step often requires optimizations to handle large volumes of data efficiently, like using bulk insert operations or adjusting transaction settings for better performance.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Common Scenarios for ETL</h4>\n    <ul>\n        <li><b>Data Warehousing</b>: Consolidating data from various sources into a centralized repository.</li>\n        <li><b>Data Integration</b>: Combining data from different sources to provide a unified view.</li>\n        <li><b>Business Intelligence (BI) and Reporting</b>: Preparing data for analytical processing and reporting.</li>\n        <li><b>Migration Projects</b>: Moving data from legacy systems to modern databases or data warehouses.</li>\n        <li><b>Data Cleaning and Transformation</b>: Ensuring data quality and consistency before analysis.</li>\n        <li><b>Real-time Data Processing</b>: Handling and processing data in near real-time for timely insights.</li>\n        <li><b>Master Data Management (MDM)</b>: Maintaining a single, accurate view of critical business data.</li>\n        <li><b>Big Data Processing</b>: Managing and transforming large volumes of data efficiently.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 92,
    "Question": "How do the IN and BETWEEN operators differ in SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold\n-red\">The <code>IN</code> operator checks if a value matches any value in a list, while the <code>BETWEEN</code> operator checks if a value falls within a specified range.</h4>\n    <h4 class=\"bold-maroon\">Syntax:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">*</span>\n<span class=\"SQLKeyword\">FROM</span>   products\n<span class=\"SQLKeyword\">WHERE</span>  product_id <span class=\"SQLKeyword\">IN</span> <span class=\"SQLKeyword\">(</span> <span class=\"SQLString\">111</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">221</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">333</span> <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">*</span>\n<span class=\"SQLKeyword\">FROM</span>   products\n<span class=\"SQLKeyword\">WHERE</span>  price <span class=\"SQLKeyword\">BETWEEN</span> <span class=\"SQLString\">10</span> <span class=\"SQLKeyword\">AND</span> <span class=\"SQLString\">20</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Comparison:</h4>\n    <ul>\n        <li><b>IN Operator</b>: Useful for matching values in a predefined list. It can handle non-contiguous values efficiently.</li>\n        <li><b>BETWEEN Operator</b>: Ideal for checking if a value lies within a continuous range, inclusive of the start and end values.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 93,
    "Question": "Can a foreign key in an Oracle database contain values that do not exist in the primary key of the parent table?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In an Oracle database, a foreign key cannot have values that are not present in the primary key of the parent table. This fundamental feature of relational databases ensures referential integrity by linking two tables together and requiring that values in the foreign key column of the child table match values in the primary key column of the parent table.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 94,
    "Question": "Can a foreign key contain null and duplicate values?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In Oracle, a foreign key can contain null values. This allows for rows in the child table that do not have a corresponding row in the parent table, which is useful in situations where the relationship is optional.</p>\n    <h4 class=\"bold-maroon\">Example:</h4>\n    <p>Tables:</p>\n    <ol>\n        <li><b>CUSTOMERS</b> - Stores customer details.</li>\n        <li><b>ORDERS</b> - Stores order details, with a foreign key reference to <b>CUSTOMERS</b>.</li>\n    </ol>\n    <h4 class=\"bold-maroon\">CUSTOMERS Table:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> CUSTOMERS <span class=\"SQLKeyword\">(</span>\n    CUSTOMER_ID NUMBER <span class=\"SQLKeyword\">PRIMARY KEY</span><span class=\"SQLOperator\">,</span>\n    CUSTOMER_NAME VARCHAR2<span class=\"SQLKeyword\">(100)</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">ORDERS Table:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> ORDERS <span class=\"SQLKeyword\">(</span>\n    ORDER_ID NUMBER <span class=\"SQLKeyword\">PRIMARY KEY</span><span class=\"SQLOperator\">,</span>\n    ORDER_DATE <span class=\"SQLKeyword\">DATE</span><span class=\"SQLOperator\">,</span>\n    CUSTOMER_ID NUMBER<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLKeyword\">FOREIGN KEY</span> <span class=\"SQLKeyword\">(</span>CUSTOMER_ID<span class=\"SQLKeyword\">) </span>\n      <span class=\"SQLKeyword\">REFERENCES</span> CUSTOMERS<span class=\"SQLKeyword\">(</span>CUSTOMER_ID<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Inserting Data with Null Foreign Key:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">INSERT INTO</span> ORDERS\n            <span class=\"SQLKeyword\">(</span>ORDER_ID<span class=\"SQLOperator\">,</span>\n             ORDER_DATE<span class=\"SQLOperator\">,</span>\n             CUSTOMER_ID<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">VALUES</span>      <span class=\"SQLKeyword\">(</span><span class=\"SQLString\">1</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLFunction\">TO_DATE</span><span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'2023-01-01'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLKeyword\">NULL</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">INSERT INTO</span> ORDERS\n            <span class=\"SQLKeyword\">(</span>ORDER_ID<span class=\"SQLOperator\">,</span>\n             ORDER_DATE<span class=\"SQLOperator\">,</span>\n             CUSTOMER_ID<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">VALUES</span>      <span class=\"SQLKeyword\">(</span><span class=\"SQLString\">2</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLFunction\">TO_DATE</span><span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'2023-02-01'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLKeyword\">NULL</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Inserting Data with Duplicate Foreign Key:</h4>\n    <p>If there is no unique constraint on the <code>CUSTOMER_ID</code> in the <b>ORDERS</b> table, you can insert multiple orders for the same customer.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">INSERT INTO</span> CUSTOMERS\n            <span class=\"SQLKeyword\">(</span>CUSTOMER_ID<span class=\"SQLOperator\">,</span>\n             CUSTOMER_NAME<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">VALUES</span>      <span class=\"SQLKeyword\">(</span><span class=\"SQLString\">1</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLString\">'John Cena'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">INSERT INTO</span> ORDERS\n            <span class=\"SQLKeyword\">(</span>ORDER_ID<span class=\"SQLOperator\">,</span>\n             ORDER_DATE<span class=\"SQLOperator\">,</span>\n             CUSTOMER_ID<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">VALUES</span>      <span class=\"SQLKeyword\">(</span><span class=\"SQLString\">3</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLFunction\">TO_DATE</span><span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'2023-03-01'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLString\">1</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">INSERT INTO</span> ORDERS\n            <span class=\"SQLKeyword\">(</span>ORDER_ID<span class=\"SQLOperator\">,</span>\n             ORDER_DATE<span class=\"SQLOperator\">,</span>\n             CUSTOMER_ID<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">VALUES</span>      <span class=\"SQLKeyword\">(</span><span class=\"SQLString\">4</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLFunction\">TO_DATE</span><span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'2023-04-01'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">,</span>\n             <span class=\"SQLString\">1</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">*</span> <span class=\"SQLKeyword\">FROM</span> ORDERS<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORDER_ID</th>\n                <th>ORDER_DATE</th>\n                <th>CUSTOMER_ID</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>2023-01-01</td>\n                <td>NULL</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>2023-02-01</td>\n                <td>NULL</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>2023-03-01</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>2023-04-01</td>\n                <td>1</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <p>In this example:</p>\n    <ul>\n        <li>Orders 1 and 2 have <code>NULL</code> for <code>CUSTOMER_ID</code>.</li>\n        <li>Orders 3 and 4 have the same <code>CUSTOMER_ID</code> (1), demonstrating that duplicates are allowed if there is no unique constraint on the <code>CUSTOMER_ID</code> in the <b>ORDERS</b> table.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 95,
    "Question": "What are a table, row, value, and a field in the context of a database?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In the context of a database, the terms \"table,\" \"row,\" \"value,\" and \"field\" (or \"column\") are fundamental concepts used to organize and manage data. Here's a detailed explanation of each, along with examples:</p>\n    <h4 class=\"bold-maroon\">Table</h4>\n    <p>A table is a collection of related data organized into rows and columns. Each table in an Oracle database represents a specific entity, such as customers, products, or orders.</p>\n    <h4 class=\"bold-maroon\">Example:</h4>\n    <p>In a database, there might be a table named <b>PRODUCTS</b> to store information about the products available for sale.</p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PRODUCT_ID</th>\n                <th>PRODUCT_NAME</th>\n                <th>CATEGORY</th>\n                <th>PRICE</th>\n                <th>STOCK_QUANTITY</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Laptop</td>\n                <td>Electronics</td>\n                <td>800</td>\n                <td>50</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Smartphone</td>\n                <td>Electronics</td>\n                <td>500</td>\n                <td>200</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>T-shirt</td>\n                <td>Apparel</td>\n                <td>20</td>\n                <td>150</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Row</h4>\n    <p>A row, also known as a record, is a single, implicitly structured data item in a table. Each row in a table represents a single instance of the entity described by the table.</p>\n    <h4 class=\"bold-maroon\">Example:</h4>\n    <p>In the <b>PRODUCTS</b> table, a row might represent a single product:</p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PRODUCT_ID</th>\n                <th>PRODUCT_NAME</th>\n                <th>CATEGORY</th>\n                <th>PRICE</th>\n                <th>STOCK_QUANTITY</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Laptop</td>\n                <td>Electronics</td>\n                <td>800</td>\n                <td>50</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Field (or Column)</h4>\n    <p>A field, or column, is a vertical entity in a table that contains all information associated with a specific attribute of the entity. Each column in a table is designed to hold a particular type of data.</p>\n    <h4 class=\"bold-maroon\">Example:</h4>\n    <p>In the <b>PRODUCTS</b> table, the <b>PRICE</b> column holds the price of each product:</p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PRODUCT_ID</th>\n                <th>PRODUCT_NAME</th>\n                <th>CATEGORY</th>\n                <th>PRICE</th>\n                <th>STOCK_QUANTITY</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Laptop</td>\n                <td>Electronics</td>\n                <td><b>800</b></td>\n                <td>50</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Smartphone</td>\n                <td>Electronics</td>\n                <td><b>500</b></td>\n                <td>200</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>T-shirt</td>\n                <td>Apparel</td>\n                <td><b>20</b></td>\n                <td>150</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Value</h4>\n    <p>A value is the actual data or content stored in a field (column) for a particular row. It is the individual data item that resides at the intersection of a row and a column.</p>\n    <h4 class=\"bold-maroon\">Example:</h4>\n    <p>In the <b>PRODUCTS</b> table, <b>800</b> is a value in the <b>PRICE</b> column for the product with <b>PRODUCT_ID</b> 1.</p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PRODUCT_ID</th>\n                <th>PRODUCT_NAME</th>\n                <th>CATEGORY</th>\n                <th>PRICE</th>\n                <th>STOCK_QUANTITY</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Laptop</td>\n                <td>Electronics</td>\n                <td><b>800</b></td>\n                <td>50</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 96,
    "Question": "What does the ON DELETE CASCADE constraint do in SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>The <code>ON DELETE CASCADE</code> constraint in Oracle SQL is used to automatically delete related rows in a child table when a row in the parent table is deleted. This constraint ensures referential integrity by maintaining consistent and accurate relationships between tables.</p>\n    <h4 class=\"bold-maroon\">Purpose:</h4>\n    <p>The <code>ON DELETE CASCADE</code> constraint is part of the foreign key definition. When a row in the parent table (the table with the primary key) is deleted, any rows in the child table (the table with the foreign key) that reference the deleted row will also be deleted automatically.</p>\n    <h4 class=\"bold-maroon\">Use Case:</h4>\n    <p>This constraint is useful in scenarios where it is important to ensure that no orphaned records exist in the child table when the corresponding parent record is deleted. It simplifies data management by handling the deletion of related data automatically.</p>\n    <h4 class=\"bold-maroon\">Example:</h4>\n    <p>Consider an eCommerce database with two tables: <b>ORDERS</b> and <b>ORDER_ITEMS</b>.</p>\n    <h4 class=\"bold-maroon\">ORDERS Table:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> ORDERS <span class=\"SQLKeyword\">(</span>\n    ORDER_ID NUMBER <span class=\"SQLKeyword\">PRIMARY KEY</span><span class=\"SQLOperator\">,</span>\n    CUSTOMER_ID NUMBER<span class=\"SQLOperator\">,</span>\n    ORDER_DATE <span class=\"SQLKeyword\">DATE</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">ORDER_ITEMS Table:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> ORDER_ITEMS <span class=\"SQLKeyword\">(</span>\n    ITEM_ID NUMBER <span class=\"SQLKeyword\">PRIMARY KEY</span><span class=\"SQLOperator\">,</span>\n    ORDER_ID NUMBER<span class=\"SQLOperator\">,</span>\n    PRODUCT_ID NUMBER<span class=\"SQLOperator\">,</span>\n    QUANTITY NUMBER<span class=\"SQLOperator\">,</span>\n    PRICE NUMBER<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLKeyword\">CONSTRAINT</span> fk_order\n        <span class=\"SQLKeyword\">FOREIGN KEY</span> <span class=\"SQLKeyword\">(</span>ORDER_ID<span class=\"SQLKeyword\">)</span>\n        <span class=\"SQLKeyword\">REFERENCES</span> ORDERS <span class=\"SQLKeyword\">(</span>ORDER_ID<span class=\"SQLKeyword\">)</span>\n        <span class=\"SQLKeyword\">ON DELETE CASCADE</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Behavior:</h4>\n    <p>If a row in the <b>ORDERS</b> table is deleted, all corresponding rows in the <b>ORDER_ITEMS</b> table that reference the deleted <b>ORDER_ID</b> will also be deleted automatically.</p>\n    <h4 class=\"bold-maroon\">Example Scenario:</h4>\n    <p>Suppose the following rows exist in the <b>ORDERS</b> and <b>ORDER_ITEMS</b> tables:</p>\n    <h4 class=\"bold-maroon\">ORDERS Table:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORDER_ID</th>\n                <th>CUSTOMER_ID</th>\n                <th>ORDER_DATE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>101</td>\n                <td>2024-07-01</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>102</td>\n                <td>2024-07-02</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">ORDER_ITEMS Table:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ITEM_ID</th>\n                <th>ORDER_ID</th>\n                <th>PRODUCT_ID</th>\n                <th>QUANTITY</th>\n                <th>PRICE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>1</td>\n                <td>201</td>\n                <td>2</td>\n                <td>50</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>1</td>\n                <td>202</td>\n                <td>1</td>\n                <td>100</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>2</td>\n                <td>203</td>\n                <td>3</td>\n                <td>30</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <p>If the row with <b>ORDER_ID = 1</b> is deleted from the <b>ORDERS</b> table:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DELETE FROM</span> ORDERS <span class=\"SQLKeyword\">WHERE</span> ORDER_ID <span class=\"SQLKeyword\">=</span> <span class=\"SQLString\">1</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>The rows in the <b>ORDER_ITEMS</b> table with <b>ORDER_ID = 1\n</b> will also be deleted automatically:</p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ITEM_ID</th>\n                <th>ORDER_ID</th>\n                <th>PRODUCT_ID</th>\n                <th>QUANTITY</th>\n                <th>PRICE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>1</td>\n                <td>201</td>\n                <td>2</td>\n                <td>50</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>1</td>\n                <td>202</td>\n                <td>1</td>\n                <td>100</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <p>This behavior ensures that the database remains consistent and there are no orphaned rows in the <b>ORDER_ITEMS</b> table.</p>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 97,
    "Question": "What is denormalization in database management?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Denormalization in Oracle database management (or any relational database management system) is the process of intentionally introducing redundancy into a database by merging tables or adding redundant data to improve read performance. While normalization aims to eliminate redundancy and ensure data integrity, denormalization is used to optimize database performance, especially in scenarios where read operations significantly outnumber write operations.</p>\n    <h4 class=\"bold-maroon\">Purpose of Denormalization:</h4>\n    <p>The primary purpose of denormalization is to improve query performance. By storing redundant data, the database can reduce the number of joins needed to retrieve related data, thereby speeding up read queries. This is particularly useful in environments where the database is read-intensive, such as data warehousing, reporting systems, and certain types of OLAP (Online Analytical Processing) applications.</p>\n    <h4 class=\"bold-maroon\">Trade-offs:</h4>\n    <ul>\n        <li><b>Improved Read Performance:</b> Queries that would normally require multiple joins can be simplified, reducing the time needed to retrieve data.</li>\n        <li><b>Increased Storage Requirements:</b> Redundant data increases the amount of storage required.</li>\n        <li><b>Complexity in Data Integrity:</b> With redundant data, maintaining consistency becomes more challenging. Changes in one part of the data may require corresponding updates in multiple places.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Example:</h4>\n    <p>Consider a banking database with two normalized tables: <b>CUSTOMERS</b> and <b>TRANSACTIONS</b>.</p>\n    <h4 class=\"bold-maroon\">CUSTOMERS Table:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_ID</th>\n                <th>CUSTOMER_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Allen</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Sandya</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">TRANSACTIONS Table:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>TRANSACTION_ID</th>\n                <th>CUSTOMER_ID</th>\n                <th>TRANSACTION_DATE</th>\n                <th>AMOUNT</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>101</td>\n                <td>1</td>\n                <td>2024-07-01</td>\n                <td>150.00</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>102</td>\n                <td>2</td>\n                <td>2024-07-02</td>\n                <td>200.00</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>103</td>\n                <td>1</td>\n                <td>2024-07-03</td>\n                <td>50.00</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <p>In a normalized database, to get a list of transactions along with customer details, a join operation is required:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> t.TRANSACTION_ID<span class=\"SQLOperator\">,</span>\n       t.TRANSACTION_DATE<span class=\"SQLOperator\">,</span>\n       t.AMOUNT<span class=\"SQLOperator\">,</span>\n       c.CUSTOMER_NAME<span class=\"SQLOperator\">,</span>\n       c.EMAIL\n<span class=\"SQLKeyword\">FROM</span>   TRANSACTIONS t\n       <span class=\"SQLKeyword\">JOIN</span> CUSTOMERS c\n         <span class=\"SQLKeyword\">ON</span> t.CUSTOMER_ID <span class=\"SQLKeyword\">=</span> c.CUSTOMER_ID<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>To improve read performance, denormalization can be applied by adding customer details directly into the <b>TRANSACTIONS</b> table.</p>\n    <h4 class=\"bold-maroon\">Denormalized TRANSACTIONS Table:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>TRANSACTION_ID</th>\n                <th>CUSTOMER_ID</th>\n                <th>CUSTOMER_NAME</th>\n                <th>EMAIL</th>\n                <th>TRANSACTION_DATE</th>\n                <th>AMOUNT</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>101</td>\n                <td>1</td>\n                <td>Allen</td>\n                <td>allen@aityl.com</td>\n                <td>2024-07-01</td>\n                <td>150.00</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>102</td>\n                <td>2</td>\n                <td>Sandya</td>\n                <td>sandya@aityl.com</td>\n                <td>2024-07-02</td>\n                <td>200.00</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>103</td>\n                <td>1</td>\n                <td>Allen</td>\n                <td>allen@aityl.com</td>\n                <td>2024-07-03</td>\n                <td>50.00</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <p>Now, to get the list of transactions along with customer details, no join is needed:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> TRANSACTION_ID<span class=\"SQLOperator\">,</span>\n       TRANSACTION_DATE<span class=\"SQLOperator\">,</span>\n       AMOUNT<span class=\"SQLOperator\">,</span>\n       CUSTOMER_NAME<span class=\"SQLOperator\">,</span>\n       EMAIL\n<span class=\"SQLKeyword\">FROM</span>   TRANSACTIONS<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">When to Use Denormalization:</h4>\n    <ul>\n        <li><b>Read-Heavy Workloads:</b> Systems with frequent and complex read queries can benefit from denormalization.</li>\n        <li><b>Data Warehousing:</b> In data warehousing and reporting systems, where data is often aggregated and queried, denormalization can improve performance.</li>\n        <li><b>Precomputed Aggregates:</b> When queries frequently involve aggregate functions, denormalized tables can store precomputed aggregates to speed up query performance.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Conclusion:</h4>\n    <p>Denormalization is a performance optimization technique that introduces redundancy into a database to reduce the complexity and execution time of read queries. While it can significantly improve read performance, it also increases storage requirements and complexity in maintaining data integrity. It is essential to carefully evaluate the specific requirements and workload patterns before deciding to denormalize a database.</p>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 98,
    "Question": "What are the SET operators in SQL, and in what scenarios are they typically used?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In Oracle SQL, SET operators are used to combine the results of two or more SELECT queries into a single result set. The primary SET operators are UNION, UNION ALL, INTERSECT, and MINUS. Each operator serves a specific purpose and can be used to manipulate query results in different ways.</p>\n    <h4 class=\"bold-maroon\">Main SET Operators and Their Usage:</h4>\n    <ul>\n        <li><b>UNION:</b>\n            <ul>\n                <li>Combines the results of two SELECT statements and removes duplicate rows.</li>\n                <li><b>Scenario:</b> Combining customer lists from two different regions to get a unique list of customers.</li>\n            </ul>\n        </li>\n        <li><b>UNION ALL:</b>\n            <ul>\n                <li>Combines the results of two SELECT statements without removing duplicates.</li>\n                <li><b>Scenario:</b> Combining sales data from two different stores, including all transactions.</li>\n            </ul>\n        </li>\n        <li><b>INTERSECT:</b>\n            <ul>\n                <li>Returns only the rows that are common to the results of two SELECT statements.</li>\n                <li><b>Scenario:</b> Finding customers who are present in both Region1 and Region2.</li>\n            </ul>\n        </li>\n        <li><b>MINUS:</b>\n            <ul>\n                <li>Returns the rows from the first SELECT statement that are not present in the second SELECT statement.</li>\n                <li><b>Scenario:</b> Finding customers who are in Region1 but not in Region2.</li>\n            </ul>\n        </li>\n    </ul>\n    <h4 class=\"bold-maroon\">Example with Input and Output Tables:</h4>\n    <h4 class=\"bold-maroon\">Input Tables:</h4>\n    <h4 class=\"bold-maroon\">CUSTOMERS_REGION1:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_ID</th>\n                <th>CUSTOMER_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Alice</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Bob</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Charlie</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">CUSTOMERS_REGION2:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_ID</th>\n                <th>CUSTOMER_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>2</td>\n                <td>Bob</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>3</td>\n                <td>Charlie</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>4</td>\n                <td>David</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">UNION Example:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"\nSQLKeyword\">SELECT</span> CUSTOMER_ID<span class=\"SQLOperator\">,</span>\n       CUSTOMER_NAME\n<span class=\"SQLKeyword\">FROM</span>   CUSTOMERS_REGION1\n<span class=\"SQLKeyword\">UNION</span>\n<span class=\"SQLKeyword\">SELECT</span> CUSTOMER_ID<span class=\"SQLOperator\">,</span>\n       CUSTOMER_NAME\n<span class=\"SQLKeyword\">FROM</span>   CUSTOMERS_REGION2<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_ID</th>\n                <th>CUSTOMER_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Alice</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Bob</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Charlie</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>David</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">UNION ALL Example:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> CUSTOMER_ID<span class=\"SQLOperator\">,</span>\n       CUSTOMER_NAME\n<span class=\"SQLKeyword\">FROM</span>   CUSTOMERS_REGION1\n<span class=\"SQLKeyword\">UNION ALL</span>\n<span class=\"SQLKeyword\">SELECT</span> CUSTOMER_ID<span class=\"SQLOperator\">,</span>\n       CUSTOMER_NAME\n<span class=\"SQLKeyword\">FROM</span>   CUSTOMERS_REGION2<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_ID</th>\n                <th>CUSTOMER_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Alice</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Bob</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Charlie</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Bob</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Charlie</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>David</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">INTERSECT Example:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> CUSTOMER_ID<span class=\"SQLOperator\">,</span>\n       CUSTOMER_NAME\n<span class=\"SQLKeyword\">FROM</span>   CUSTOMERS_REGION1\n<span class=\"SQLKeyword\">INTERSECT</span>\n<span class=\"SQLKeyword\">SELECT</span> CUSTOMER_ID<span class=\"SQLOperator\">,</span>\n       CUSTOMER_NAME\n<span class=\"SQLKeyword\">FROM</span>   CUSTOMERS_REGION2<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_ID</th>\n                <th>CUSTOMER_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>2</td>\n                <td>Bob</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>3</td>\n                <td>Charlie</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">MINUS Example:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> CUSTOMER_ID<span class=\"SQLOperator\">,</span>\n       CUSTOMER_NAME\n<span class=\"SQLKeyword\">FROM</span>   CUSTOMERS_REGION1\n<span class=\"SQLKeyword\">MINUS</span>\n<span class=\"SQLKeyword\">SELECT</span> CUSTOMER_ID<span class=\"SQLOperator\">,</span>\n       CUSTOMER_NAME\n<span class=\"SQLKeyword\">FROM</span>   CUSTOMERS_REGION2<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_ID</th>\n                <th>CUSTOMER_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Alice</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <p>These SET operators are typically used in scenarios where data needs to be combined, compared, or filtered across multiple tables or queries. They are especially useful in reporting, data analysis, and data warehousing applications.</p>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 99,
    "Question": "Can SET operators be used on different data types? If the data types are different, how can SET operations be achieved?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>SET operators in SQL, such as UNION, INTERSECT, and MINUS, are typically used to combine results from two or more SELECT statements. For SET operators to function correctly, the corresponding columns in the SELECT statements must have compatible data types.</p>\n    <p>In Oracle, if the data types are different but convertible, functions such as CAST, TO_CHAR, and other row functions can be used to align the data types for SET operations.</p>\n    <h4 class=\"bold-maroon\">Handling Different Data Types:</h4>\n    <h4 class=\"bold-maroon\">Example 1: Combining CUSTOMER_ID (NUMBER) and EMAIL (VARCHAR2) columns using CAST</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">CAST</span><span class=\"SQLKeyword\">(</span>CUSTOMER_ID <span class=\"SQLKeyword\">AS</span> VARCHAR2<span class=\"SQLKeyword\">(50)</span><span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> INFO\n<span class=\"SQLKeyword\">FROM</span> CUSTOMERS\n<span class=\"SQLKeyword\">UNION</span>\n<span class=\"SQLKeyword\">SELECT</span> EMAIL <span class=\"SQLKeyword\">AS</span> INFO\n<span class=\"SQLKeyword\">FROM</span> CUSTOMERS<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>In this example, <b>CUSTOMER_ID</b> is cast to <b>VARCHAR2</b> to match the data type of <b>EMAIL</b>.</p>\n    <h4 class=\"bold-maroon\">Example 2: Combining PRODUCT_NAME and SUPPLIER_NAME</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">TO_CHAR</span><span class=\"SQLKeyword\">(</span>PRODUCT_ID<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> INFO\n<span class=\"SQLKeyword\">FROM</span> PRODUCTS\n<span class=\"SQLKeyword\">UNION</span>\n<span class=\"SQLKeyword\">SELECT</span> SUPPLIER_NAME <span class=\"SQLKeyword\">AS</span> INFO\n<span class=\"SQLKeyword\">FROM</span> SUPPLIERS<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>In this example, <b>PRODUCT_ID</b> is converted to <b>VARCHAR2</b> using TO_CHAR to match the data type of <b>SUPPLIER_NAME</b>.</p>\n    <p>By ensuring that the data types are compatible, SET operators can be effectively used in Oracle SQL to combine and manipulate data from different tables and columns.</p>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 100,
    "Question": "What is the difference between aggregate functions and scalar (row-level) functions in SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In SQL, functions can be broadly classified into aggregate functions and scalar (row-level) functions. Here are the key differences between them:</p>\n    <h4 class=\"bold-maroon\">Aggregate Functions:</h4>\n    <ul>\n        <li><b>Purpose:</b> Aggregate functions perform calculations on a set of rows and return a single value. They are used to summarize data.</li>\n        <li><b>Examples:</b>\n            <ul>\n                <li><b>COUNT():</b> Returns the number of rows.</li>\n                <li><b>SUM():</b> Returns the sum of a numeric column.</li>\n                <li><b>AVG():</b> Returns the average value of a numeric column.</li>\n                <li><b>MAX():</b> Returns the maximum value in a set.</li>\n                <li><b>MIN():</b> Returns the minimum value in a set.</li>\n            </ul>\n        </li>\n        <li><b>Usage Context:</b> Typically used with <b>GROUP BY</b> clauses to group rows that share a property so aggregate values can be calculated per group. They can also be used without <b>GROUP BY</b> to perform calculations on the entire result set.</li>\n        <li><b>Return Type:</b> Single value for each group or for the entire result set.</li>\n        <li><b>Example Query:</b></li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> department, <span class=\"SQLFunction\">COUNT</span><span class=\"SQLKeyword\">(</span>*<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> num_employees\n<span class=\"SQLKeyword\">FROM</span> employees\n<span class=\"SQLKeyword\">GROUP BY</span> department<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Scalar (Row-Level) Functions:</h4>\n    <ul>\n        <li><b>Purpose:</b> Scalar functions perform operations on individual values (or rows) and return a single value for each input value (or row). They are used to manipulate and transform data at the row level.</li>\n        <li><b>Examples:</b>\n            <ul>\n                <li><b>UPPER():</b> Converts a string to upper case.</li>\n                <li><b>LOWER():</b> Converts a string to lower case.</li>\n                <li><b>LENGTH():</b> Returns the length of a string.</li>\n                <li><b>ROUND():</b> Rounds a numeric value to a specified number of decimal places.</li>\n            </ul>\n        </li>\n        <li><b>Usage Context:</b> Used in <b>SELECT</b>, <b>WHERE</b>, <b>ORDER BY</b>, and other clauses to perform operations on individual column values or literals.</li>\n        <li><b>Return Type:</b> Single value for each row.</li>\n        <li><b>Example Query:</b></li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> employee_name, <span class=\"SQLFunction\">UPPER</span><span class=\"SQLKeyword\">(</span>employee_name<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> uppercase_name\n<span class=\"SQLKeyword\">FROM</span> employees<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n \n <h4 class=\"bold-maroon\">Summary:</h4>\n    <ul>\n        <li><b>Aggregate Functions:</b> Operate on sets of rows, returning a single summarized value per group (or for the entire set).</li>\n        <li><b>Scalar (Row-Level) Functions:</b> Operate on individual rows, returning a single value per row, typically transforming or manipulating the data in some way.</li>\n    </ul>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 101,
    "Question": "What are the key differences between OLTP and OLAP systems?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .table-container {\n            overflow-x: auto;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            max-width: 800px;\n            margin: 20px 0;\n            border: 1px solid #ddd;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n        }\n        th, td {\n            text-align: left;\n            padding: 8px;\n            border: 1px solid #ddd;\n        }\n        th {\n            background-color: #F0F0F0;\n        }\n        tr:nth-child(even) {\n            background-color: #FFFFFF;\n        }\n        tr:nth-child(odd) {\n            background-color: #FFFFFF;\n        }\n        @media (max-width: 768px) {\n            table, th, td {\n                font-size: 12px;\n            }\n            th, td {\n                padding: 6px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Online Transaction Processing (OLTP) vs. Online Analytical Processing (OLAP):</p>\n    <div class=\"table-container\">\n        <table>\n            <thead>\n                <tr>\n                    <th>ASPECT</th>\n                    <th>OLTP</th>\n                    <th>OLAP</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>Purpose</td>\n                    <td>Manages transactional data with high-volume read/write operations, optimized for speed and data integrity.</td>\n                    <td>Supports complex queries and data analysis, optimized for reading large volumes of data for decision-making.</td>\n                </tr>\n                <tr>\n                    <td>Data Structure</td>\n                    <td>Highly normalized to minimize redundancy and ensure data integrity.</td>\n                    <td>Typically denormalized to enhance query performance, organized into star or snowflake schemas.</td>\n                </tr>\n                <tr>\n                    <td>Operations</td>\n                    <td>Simple and short (e.g., INSERT, UPDATE, DELETE, simple SELECT).</td>\n                    <td>Complex queries involving multi-dimensional queries, aggregations, and summarizations.</td>\n                </tr>\n                <tr>\n                    <td>Users</td>\n                    <td>End-users for daily transaction processing (e.g., order entry, financial transactions).</td>\n                    <td>Data analysts and decision-makers for data analysis, reporting, and business intelligence.</td>\n                </tr>\n                <tr>\n                    <td>Data Volume</td>\n                    <td>Handles many small transactions affecting a small amount of data.</td>\n                    <td>Manages large data volumes, often historical, aggregated from various sources.</td>\n                </tr>\n                <tr>\n                    <td>Query Types</td>\n                    <td>Typically simple queries involving single or few records.</td>\n                    <td>Often complex queries involving large scans, joins, aggregations, and groupings.</td>\n                </tr>\n                <tr>\n                    <td>Performance Metrics</td>\n                    <td>Measured by transactions per second, response time, and system throughput.</td>\n                    <td>Measured by query response time and ability to process large data volumes efficiently.</td>\n                </tr>\n                <tr>\n                    <td>Data Integrity</td>\n                    <td>Ensures high data integrity through ACID properties, handling concurrent transactions.</td>\n                    <td>Data integrity is important but less stringent; data is often loaded in bulk.</td>\n                </tr>\n                <tr>\n                    <td>Example Systems</td>\n                    <td>MySQL, PostgreSQL, Oracle, SQL Server.</td>\n                    <td>Amazon Redshift, Google BigQuery, Snowflake, OLAP cubes.</td>\n                </tr>\n            </tbody>\n                </table>\n    </div>\n    </div>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 102,
    "Question": "Explain and give an example of using the AND and OR operators in SQL.",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In SQL, the <b>AND</b> and <b>OR</b> operators are used to combine multiple conditions within a <b>WHERE</b> clause:</p>\n    <h4 class=\"bold-maroon\">AND Operator:</h4>\n    <p>The <b>AND</b> operator is used when all combined conditions must be true for a row to be included in the result set.</p>\n    <h4 class=\"bold-maroon\">Example using AND:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> order_id, order_date, total_amount\n<span class=\"SQLKeyword\">FROM</span> Orders\n<span class=\"SQLKeyword\">WHERE</span> customer_id = 100\n   <span class=\"SQLKeyword\">AND</span> total_amount > 200<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This query returns all orders where the <b>customer_id</b> is 100 and the <b>total_amount</b> exceeds $200.</p>\n    <h4 class=\"bold-maroon\">OR Operator:</h4>\n    <p>The <b>OR</b> operator is used when any of the conditions connected by <b>OR</b> must be true for the rows to be included in the result set.</p>\n    <h4 class=\"bold-maroon\">Example using OR:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> order_id, order_date, total_amount\n<span class=\"SQLKeyword\">FROM</span> Orders\n<span class=\"SQLKeyword\">WHERE</span> customer_id = 100\n   <span class=\"SQLKeyword\">OR</span> total_amount > 500<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This query retrieves all orders where the <b>customer_id</b> is 100, or the <b>total_amount</b> is greater than $500, or both conditions are met.</p>\n    <h4 class=\"bold-maroon\">Combining AND and OR:</h4>\n    <p>Both <b>AND</b> and <b>OR</b> operators can be combined in a single query to handle more complex filtering conditions.</p>\n    <h4 class=\"bold-maroon\">Example Combining AND and OR:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> order_id,\n       order_date,\n       total_amount\n<span class=\"SQLKeyword\">FROM</span> Orders\n<span class=\"SQLKeyword\">WHERE</span> (<span class=\"SQLKeyword\">customer_id</span> = 100\n         <span class=\"SQLKeyword\">AND</span> total_amount > 200)\n        <span class=\"SQLKeyword\">OR</span> (<span class=\"SQLKeyword\">customer_id</span> = 200\n             <span class=\"SQLKeyword\">AND</span> total_amount < 100)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This query uses parentheses to group the conditions, ensuring that the <b>AND</b> operations are evaluated first, followed by the <b>OR</b> operation. It returns orders that meet either of the specified grouped conditions.</p>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 103,
    "Question": "What is an RDBMS and how does it differ from a DBMS?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .table-container {\n            overflow-x: auto;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            max-width: 800px;\n            margin: 20px 0;\n            border: 1px solid #ddd;\n            font-size: 16px;\n        }\n        th, td {\n            text-align: left;\n            padding: 8px;\n            border: 1px solid #ddd;\n        }\n        th {\n            background-color: #F0F0F0;\n        }\n        tr:nth-child(even) {\n            background-color: #FFFFFF;\n        }\n        tr:nth-child(odd) {\n            background-color: #FFFFFF;\n        }\n        @media (max-width: 768px) {\n            table, th, td {\n                font-size: 12px;\n            }\n            th, td {\n                padding: 6px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Key Differences Between RDBMS and DBMS:</p>\n    <div class=\"table-container\">\n        <table>\n            <thead>\n                <tr>\n                    <th>ASPECT</th>\n                    <th>DBMS</th>\n                    <th>RDBMS</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>Definition</td>\n                    <td>Database Management System is a software that enables the creation, storage, management, and retrieval of data from a database.</td>\n                    <td>Relational Database Management System is a type of DBMS that uses a structured relational model to store data in tables and establish relationships between them.</td>\n                </tr>\n                <tr>\n                    <td>Data Structure</td>\n                    <td>Supports various data models including hierarchical, network, and object-oriented.</td>\n                    <td>Data is stored in tabular format, with rows and columns. Relationships are established through primary and foreign keys.</td>\n                </tr>\n                <tr>\n                    <td>Data Integrity</td>\n                    <td>Basic support for data integrity; may lack comprehensive integrity constraints.</td>\n                    <td>Ensures data integrity through ACID properties and supports constraints like primary keys, foreign keys, unique keys, etc.</td>\n                </tr>\n                <tr>\n                    <td>Examples</td>\n                    <td>Hierarchical DBMS, Network DBMS, Object-Oriented DBMS.</td>\n                    <td>Oracle, MySQL, Microsoft SQL Server, PostgreSQL.</td>\n                </tr>\n                <tr>\n                    <td>Use Cases</td>\n                    <td>Used for simple applications with straightforward data models.</td>\n                    <td>Used for complex applications that require relational modeling, transactional integrity, and complex queries.</td>\n                </tr>\n            </tbody>\n                </table>\n    </div>\n    </div>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 104,
    "Question": "How do you create an empty table with the same structure as an existing table in SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 12px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In Oracle SQL, you can create an empty table with the same structure as an existing table using the <b>CREATE TABLE AS SELECT</b> statement:</p>\n    <h4 class=\"bold-maroon\">Example:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> employees_bkp <span class=\"SQLKeyword\">AS</span>\n<span class=\"SQLKeyword\">SELECT</span> *\n<span class=\"SQLKeyword\">FROM</span> employees\n<span class=\"SQLKeyword\">WHERE</span> 1=2<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li>The query creates a new table named <b>employees_bkp</b> with the same column definitions as the <b>employees</b> table.</li>\n        <li>The <b>WHERE</b> clause <b>1=2</b> is always false, ensuring that no rows are selected, resulting in an empty table.</li>\n        <li>This method replicates column names, data types, and nullability of the source table.</li>\n        <li>Constraints (e.g., primary keys, foreign keys) and indexes are not copied and must be explicitly defined after table creation.</li>\n    </ul>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 105,
    "Question": "What is the default order with the ORDER BY clause in SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 12px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In SQL, when using the <b>ORDER BY</b> clause without specifying a direction, the default sorting order is ascending (<b>ASC</b>). This means:</p>\n    <ul>\n        <li>Numbers are sorted from the smallest to the largest.</li>\n        <li>Text is sorted alphabetically from A to Z.</li>\n        <li>Dates are sorted from the oldest to the most recent.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Example:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> employee_id, employee_name, hire_date\n<span class=\"SQLKeyword\">FROM</span> employees\n<span class=\"SQLKeyword\">ORDER BY</span> hire_date<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This query will order the employees by their hire date in ascending order.</p>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 106,
    "Question": "How do the WHERE and HAVING clauses differ in SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .table-container {\n            overflow-x: auto;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            max-width: 800px;\n            margin: 20px 0;\n            border: 1px solid #ddd;\n            font-size: 16px;\n        }\n        th, td {\n            text-align: left;\n            padding: 8px;\n            border: 1px solid #ddd;\n        }\n        th {\n            background-color: #F0F0F0;\n        }\n        tr:nth-child(even) {\n            background-color: #FFFFFF;\n        }\n        tr:nth-child(odd) {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            table, th, td {\n                font-size: 12px;\n            }\n            th, td {\n                padding: 6px;\n            }\n            .SQLCode {\n                font-size: 12px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Differences Between WHERE and HAVING Clauses:</h4>\n    <div class=\"table-container\">\n        <table>\n            <thead>\n                <tr>\n                    <th>ASPECT</th>\n                    <th>WHERE Clause</th>\n                    <th>HAVING Clause</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>Purpose</td>\n                    <td>Filters rows before any groupings are made.</td>\n                    <td>Filters groups after aggregation operations are performed.</td>\n                </tr>\n                <tr>\n                    <td>Usage</td>\n                    <td>Used in SELECT, UPDATE, and DELETE statements.</td>\n                    <td>Used in SELECT statements with GROUP BY.</td>\n                </tr>\n                <tr>\n                    <td>Applicable To</td>\n                    <td>Individual rows.</td>\n                    <td>Aggregated groups.</td>\n                </tr>\n                <tr>\n                    <td>Aggregate Functions</td>\n                    <td>Cannot use aggregate functions.</td>\n                    <td>Can use aggregate functions (e.g., SUM, AVG).</td>\n                </tr>\n            </tbody>\n                </table>\n    </div>\n    </div>\n    <h4 class=\"bold-maroon\">Example Scenario:</h4>\n    <p>Consider a table named <b>orders</b> with columns: <b>order_id</b>, <b>customer_id</b>, <b>order_date</b>, and <b>total_amount</b>.</p>\n    <h4 class=\"bold-maroon\">Example with WHERE Clause:</h4>\n    <p><b>Objective:</b> Select orders where the <b>total_amount</b> is more than 150.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> *\n<span class=\"SQLKeyword\">FROM</span> orders\n<span class=\"SQLKeyword\">WHERE</span> total_amount > 150<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Example with HAVING Clause:</h4>\n    <p><b>Objective:</b> Find customers whose total spending is more than 400.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> customer_id, <span class=\"SQLFunction\">SUM</span><span class=\"SQLKeyword\">(</span>total_amount<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> total_spent\n<span class=\"SQLKeyword\">FROM</span> orders\n<span class=\"SQLKeyword\">GROUP BY</span> customer_id\n<span class=\"SQLKeyword\">HAVING</span> <span class=\"SQLFunction\">SUM</span><span class=\"SQLKeyword\">(</span>total_amount<span class=\"SQLKeyword\">)</span> > 400<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 107,
    "Question": "What are the different types of subqueries in SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .table-container {\n            overflow-x: auto;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            max-width: 800px;\n            margin: 20px 0;\n            border: 1px solid #ddd;\n            font-size: 16px;\n        }\n        th, td {\n            text-align: left;\n            padding: 8px;\n            border: 1px solid #ddd;\n        }\n        th {\n            background-color: #F0F0F0;\n        }\n        tr:nth-child(even) {\n            background-color: #FFFFFF;\n        }\n        tr:nth-child(odd) {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            table, th, td {\n                font-size: 12px;\n            }\n            th, td {\n                padding: 6px;\n            }\n            .SQLCode {\n                font-size: 12px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"table-container\">\n        <table>\n            <thead>\n                <tr>\n                    <th>Subquery Type</th>\n                    <th>DESCRIPTION</th>\n                    <th>Example Usage</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>Single-Row Subqueries</td>\n                    <td>Return zero or one row, used with single-row operators like <b>=</b>, <b>></b>, <b><</b>, <b>>=</b>, <b><=</b>, <b>!=</b>.</td>\n                    <td>Find the name of the employee who earns just more than a specific employee.</td>\n                </tr>\n                <tr>\n                    <td>Multiple-Row Subqueries</td>\n                    <td>Return one or more rows, used with multiple-row operators like <b>IN</b>, <b>ANY</b>, <b>ALL</b>, <b>EXISTS</b>.</td>\n                    <td>Find all employees who earn more than any employee in a list.</td>\n                </tr>\n                <tr>\n                    <td>Correlated Subqueries</td>\n                    <td>Reference column(s) from the outer query, evaluated once for each row processed by the outer query.</td>\n                    <td>Find employees who earn more than the average salary of their department.</td>\n                </tr>\n                <tr>\n                    <td>Scalar Subqueries</td>\n                    <td>Return exactly one row and one column, used wherever a single scalar value is valid.</td>\n                    <td>Select the name of each employee along with the highest salary in the department.</td>\n                </tr>\n                <tr>\n                    <td>Inline Views</td>\n                    <td>Subqueries in the <b>FROM</b> clause, used to simplify complex queries.</td>\n                    <td>Find the average salary of the top 2 highest-paid employees.</td>\n                </tr>\n                <tr>\n                    <td>With Clause (CTE)</td>\n                    <td>Create temporary sets that can be easily referenced within a SQL statement.</td>\n                    <td>List employees and their salary rank.</td>\n                </tr>\n            </tbody>\n                </table>\n    </div>\n    </div>\n    <h4 class=\"bold-maroon\">Examples of Each Subquery:</h4>\n    <h4 class=\"bold-maroon\">1. Single-Row Subquery:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> name\n<span class=\"SQLKeyword\">FROM</span> employees\n<span class=\"SQLKeyword\">WHERE</span> salary = (<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">MIN</span><span class=\"SQLKeyword\">(</span>salary<span class=\"SQLKeyword\">)</span>\n      <span class=\"SQLKeyword\">FROM</span> employees\n      <span class=\"SQLKeyword\">WHERE</span> salary > (<span class=\"SQLKeyword\">SELECT</span> salary\n                        <span class=\"SQLKeyword\">FROM</span> employees\n                        <span class=\"SQLKeyword\">WHERE</span> name = <span class=\"SQLString\">'The Rock'</span><span class=\"SQLKeyword\">))</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">2. Multiple-Row Subquery:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> name\n<span class=\"SQLKeyword\">FROM</span> employees\n<span class=\"SQLKeyword\">WHERE</span> salary > <span class=\"SQLKeyword\">ANY</span> (<span class=\"SQLKeyword\">SELECT</span> salary\n                     <span class=\"SQLKeyword\">FROM</span> employees\n                     <span class=\"SQLKeyword\">WHERE</span> name = <span class=\"SQLString\">'The Rock'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">3. Correlated Subquery:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> name\n<span class=\"SQLKeyword\">FROM</span> employees e\n<span class=\"SQLKeyword\">WHERE</span> salary > (<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">AVG</span><span class=\"SQLKeyword\">(</span>salary<span class=\"SQLKeyword\">)</span>\n                 <span class=\"SQLKeyword\">FROM</span> employees\n                 <span class=\"SQLKeyword\">WHERE</span> employee_id != e.employee_id<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">4. Scalar Subquery:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> name,\n       (<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">MAX</span><span class=\"SQLKeyword\">(</span>salary<span class=\"SQLKeyword\">)</span>\n        <span class=\"SQLKeyword\">FROM</span> employees) <span class=\"SQLKeyword\">AS</span> max_salary\n<span class=\"SQLKeyword\">FROM</span> employees<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">5. Inline View:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">AVG</span><span class=\"SQLKeyword\">(</span>salary<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> avg_salary\n<span class=\"SQLKeyword\">FROM</span> (<span class=\"SQLKeyword\">SELECT</span> salary\n        <span class=\"SQLKeyword\">FROM</span> employees\n        <span class=\"SQLKeyword\">ORDER BY</span> salary <span class=\"SQLKeyword\">DESC</span>\n        <span class=\"SQLKeyword\">FETCH FIRST</span> 2 <span class=\"SQLKeyword\">ROWS ONLY</span>) top_salaries<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">6. With Clause (CTE):</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">WITH</span> SalaryRank\n     <span class=\"SQLKeyword\">AS</span> (<span class=\"SQLKeyword\">SELECT</span> name,\n                salary,\n                <span class=\"SQLFunction\">RANK</span><span class=\"SQLKeyword\">()</span>\n                  <span class=\"SQLKeyword\">OVER</span> (\n                    <span class=\"SQLKeyword\">ORDER BY</span> salary <span class=\"SQLKeyword\">DESC</span>) <span class=\"SQLKeyword\">\nAS</span> rank\n         <span class=\"SQLKeyword\">FROM</span> employees)\n<span class=\"SQLKeyword\">SELECT</span> *\n<span class=\"SQLKeyword\">FROM</span> SalaryRank<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 108,
    "Question": "What is the purpose of the DBMS_STATS command in Oracle?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 12px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>The <b>DBMS_STATS</b> package in Oracle is used to collect, manage, and maintain optimizer statistics for database objects. These statistics help the Oracle optimizer make informed decisions about the most efficient way to execute SQL queries.</p>\n    <h4 class=\"bold-maroon\">Key Functions and Purposes:</h4>\n    <ul>\n        <li><b>Collecting Statistics:</b> Gathers statistics about the size, distribution, and structure of tables, indexes, and other database objects.</li>\n        <li><b>Updating Statistics:</b> Updates statistics for database objects that have undergone significant changes, ensuring the optimizer has up-to-date information.</li>\n        <li><b>Deleting Statistics:</b> Deletes outdated or unwanted statistics from database objects.</li>\n        <li><b>Gathering Histograms:</b> Collects histogram data that provides detailed information about the distribution of data values in a column, helping the optimizer better estimate the selectivity of predicates.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Example Commands:</h4>\n    <h4 class=\"bold-maroon\">1. Gathering Statistics for a Table:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">EXEC</span> <span class=\"SQLFunction\">DBMS_STATS.GATHER_TABLE_STATS</span><span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'schema_name'</span>, <span class=\"SQLString\">'table_name'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">2. Gathering Statistics for the Entire Database:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">EXEC</span> <span class=\"SQLFunction\">DBMS_STATS.GATHER_DATABASE_STATS</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">3. Deleting Statistics for a Table:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">EXEC</span> <span class=\"SQLFunction\">DBMS_STATS.DELETE_TABLE_STATS</span><span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'schema_name'</span>, <span class=\"SQLString\">'table_name'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 109,
    "Question": "What are the maximum numbers of Columns, Subqueries, Rows, and Tables allowed for a table or in an Oracle database?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .table-container {\n            overflow-x: auto;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            max-width: 800px;\n            margin: 20px 0;\n            border: 1px solid #ddd;\n            font-size: 16px;\n        }\n        th, td {\n            text-align: left;\n            padding: 8px;\n            border: 1px solid #ddd;\n        }\n        th {\n            background-color: #F0F0F0;\n        }\n        tr:nth-child(even) {\n            background-color: #FFFFFF;\n        }\n        tr:nth-child(odd) {\n            background-color: #FFFFFF;\n        }\n        @media (max-width: 768px) {\n            table, th, td {\n                font-size: 12px;\n            }\n            th, td {\n                padding: 6px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"table-container\">\n        <table>\n            <thead>\n                <tr>\n                    <th>ASPECT</th>\n                    <th>Maximum Allowed</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>Columns</td>\n                    <td>1000 columns per table</td>\n                </tr>\n                <tr>\n                    <td>Subqueries</td>\n                    <td>Unlimited in the <b>FROM</b> clause; 255 in the <b>WHERE</b> clause</td>\n                </tr>\n                <tr>\n                    <td>Rows</td>\n                    <td>Unlimited</td>\n                </tr>\n                <tr>\n                    <td>Tables</td>\n                    <td>Unlimited</td>\n                </tr>\n            </tbody>\n                </table>\n    </div>\n    </div>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 110,
    "Question": "What is a sequence in Oracle SQL, and how is it used?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 12px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>A sequence in Oracle SQL is a database object that generates a sequence of unique numbers. These numbers can be used to automatically populate a column with unique values, typically for primary key columns.</p>\n    <h4 class=\"bold-maroon\">Creating a Sequence:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE SEQUENCE</span> seq_orders\n  <span class=\"SQLKeyword\">START WITH</span> 1 <span class=\"SQLComment\">-- The first value generated</span>\n  <span class=\"SQLKeyword\">INCREMENT BY</span> 1 <span class=\"SQLComment\">-- The increment between subsequent values</span>\n  <span class=\"SQLKeyword\">NOCACHE</span> <span class=\"SQLComment\">-- No preallocation of sequence numbers</span>\n  <span class=\"SQLKeyword\">NOCYCLE</span><span class=\"SQLOperator\">;</span> <span class=\"SQLComment\">-- The sequence will not restart after reaching \n-- its maximum value</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Using a Sequence:</h4>\n    <h4 class=\"bold-maroon\">Inserting a Sequence Value into a Table:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> orders <span class=\"SQLKeyword\">(</span>\n    order_id <span class=\"SQLKeyword\">NUMBER PRIMARY KEY</span>,\n    customer_name <span class=\"SQLKeyword\">VARCHAR2</span><span class=\"SQLKeyword\">(50)</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">INSERT INTO</span> orders\n            <span class=\"SQLKeyword\">(</span>order_id,\n             customer_name<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">VALUES</span>      <span class=\"SQLKeyword\">(</span>seq_orders.NEXTVAL,\n             <span class=\"SQLString\">'Frank Mir'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">INSERT INTO</span> orders\n            <span class=\"SQLKeyword\">(</span>order_id,\n             customer_name<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">VALUES</span>      <span class=\"SQLKeyword\">(</span>seq_orders.NEXTVAL,\n             <span class=\"SQLString\">'Randy Couture'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Selecting Sequence Values:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> seq_orders.NEXTVAL <span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Sequence Parameters:</h4>\n    <ul>\n        <li><b>START WITH:</b> The starting value of the sequence.</li>\n        <li><b>INCREMENT BY:</b> The increment between each value in the sequence. This can be positive or negative.</li>\n        <li><b>MAXVALUE:</b> The maximum value the sequence can generate.</li>\n        <li><b>MINVALUE:</b> The minimum value the sequence can generate.</li>\n        <li><b>CYCLE:</b> Indicates that the sequence should restart when it reaches the maximum or minimum value.</li>\n        <li><b>NOCYCLE:</b> Indicates that the sequence should not restart.</li>\n        <li><b>CACHE:</b> Specifies how many sequence numbers Oracle preallocates and keeps in memory for faster access.</li>\n        <li><b>NOCACHE:</b> Indicates that sequence numbers are not preallocated.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Example with All Parameters:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE SEQUENCE</span> customer_seq\n<span class=\"SQLKeyword\">START WITH</span> 1000\n<span class=\"SQLKeyword\">INCREMENT BY</span> 10\n<span class=\"SQLKeyword\">MAXVALUE</span> 10000\n<span class=\"SQLKeyword\">NOCYCLE</span>\n<span class=\"SQLKeyword\">CACHE</span> 20<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 111,
    "Question": "How do you retrieve the top five states with the highest sales using SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .table-container {\n            overflow-x: auto;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            max-width: 800px;\n            margin: 20px 0;\n            border: 1px solid #ddd;\n            font-size: 16px;\n        }\n        th, td {\n            text-align: left;\n            padding: 8px;\n            border: 1px solid #ddd;\n        }\n        th {\n            background-color: #F0F0F0;\n        }\n        tr:nth-child(even) {\n            background-color: #FFFFFF;\n        }\n        tr:nth-child(odd) {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            table, th, td {\n                font-size: 12px;\n            }\n            th, td {\n                padding: 6px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Method 1: Using Analytical Function</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    state_name,\n    total_sales\n<span class=\"SQLKeyword\">FROM</span>\n    (<span class=\"SQLKeyword\">SELECT</span>\n            s.state_name,\n            <span class=\"SQLFunction\">SUM</span><span class=\"SQLKeyword\">(</span>o.total_amount<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> total_sales,\n            <span class=\"SQLFunction\">RANK</span><span class=\"SQLKeyword\">()</span>\n            <span class=\"SQLKeyword\">OVER</span><span class=\"SQLKeyword\">(</span>\n                <span class=\"SQLKeyword\">ORDER BY</span>\n                    <span class=\"SQLFunction\">SUM</span><span class=\"SQLKeyword\">(</span>o.total_amount<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">DESC</span>\n            <span class=\"SQLKeyword\">)</span>                   <span class=\"SQLKeyword\">AS</span> rank\n        <span class=\"SQLKeyword\">FROM</span>\n                 states s\n            <span class=\"SQLKeyword\">JOIN</span> orders o <span class=\"SQLKeyword\">ON</span> s.state_id = o.state_id\n        <span class=\"SQLKeyword\">GROUP BY</span>\n            s.state_name\n    <span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">WHERE</span>\n    rank <= 5\n<span class=\"SQLKeyword\">ORDER BY</span>\n    total_sales <span class=\"SQLKeyword\">DESC</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Explanation:</h4>\n<ul>\n    <li>\n        <strong>Method 1: Using Analytical Function</strong>\n        <ul>\n            <li>The query ranks states based on their total sales using the <code>RANK()</code> analytical function.</li>\n            <li>A subquery calculates the total sales for each state by joining the <code>states</code> and <code>orders</code> tables, grouping by <code>state_name</code>.</li>\n            <li>The <code>RANK()</code> function assigns a rank to each state based on the descending order of total sales.</li>\n            <li>The main query filters out the top five states with the highest sales by selecting rows where the rank is less than or equal to 5.</li>\n            <li>The result is ordered by <code>total_sales</code> in descending order to display the states from highest to lowest sales.</li>\n        </ul>\n    </li>\n</ul>\n    <h4 class=\"bold-blue\">Method 2: Using Aggregated Function</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    state_name,\n    total_sales\n<span class=\"SQLKeyword\">FROM</span>\n    (<span class=\"SQLKeyword\">SELECT</span>\n            s.state_name,\n            <span class=\"SQLFunction\">SUM</span><span class=\"SQLKeyword\">(</span>o.total_amount<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> total_sales\n        <span class=\"SQLKeyword\">FROM</span>\n                 states s\n            <span class=\"SQLKeyword\">JOIN</span> orders o <span class=\"SQLKeyword\">ON</span> s.state_id = o.state_id\n        <span class=\"SQLKeyword\">GROUP BY</span>\n            s.state_name\n        <span class=\"SQLKeyword\">ORDER BY</span>\n            total_sales <span class=\"SQLKeyword\">DESC</span>\n    <span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">WHERE</span>\n    ROWNUM <= 5<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<ul>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <li>\n        <strong>Method 2: Using Aggregated Function</strong>\n        <ul>\n            <li>This query calculates the total sales for each state by joining the <code>states</code> and <code>orders</code> tables, grouping by <code>state_name</code>.</li>\n            <li>The subquery orders the states by <code>total_sales</code> in descending order.</li>\n            <li>The main query uses the <code>ROWNUM</code> pseudocolumn to limit the result to the top five states with the highest sales.</li>\n        </ul>\n    </li>\n</ul>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 112,
    "Question": "Write a query to display workers who joined this month.",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .table-container {\n            overflow-x: auto;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            max-width: 800px;\n            margin: 20px 0;\n            border: 1px solid #ddd;\n            font-size: 16px;\n        }\n        th, td {\n            text-align: left;\n            padding: 8px;\n            border: 1px solid #ddd;\n        }\n        th {\n            background-color: #F0F0F0;\n        }\n        tr:nth-child(even) {\n            background-color: #FFFFFF;\n        }\n        tr:nth-child(odd) {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            table, th, td {\n                font-size: 12px;\n            }\n            th, td {\n                padding: 6px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Method 1:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> worker_id,\n       worker_name,\n       join_date\n<span class=\"SQLKeyword\">FROM</span> employees\n<span class=\"SQLKeyword\">WHERE</span> <span class=\"SQLFunction\">TRUNC</span><span class=\"SQLKeyword\">(</span>join_date, <span class=\"SQLString\">'MM'</span><span class=\"SQLKeyword\">)</span> = <span class=\"SQLFunction\">TRUNC</span><span class=\"SQLKeyword\">(</span>SYSDATE, <span class=\"\nSQLString\">'MM'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Method 2:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> *\n<span class=\"SQLKeyword\">FROM</span> employees\n<span class=\"SQLKeyword\">WHERE</span> <span class=\"SQLFunction\">EXTRACT</span><span class=\"SQLKeyword\">(MONTH FROM</span> join_date<span class=\"SQLKeyword\">)</span> = <span class=\"SQLFunction\">EXTRACT</span><span class=\"SQLKeyword\">(MONTH FROM</span> SYSDATE<span class=\"SQLKeyword\">)</span>\n       <span class=\"SQLKeyword\">AND</span> <span class=\"SQLFunction\">EXTRACT</span><span class=\"SQLKeyword\">(YEAR FROM</span> join_date<span class=\"SQLKeyword\">)</span> = <span class=\"SQLFunction\">EXTRACT</span><span class=\"SQLKeyword\">(YEAR FROM</span> SYSDATE<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 113,
    "Question": "How do you retrieve both employee and manager names from the same table in SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Input Data: Table - EMPLOYEES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>EMPLOYEE_NAME</th>\n                <th>MANAGER_ID</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Jones</td>\n                <td>NULL</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Randy</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Charlie</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>Frank</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Eva</td>\n                <td>2</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>EMPLOYEE</th>\n                <th>MANAGER_ID</th>\n                <th>MANAGER</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Jones</td>\n                <td>NULL</td>\n                <td>NULL</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Randy</td>\n                <td>1</td>\n                <td>Jones</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Charlie</td>\n                <td>1</td>\n                <td>Jones</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>Frank</td>\n                <td>2</td>\n                <td>Randy</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Eva</td>\n                <td>2</td>\n                <td>Randy</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">SQL Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> e.employee_id,\n       e.employee_name <span class=\"SQLKeyword\">AS</span> employee,\n       e.manager_id,\n       m.employee_name <span class=\"SQLKeyword\">AS</span> manager\n<span class=\"SQLKeyword\">FROM</span> employees e\n       <span class=\"SQLKeyword\">LEFT JOIN</span> employees m\n              <span class=\"SQLKeyword\">ON</span> e.manager_id = m.employee_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Explanation:</h4>\n<ul>\n    <li>\n        <strong>Self-Join:</strong>\n        <ul>\n            <li>The query performs a self-join on the <code>employees</code> table, meaning the table is joined with itself.</li>\n            <li><code>e</code> represents the employee in the query.</li>\n            <li><code>m</code> represents the manager in the query.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>Join Condition:</strong>\n        <ul>\n            <li>The self-join is based on the relationship between <code>e.manager_id</code> (the manager ID for the employee) and <code>m.employee_id</code> (the ID of the manager).</li>\n            <li>This allows the query to match each employee with their corresponding manager, retrieving the manager s name from the same table.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>Result Columns:</strong>\n        <ul>\n            <li><code>e.employee_id</code>: The unique identifier for the employee.</li>\n            <li><code>e.employee_name AS employee</code>: The name of the employee.</li>\n            <li><code>e.manager_id</code>: The ID of the employee's manager.</li>\n            <li><code>m.employee_name AS manager</code>: The name of the manager.</li>\n        </ul>\n    </li>\n</ul>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 114,
    "Question": "How do you count rows with sales greater than 70 and order numbers less than 500?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .table-container {\n            overflow-x: auto;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            max-width: 800px;\n            margin: 20px 0;\n            border: 1px solid #ddd;\n            font-size: 16px;\n        }\n        th, td {\n            text-align: left;\n            padding: 8px;\n            border: 1px solid #ddd;\n        }\n        th {\n            background-color: #F0F0F0;\n        }\n        tr:nth-child(even) {\n            background-color: #FFFFFF;\n        }\n        tr:nth-child(odd) {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            table, th, td {\n                font-size: 12px;\n            }\n            th, td {\n                padding: 6px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">SQL Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">COUNT</span><span class=\"SQLKeyword\">(</span>*<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">FROM</span> orders\n<span class=\"SQLKeyword\">WHERE</span> sales > 70\n   <span class=\"SQLKeyword\">AND</span> order_num < 500<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 115,
    "Question": "How would you combine/concatenate the Store_Location and City columns into a single column in SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n            white-space: nowrap;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Input Data: STORES Table</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>STORE_ID</th>\n                    <th>STORE_LOCATION</th>\n                    <th>CITY</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>1</td>\n                    <td>Main Street</td>\n                    <td>New York</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>2</td>\n                    <td>Market Avenue</td>\n                    <td>Los Angeles</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>3</td>\n                    <td>Ocean Drive</td>\n                    <td>Miami</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>4</td>\n                    <td>Elm Street</td>\n                    <td>Dallas</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>5</td>\n                    <td>Sunset Blvd</td>\n                    <td>San Francisco</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <h4 class=\"bold-blue\">Output:</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>STORE_ID</th>\n                    <th>FULL_LOCATION</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>1</td>\n                    <td>Main Street, New York</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>2</td>\n                    <td>Market Avenue, Los Angeles</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>3</td>\n                    <td>Ocean Drive, Miami</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>4</td>\n                    <td>Elm Street, Dallas</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>5</td>\n                    <td>Sunset Blvd, San Francisco</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <h4 class=\"bold-blue\">SQL Query Using CONCAT:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> Store_ID,\n       <span class=\"SQLFunction\">CONCAT</span><span class=\"SQLKeyword\">(</span>Store_Location, <span class=\"SQLString\">', '</span>, City<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> Full_Location\n<span class=\"SQLKeyword\">FROM</span> stores<span class=\"SQLOperator\">;</span>\n</pre>\n    </div>\n    <h4 class=\"bold-blue\">SQL Query Using || Operator:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> Store_ID,\n       Store_Location\n       <span class=\"SQLOperator\">||</span> <span class=\"SQLString\">', '</span>\n       <span class=\"SQLOperator\">||</span> City <span class=\"SQLKeyword\">AS</span> Full_Location\n<span class=\"SQLKeyword\">FROM</span> stores<span class=\"SQLOperator\">;</span>\n</pre>\n    </div>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 116,
    "Question": "What are the advantages and disadvantages of dropping and recreating a table in Oracle?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n<p>In Oracle, the `DROP TABLE` command removes a table and all its data, while the `CREATE TABLE` command creates a new table. This process affects not only the data but also the structure of the database, including primary keys, constraints, indexes, triggers, and privileges. Below, we explore the advantages and disadvantages of this approach in detail.</p>\n<ul>\n    <li><strong>Advantages:</strong>\n        <ul>\n            <li><strong>Clean Slate:</strong> Dropping and recreating a table ensures that the table starts fresh without any legacy data, structure, or constraints that might cause issues.</li>\n            <li><strong>Simplicity:</strong> When a significant schema change is required, this method is simpler than performing multiple `ALTER TABLE` operations, especially if numerous constraints, indexes, or triggers need modification.</li>\n            <li><strong>Optimization:</strong> Starting over allows for optimization of storage parameters, partitioning, and other table settings that might not be possible with `ALTER TABLE` commands.</li>\n        </ul>\n    </li>\n    <li><strong>Disadvantages:</strong>\n        <ul>\n            <li><strong>Data Loss:</strong> Dropping a table removes all its data. This approach is only feasible if the data can be easily recreated, backed up, or is no longer needed. Data must be reinserted, which can be time-consuming.</li>\n            <li><strong>Constraint and Index Re-creation:</strong> All primary keys, foreign keys, unique constraints, indexes, and triggers must be manually recreated, which can be cumbersome and prone to errors.</li>\n            <li><strong>Privileges:</strong> Any user privileges or grants associated with the table are lost and must be re-granted, which can be overlooked and lead to access issues.</li>\n            <li><strong>Dependent Objects:</strong> Objects such as views, materialized views, stored procedures, and packages that depend on the table may break and require recompilation or recreation.</li>\n            <li><strong>Transaction Log and Performance Impact:</strong> Dropping and recreating large tables can generate a significant amount of transaction log data and impact database performance during the operation.</li>\n            <li><strong>Downtime:</strong> This approach may require application downtime, as the table is unavailable during the drop and recreate process.</li>\n        </ul>\n    </li>\n</ul>\n<h4 class=\"bold-maroon\">Considerations:</h4>\n<ul>\n    <li><strong>Use with Caution:</strong> The `DROP` and `RECREATE TABLE` approach should be used cautiously in production environments due to its impact on data, constraints, indexes, and user privileges.</li>\n    <li><strong>Backup:</strong> Always ensure a full backup is available before dropping tables, especially in production, to safeguard against accidental data loss.</li>\n    <li><strong>Plan Downtime:</strong> Plan for the required downtime and thoroughly test the process in a non-production environment to ensure all steps are accounted for.</li>\n</ul>\n<p>In summary, while dropping and recreating a table in Oracle can simplify certain schema changes, it requires careful consideration of the impact on data, constraints, indexes, privileges, and overall database integrity. This approach is best suited for scenarios where starting fresh is advantageous, but it requires meticulous planning and execution to avoid unintended consequences.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 117,
    "Question": "How do you find the total marketing expenditure for product \"Smart Watches\" in SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n            white-space: nowrap;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Input Data: MARKETING_EXPENDITURES Table</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>PRODUCT_NAME</th>\n                    <th>EXPENDITURE</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>Smart Watches</td>\n                    <td>500</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>Smart Watches</td>\n                    <td>300</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>Smart Watches</td>\n                    <td>200</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>Laptops</td>\n                    <td>800</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>Tablets</td>\n                    <td>400</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <h4 class=\"bold-blue\">Output:</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>PRODUCT_NAME</th>\n                    <th>TOTAL_EXPENDITURE</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>Smart Watches</td>\n                    <td>1000</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <h4 class=\"bold-blue\">SQL Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> product_name,\n       <span class=\"SQLFunction\">SUM</span><span class=\"SQLKeyword\">(</span>expenditure<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> total_expenditure\n<span class=\"SQLKeyword\">FROM</span> marketing_expenditures\n<span class=\"SQLKeyword\">WHERE</span> product_name = <span class=\"SQLString\">'Smart Watches'</span>\n<span class=\"SQLKeyword\">GROUP BY</span> product_name<span class=\"SQLOperator\">;</span>\n</pre>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li>\n            <strong>Filtering:</strong>\n            <ul>\n                <li>The query filters the <code>marketing_expenditures</code> table to include only records where the <code>product_name</code> is 'Smart Watches'.</li>\n            </ul>\n        </li>\n    \n        <li>\n            <strong>Grouping:</strong>\n            <ul>\n                <li>The query groups the results by <code>product_name</code> to ensure the sum of expenditures is calculated specifically for 'Smart Watches'.</li>\n            </ul>\n        </li>\n    \n        <li>\n            <strong>Total Expenditure Calculation:</strong>\n            <ul>\n                <li>The query calculates the total marketing expenditure for 'Smart Watches' by summing up the <code>expenditure</code> column within the filtered records.</li>\n                <li>The result is labeled as <code>total_expenditure</code>.</li>\n            </ul>\n        </li>\n    </ul>    \n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 118,
    "Question": "How do you display sales ranks continuously without gaps in SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n            white-space: nowrap;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Input Data: SALES Table</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>ID</th>\n                    <th>PRODUCT_ID</th>\n                    <th>SALES_AMOUNT</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>1</td>\n                    <td>101</td>\n                    <td>500</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>2</td>\n                    <td>102</td>\n                    <td>450</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>3</td>\n                    <td>103</td>\n                    <td>600</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>4</td>\n                    <td>104</td>\n                    <td>500</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>5</td>\n                    <td>105</td>\n                    <td>700</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>6</td>\n                    <td>106</td>\n                    <td>450</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <h4 class=\"bold-blue\">Output:</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>ID</th>\n                    <th>PRODUCT_ID</th>\n                    <th>SALES_AMOUNT</th>\n                    <th>SALES_RANK</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>5</td>\n                    <td>105</td>\n                    <td>700</td>\n                    <td>1</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>3</td>\n                    <td>103</td>\n                    <td>600</td>\n                    <td>2</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>4</td>\n                    <td>104</td>\n                    <td>500</td>\n                    <td>3</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>1</td>\n                    <td>101</td>\n                    <td>500</td>\n                    <td>3</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>6</td>\n                    <td>106</td>\n                    <td>450</td>\n                    <td>4</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>2</td>\n                    <td>102</td>\n                    <td>450</td>\n                    <td>4</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <h4 class=\"bold-blue\">SQL Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> id,\n       product_id,\n       sales_amount,\n       <span class=\"SQLFunction\">DENSE_RANK</span><span class=\"SQLKeyword\">()</span>\n         <span class=\"SQLKeyword\">OVER</span> (\n           <span class=\"SQLKeyword\">ORDER BY</span> sales_amount <span class=\"SQLKeyword\">DESC</span>) <span class=\"SQLKeyword\">AS</span> sales_rank\n<span class=\"SQLKeyword\">FROM</span> sales<span class=\"SQLOperator\">;</span>\n</pre>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n<ul>\n    <li>\n        <strong>Rank Calculation:</strong>\n        <ul>\n            <li>The query calculates the rank of each record based on the <code>sales_amount</code> using the <code>DENSE_RANK()</code> window function.</li>\n            <li><code>DENSE_RANK()</code> assigns ranks to the records in descending order of <code>sales_amount</code>.</li>\n            <li>This function ensures that ranks are assigned continuously without gaps, even if there are ties in the <code>sales_amount</code>.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>Ordering:</strong>\n        <ul>\n            <li>The ranking is performed in descending order, meaning the highest sales amount gets the highest rank (rank 1).</li>\n        </ul>\n    </li>\n</ul>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 119,
    "Question": "How do you display the details of orders placed after 2023 in SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n            white-space: nowrap;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Input Data: ORDERS Table</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>ORDER_ID</th>\n                    <th>CUSTOMER_NAME</th>\n                    <th>ORDER_DATE</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>101</td>\n                    <td>Frank Mir</td>\n                    <td>2024-02-20</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>102</td>\n                    <td>Randy Couture</td>\n                    <td>2023-05-11</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>103</td>\n                    <td>Rhonda Rousey</td>\n                    <td>2025-06-01</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <h4 class=\"bold-blue\">Output:</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>ORDER_ID</th>\n                    <th>CUSTOMER_NAME</th>\n                    <th>ORDER_DATE</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>101</td>\n                    <td>Frank Mir</td>\n                    <td>2024-02-20</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>103</td>\n                    <td>Rhonda Rousey</td>\n                    <td>2025-06-01</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <h4 class=\"bold-blue\">Method 1: Query Using Full Date Comparison</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> order_id,\n       customer_name,\n       order_date\n<span class=\"SQLKeyword\">FROM</span> orders\n<span class=\"SQLKeyword\">WHERE</span> order_date > <span class=\"SQLString\">'2023-12-31'</span><span class=\"SQLOperator\">;</span>\n</pre>\n    </div>\n    <h4 class=\"bold-blue\">Method 2: Query Using the EXTRACT Function</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> order_id,\n       customer_name,\n       order_date\n<span class=\"SQLKeyword\">FROM</span> orders\n<span class=\"SQLKeyword\">WHERE</span> <span class=\"SQLFunction\">EXTRACT</span>(<span class=\"SQLKeyword\">YEAR</span> <span class=\"SQLKeyword\">FROM</span> order_date) > 2023<span class=\"SQLOperator\">;</span>\n</pre>\n    </div>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 120,
    "Question": "How do you display the details of workers who hold any managerial positions from the below table in SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n            white-space: nowrap;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Input Data: WORKERS Table</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>WORKER_ID</th>\n                    <th>JOB_TITLE</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>1</td>\n                    <td>Sales Manager</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>2</td>\n                    <td>HR Specialist</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>3</td>\n                    <td>IT Manager</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>4</td>\n                    <td>Software Developer</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <h4 class=\"bold-blue\">Output:</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>WORKER_ID</th>\n                    <th>JOB_TITLE</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>1</td>\n                    <td>Sales Manager</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>3</td>\n                    <td>IT Manager</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <h4 class=\"bold-blue\">SQL Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\">\n--<span class=\"SQLComment\">Case-sensitive</span>\n<span class=\"SQLKeyword\">SELECT</span> *\n<span class=\"SQLKeyword\">FROM</span> workers\n<span class=\"SQLKeyword\">WHERE</span> job_title <span class=\"SQLKeyword\">LIKE</span> <span class=\"SQLString\">'%Manager%'</span><span class=\"SQLOperator\">;</span>\n--<span class=\"SQLComment\">Case-insensitive</span>\n<span class=\"SQLKeyword\">SELECT</span> *\n<span class=\"SQLKeyword\">FROM</span> workers\n<span class=\"SQLKeyword\">WHERE</span> <span class=\"SQLFunction\">lower</span><span class=\"SQLKeyword\">(</span>job_title<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">LIKE</span> <span class=\"SQLString\">'%manager%'</span><span class=\"SQLOperator\">;</span>\n</pre>\n    </div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 121,
    "Question": "How do you select only the odd-numbered rows from a table in SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n            white-space: nowrap;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Input Data: ORDERS Table</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>ORDER_ID</th>\n                    <th>CUSTOMER_NAME</th>\n                    <th>ORDER_DATE</th>\n                    <th>TOTAL_AMOUNT</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>1</td>\n                    <td>Tom Hanks</td>\n                    <td>01-15-2023 00:00:00</td>\n                    <td>250</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>2</td>\n                    <td>Leonardo DiCaprio</td>\n                    <td>02-20-2023 00:00:00</td>\n                    <td>150</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>3</td>\n                    <td>Scarlett Johansson</td>\n                    <td>03-25-2023 00:00:00</td>\n                    <td>300</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>4</td>\n                    <td>Brad Pitt</td>\n                    <td>04-30-2023 00:00:00</td>\n                    <td>200</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>5</td>\n                    <td>Angelina Jolie</td>\n                    <td>05-05-2023 00:00:00</td>\n                    <td>350</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>6</td>\n                    <td>Johnny Depp</td>\n                    <td>06-10-2023 00:00:00</td>\n                    <td>450</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>7</td>\n                    <td>Meryl Streep</td>\n                    <td>07-15-2023 00:00:00</td>\n                    <td>500</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>8</td>\n                    <td>Denzel Washington</td>\n                    <td>08-20-2023 00:00:00</td>\n                    <td>550</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>9</td>\n                    <td>Jennifer Lawrence</td>\n                    <td>09-25-2023 00:00:00</td>\n                    <td>600</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>10</td>\n                    <td>Robert Downey Jr.</td>\n                    <td>10-30-2023 00:00:00</td>\n                    <td>700</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <h4 class=\"bold-blue\">Output:</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>ORDER_ID</th>\n                    <th>CUSTOMER_NAME</th>\n                    <th>ORDER_DATE</th>\n                    <th>TOTAL_AMOUNT</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>1</td>\n                    <td>Tom Hanks</td>\n                    <td>01-15-2023 00:00:00</td>\n                    <td>250</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>3</td>\n                    <td>Scarlett Johansson</td>\n                    <td>03-25-2023 00:00:00</td>\n                    <td>300</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>5</td>\n                    <td>Angelina Jolie</td>\n                    <td>05-05-2023 00:00:00</td>\n                    <td>350</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>7</td>\n                    <td>Meryl Streep</td>\n                    <td>07-15-2023 00:00:00</td>\n                    <td>500</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>9</td>\n                    <td>Jennifer Lawrence</td>\n                    <td>09-25-2023 00:00:00</td>\n                    <td>600</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <h4 class=\"bold-blue\">SQL Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">--Method 1</span>\n<span class=\"SQLKeyword\">SELECT</span> *\n<span class=\"SQLKeyword\">FROM</span> (<span class=\"SQLKeyword\">SELECT</span> order_id,\n               customer_name,\n               order_date,\n               total_amount\n        <span class=\"SQLKeyword\">FROM</span> orders)\n<span class=\"SQLKeyword\">WHERE</span> <span class=\"SQLFunction\">MOD</span><span class=\"SQLKeyword\">(</span>order_id, 2<span class=\"SQLKeyword\">)</span> = 1<span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">--Method 2</span>\n<span class=\"SQLKeyword\">SELECT</span> order_id,\n       customer_name,\n       order_date,\n       total_amount\n<span class=\"SQLKeyword\">FROM</span> (<span class=\"SQLKeyword\">SELECT</span> order_id,\n               customer_name,\n               order_date,\n               total_amount,\n               <span class=\"SQLKeyword\">CASE</span>\n                 <span class=\"SQLKeyword\">WHEN</span> order_id <span class=\"SQLKeyword\">LIKE</span> <span class=\"SQLString\">'%1'</span> <span class=\"SQLKeyword\">THEN</span> <span class=\"SQLString\">'True'</span>\n                 <span class=\"SQLKeyword\">WHEN</span> order_id <span class=\"SQLKeyword\">LIKE</span> <span class=\"SQLString\">'%3'</span> <span class=\"SQLKeyword\">THEN</span> <span class=\"SQLString\">'True'</span>\n                 <span class=\"SQLKeyword\">WHEN</span> order_id <span class=\"SQLKeyword\">LIKE</span> <span class=\"SQLString\">'%5'</span> <span class=\"SQLKeyword\">THEN</span> <span class=\"SQLString\">'True'</span>\n                 <span class=\"SQLKeyword\">WHEN</span> order_id <span class=\"SQLKeyword\">LIKE</span> <span class=\"SQLString\">'%7'</span> <span class=\"SQLKeyword\">THEN</span> <span class=\"SQLString\">'True'</span>\n                 <span class=\"SQLKeyword\">WHEN</span> order_id <span class=\"SQLKeyword\">LIKE</span> <span class=\"SQLString\">'%9'</span> <span class=\"SQLKeyword\">THEN</span> <span class=\"SQLString\">'True'</span>\n                 <span class=\"SQLKeyword\">ELSE</span> <span class=\"SQLString\">'False'</span>\n               <span class=\"SQLKeyword\">END AS</span> odd_number\n        <span class=\"SQLKeyword\">FROM</span> orders)\n<span class=\"SQLKeyword\">WHERE</span> odd_number = <span class=\"SQLString\">'True'</span><span class=\"SQLOperator\">;</span>\n</pre>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n<ul>\n    <li>\n        <strong>Method 1: Using the MOD Function</strong>\n        <ul>\n            <li>The query selects rows from the <code>orders</code> table where the <code>order_id</code> is odd.</li>\n            <li><code>MOD(order_id, 2) = 1</code> is used to check if the remainder when dividing <code>order_id</code> by 2 is 1, indicating an odd number.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>Method 2: Using a CASE Statement</strong>\n        <ul>\n            <li>The query uses a <code>CASE</code> statement to identify whether the <code>order_id</code> ends in an odd digit (1, 3, 5, 7, 9).</li>\n            <li>The <code>CASE</code> statement returns 'True' for odd-numbered <code>order_id</code> values and 'False' otherwise.</li>\n            <li>The outer query then filters to select only rows where <code>odd_number = 'True'</code>, effectively selecting the odd-numbered rows.</li>\n        </ul>\n    </li>\n</ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 122,
    "Question": "How do you display the first and last records inserted into a table in SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n            white-space: nowrap;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Input Data: ORDERS Table</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>ORDER_ID</th>\n                    <th>CUSTOMER_ID</th>\n                    <th>ORDER_DATE</th>\n                    <th>TOTAL_AMOUNT</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>1</td>\n                    <td>101</td>\n                    <td>01-01-2023 00:00:00</td>\n                    <td>500</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>2</td>\n                    <td>102</td>\n                    <td>01-02-2023 00:00:00</td>\n                    <td>1500</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>3</td>\n                    <td>103</td>\n                    <td>01-03-2023 00:00:00</td>\n                    <td>250</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>4</td>\n                    <td>104</td>\n                    <td>01-04-2023 00:00:00</td>\n                    <td>2000</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <h4 class=\"bold-blue\">Output:</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>ORDER_ID</th>\n                    <th>CUSTOMER_ID</th>\n                    <th>ORDER_DATE</th>\n                    <th>TOTAL_AMOUNT</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>1</td>\n                    <td>101</td>\n                    <td>01-01-2023 00:00:00</td>\n                    <td>500</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>4</td>\n                    <td>104</td>\n                    <td>01-04-2023 00:00:00</td>\n                    <td>2000</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <h4 class=\"bold-blue\">SQL Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> *\n<span class=\"SQLKeyword\">FROM</span> (<span class=\"SQLKeyword\">SELECT</span> orders.*,\n               <span class=\"SQLFunction\">Row_number</span><span class=\"SQLKeyword\">()</span>\n                 <span class=\"SQLKeyword\">over</span> <span class=\"SQLKeyword\">(</span>\n                   <span class=\"SQLKeyword\">ORDER BY</span> ROWID <span class=\"SQLKeyword\">ASC)</span> <span class=\"SQLKeyword\">AS</span> rn\n        <span class=\"SQLKeyword\">FROM</span> orders)\n<span class=\"SQLKeyword\">WHERE</span> rn = 1\n<span class=\"SQLKeyword\">UNION ALL</span>\n<span class=\"SQLKeyword\">SELECT</span> *\n<span class=\"SQLKeyword\">FROM</span> (<span class=\"SQLKeyword\">SELECT</span> orders.*,\n               <span class=\"SQLFunction\">Row_number</span><span class=\"SQLKeyword\">()</span>\n                 <span class=\"SQLKeyword\">over</span> <span class=\"SQLKeyword\">(</span>\n                   <span class=\"SQLKeyword\">ORDER BY</span> ROWID <span class=\"SQLKeyword\">DESC)</span> <span class=\"SQLKeyword\">AS</span> rn\n        <span class=\"SQLKeyword\">FROM</span> orders)\n<span class=\"SQLKeyword\">WHERE</span> rn = 1<span class=\"SQLOperator\">;</span>\n</pre>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n<ul>\n    <li>\n        <strong>Inner Query 1: Selecting the First Record</strong>\n        <ul>\n            <li>The first inner query assigns a row number to each record in the <code>orders</code> table using the <code>ROW_NUMBER()</code> function.</li>\n            <li>The rows are ordered by <code><strong>ROWID(PSEUDOCOLUMN)</strong> ASC</code>, meaning the earliest inserted record is given a row number of 1.</li>\n            <li>The outer query then filters to select the row where <code>rn = 1</code>, which corresponds to the first inserted record.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>Inner Query 2: Selecting the Last Record</strong>\n        <ul>\n            <li>The second inner query also assigns a row number to each record using the <code>ROW_NUMBER()</code> function.</li>\n            <li>However, the rows are ordered by <code><strong>ROWID(PSEUDOCOLUMN)</strong> DESC</code>, meaning the most recently inserted record is given a row number of 1.</li>\n            <li>The outer query then filters to select the row where <code>rn = 1</code>, which corresponds to the last inserted record.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>Combining Results with UNION ALL:</strong>\n        <ul>\n            <li>The results of the two queries (first and last records) are combined using the <code>UNION ALL</code> operator.</li>\n            <li>This ensures that both the first and last inserted records from the <code>orders</code> table are displayed in the final result set.</li>\n        </ul>\n    </li>\n</ul>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 123,
    "Question": "What are some tips for improving SQL query performance?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .table-container {\n            overflow-x: auto;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            max-width: 800px;\n            margin: 20px 0;\n            border: 1px solid #ddd;\n            font-size: 16px;\n        }\n        th, td {\n            text-align: left;\n            padding: 8px;\n            border: 1px solid #ddd;\n        }\n        th {\n            background-color: #F0F0F0;\n        }\n        tr:nth-child(even) {\n            background-color: #FFFFFF;\n        }\n        tr:nth-child(odd) {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            table, th, td {\n                font-size: 12px;\n            }\n            th, td {\n                padding: 6px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Enhancing SQL query performance involves a variety of strategies and best practices. Here are some key tips to improve query efficiency:</p>\n    <ul>\n        <li><strong>Indexing:</strong>\n            <ul>\n                <li><strong>Use appropriate indexes:</strong> Create indexes on columns frequently used in <code>WHERE</code> clauses, <code>JOIN</code> conditions, and <code>ORDER BY</code> clauses.</li>\n                <li><strong>Avoid over-indexing:</strong> Too many indexes can slow down DML (<code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>) operations.</li>\n                <li><strong>Use composite indexes:</strong> For queries filtering on multiple columns, use composite indexes to improve performance.</li>\n            </ul>\n        </li>\n        <li><strong>Optimize SQL Execution Plan:</strong>\n            <ul>\n                <li><strong>Review execution plans:</strong> Use the <code>EXPLAIN PLAN</code> statement to understand how Oracle executes your query.</li>\n                <li><strong>Hints:</strong> Use Oracle hints to guide the optimizer on how to execute queries.</li>\n            </ul>\n        </li>\n        <li><strong>Query Optimization:</strong>\n            <ul>\n                <li><strong>SELECT only necessary columns:</strong> Avoid using <code>SELECT *</code> and retrieve only the required columns.</li>\n                <li><strong>Filter early:</strong> Apply <code>WHERE</code> conditions as early as possible to reduce the data set size.</li>\n                <li><strong>Avoid unnecessary computations:</strong> Use literal values or bind variables instead of functions in <code>WHERE</code> clauses.</li>\n            </ul>\n        </li>\n        <li><strong>Join Optimization:</strong>\n            <ul>\n                <li><strong>Use appropriate join types:</strong> Understand the difference between <code>INNER JOIN</code>, <code>LEFT JOIN</code>, <code>RIGHT JOIN</code>, and <code>FULL JOIN</code> and use them appropriately.</li>\n                <li><strong>Join order:</strong> Place the table with the smallest result set first in the join order.</li>\n            </ul>\n        </li>\n        <li><strong>Partitioning:</strong>\n            <ul>\n                <li><strong>Partition large tables:</strong> Use table partitioning to improve query performance on large datasets by reducing the amount of data scanned.</li>\n            </ul>\n        </li>\n        <li><strong>Subquery and Nested Query Optimization:</strong>\n            <ul>\n                <li><strong>Use EXISTS instead of IN:</strong> For subqueries, use <code>EXISTS</code> instead of <code>IN</code> for better performance.</li>\n                <li><strong>Avoid correlated subqueries:</strong> Where possible, use joins instead of correlated subqueries.</li>\n            </ul>\n        </li>\n        <li><strong>Materialized Views:</strong>\n            <ul>\n                <li><strong>Use materialized views:</strong> For complex queries, precompute results and store them in materialized views to speed up query performance.</li>\n            </ul>\n        </li>\n        <li><strong>Statistics and Histograms:</strong>\n            <ul>\n                <li><strong>Gather statistics:</strong> Regularly gather schema and table statistics using the <code>DBMS_STATS</code> package to help the optimizer make better decisions.</li>\n            </ul>\n        </li>\n        <li><strong>Avoid Full Table Scans:</strong>\n            <ul>\n                <li><strong>Use indexes effectively:</strong> Ensure queries use indexes instead of performing full table scans.</li>\n                <li><strong>Optimize large table scans:</strong> If full table scans are necessary, ensure they are as efficient as possible by tuning storage parameters and using parallel execution.</li>\n            </ul>\n        </li>\n        <li><strong>Use Bind Variables:</strong>\n            <ul>\n                <li><strong>Prevent SQL injection and improve performance:</strong> Use bind variables to allow Oracle to reuse execution plans and improve performance by reducing parsing time.</li>\n            </ul>\n        </li>\n        <li><strong>Avoid Over-Normalization:</strong>\n            <ul>\n                <li><strong>Balance normalization and denormalization:</strong> While normalization helps in data integrity, over-normalization can lead to complex joins. Strike a balance based on your query patterns.</li>\n            </ul>\n        </li>\n        <li><strong>Control Fetch Size:</strong>\n            <ul>\n                <li><strong>Optimize fetch size:</strong> Set the appropriate fetch size in your application to balance memory usage and performance. Larger fetch sizes can reduce the number of round trips to the database.</li>\n            </ul>\n        </li>\n        <li><strong>Use Appropriate Data Types:</strong>\n            <ul>\n                <li><strong>Choose correct data types:</strong> Use appropriate data types for columns to save space and improve performance.</li>\n                <li><strong>Avoid implicit conversions:</strong> Ensure that data types in expressions match to avoid implicit conversions.</li>\n            </ul>\n        </li>\n        <li><strong>Temporary Tables:</strong>\n            <ul>\n                <li><strong>Use temporary tables:</strong> For complex queries involving multiple intermediate results, consider using temporary tables to store intermediate results and simplify the final query.</li>\n            </ul>\n        </li>\n        <li><strong>Efficient Use of Views:</strong>\n            <ul>\n                <li><strong>Optimize views:</strong> Ensure that views are optimized and do not include unnecessary columns or complex joins.</li>\n            </ul>\n        </li>\n        <li><strong>Optimizer Hints:</strong>\n            <ul>\n                <li><strong>Guide the optimizer:</strong> Use optimizer hints like <code>/*+ INDEX(table index_name) */</code> or <code>/*+ FULL(table) */</code> to influence the execution plan.</li>\n                <li><strong>Use cautiously:</strong> Use hints sparingly and only when necessary, as they can sometimes degrade performance if misused.</li>\n            </ul>\n        </li>\n        <li><strong>Avoid Cartesian Joins:</strong>\n            <ul>\n                <li><strong>Prevent accidental Cartesian joins:</strong> Ensure that <code>JOIN</code> conditions are correctly specified to avoid unintended Cartesian products, which can significantly degrade performance.</li>\n            </ul>\n        </li>\n    </ul>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 124,
    "Question": "What is an \"EXPLAIN PLAN\", and how do you analyze an \"EXPLAIN PLAN\" in SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .table-container {\n            overflow-x: auto;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            max-width: 800px;\n            margin: 20px 0;\n            border: 1px solid #ddd;\n            font-size: 16px;\n        }\n        th, td {\n            text-align: left;\n            padding: 8px;\n            border: 1px solid #ddd;\n        }\n        th {\n            background-color: #F0F0F0;\n        }\n        tr:nth-child(even) {\n            background-color: #FFFFFF;\n        }\n        tr:nth-child(odd) {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            table, th, td {\n                font-size: 12px;\n            }\n            th, td {\n                padding: 6px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>An \"EXPLAIN\" plan is a feature in SQL that provides detailed information about how the Oracle Database will execute a query. It shows the execution path and the steps the database will take to retrieve the data. The plan includes details about table access methods, join operations, index usage, and more.</p>\n    <h4 class=\"bold-blue\">Generating an \"EXPLAIN\" Plan:</h4>\n<strong>Using SQL*Plus or SQL Developer:</strong>\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\">\n<span class=\"SQLKeyword\">EXPLAIN PLAN FOR</span>\n<span class=\"SQLKeyword\">SELECT</span> * <span class=\"SQLKeyword\">FROM</span> orders <span class=\"SQLKeyword\">WHERE</span> order_id = 1234<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">SELECT</span> * <span class=\"SQLKeyword\">FROM TABLE</span><span class=\"SQLKeyword\">(</span>DBMS_XPLAN.DISPLAY<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\nPLAN_TABLE_OUTPUT\n--------------------------------------------------------------------------\nPlan hash value: 2340972938\n--------------------------------------------------------------------------\n| Id  | Operation        | Name      | Rows  | Bytes | Cost (%CPU)| Time     |\n--------------------------------------------------------------------------\n|   0 | <span class=\"SQLKeyword\">SELECT</span> STATEMENT |           |     1 |    17 |     2   (0)| 00:00:01 |\n|*  1 |  TABLE ACCESS FULL| ORDERS |     1 |    17 |     2   (0)| 00:00:01 |\n--------------------------------------------------------------------------\nPredicate Information <span class=\"SQLKeyword\">(</span>identified by operation id<span class=\"SQLKeyword\">):</span>\n--------------------------------------------------------------------------\n1 - filter<span class=\"SQLKeyword\">(</span>\"ORDER_ID\"=1234<span class=\"SQLKeyword\">)</span>\n</pre>\n</div>\n            <p>&bull; Alternatively, press the F10 button to generate an EXPLAIN plan in SQL Developer.</p>\n    <h4 class=\"bold-blue\">Analyzing an \"EXPLAIN\" Plan:</h4>\n    <ol>\n        <li><strong>Understanding Key Components:</strong>\n            <ul>\n                <li><strong>Operation:</strong> The action performed at each step (e.g., TABLE ACCESS, INDEX SCAN).</li>\n                <li><strong>Options:</strong> Additional details about the operation (e.g., FULL, RANGE SCAN).</li>\n                <li><strong>Object Name:</strong> The table or index involved in the operation.</li>\n                <li><strong>Cost:</strong> The estimated cost of the operation. Lower costs are generally better.</li>\n                <li><strong>Cardinality:</strong> The estimated number of rows processed by the operation.</li>\n                <li><strong>Bytes:</strong> The estimated amount of data processed by the operation.</li>\n            </ul>\n        </li>\n        <li><strong>Reading the Plan:</strong>\n            <ul>\n                <li>The plan is read from top to bottom and from left to right.</li>\n                <li>Indentation indicates the hierarchy and order of operations.</li>\n            </ul>\n        </li>\n        <li><strong>Common Operations:</strong>\n            <ul>\n                <li><strong>TABLE ACCESS FULL:</strong> A full table scan. Generally less efficient for large tables.</li>\n                <li><strong>INDEX RANGE SCAN:</strong> A range scan on an index. Efficient for retrieving a range of rows.</li>\n                <li><strong>NESTED LOOPS:</strong> A nested loop join. Efficient for small data sets.</li>\n                <li><strong>HASH JOIN:</strong> A hash join. Efficient for large, unsorted data sets.</li>\n                <li><strong>SORT:</strong> An operation that involves sorting data. Can be costly for large data sets.</li>\n            </ul>\n        </li>\n        <li><strong>Optimizing the Plan:</strong>\n            <ul>\n                <li>Ensure appropriate indexes are in place.</li>\n                <li>Rewrite queries to use more efficient joins and operations.</li>\n                <li>Gather and update statistics to help the optimizer make better decisions.</li>\n                <li>Use hints to influence the optimizer when necessary.</li>\n            </ul>\n        </li>\n    </ol>\n    <p>By generating and analyzing an 'EXPLAIN' plan, insights into the efficiency of SQL queries can be gained, and opportunities for optimization can be identified.</p>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 125,
    "Question": "What are common bottlenecks that impact database performance?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .table-container {\n            overflow-x: auto;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            max-width: 800px;\n            margin: 20px 0;\n            border: 1px solid #ddd;\n            font-size: 16px;\n        }\n        th, td {\n            text-align: left;\n            padding: 8px;\n            border: 1px solid #ddd;\n        }\n        th {\n            background-color: #F0F0F0;\n        }\n        tr:nth-child(even) {\n            background-color: #FFFFFF;\n        }\n        tr:nth-child(odd) {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            table, th, td {\n                font-size: 12px;\n            }\n            th, td {\n                padding: 6px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Common bottlenecks that impact Oracle database performance can stem from various sources, including hardware limitations, configuration issues, and inefficient SQL queries. Here are some of the most common bottlenecks:</p>\n    <ul>\n        <li><strong>CPU Bottlenecks:</strong>\n            <ul>\n                <li><strong>High CPU Usage:</strong> Over-utilization of the database server's CPU can slow down query processing.</li>\n                <li><strong>Inefficient SQL Queries:</strong> Poorly written SQL queries requiring excessive computation can strain the CPU.</li>\n            </ul>\n        </li>\n        <li><strong>Memory Bottlenecks:</strong>\n            <ul>\n                <li><strong>Insufficient Memory Allocation:</strong> Not allocating enough memory for the Oracle SGA (System Global Area) and PGA (Program Global Area) can lead to slow performance.</li>\n                <li><strong>High Memory Usage:</strong> Inefficient use of memory, such as not using bind variables, can result in excessive memory consumption.</li>\n            </ul>\n        </li>\n        <li><strong>I/O Bottlenecks:</strong>\n            <ul>\n                <li><strong>Disk Contention:</strong> High levels of read/write operations can cause disk contention and slow I/O performance.</li>\n                <li><strong>Slow Storage Systems:</strong> Using slow disks or improper storage configurations can significantly impact performance.</li>\n                <li><strong>Full Table Scans:</strong> Frequent full table scans can cause high I/O load.</li>\n            </ul>\n        </li>\n        <li><strong>Network Bottlenecks:</strong>\n            <ul>\n                <li><strong>Network Latency:</strong> High network latency can slow down data transfer between the database and clients.</li>\n                <li><strong>Bandwidth Issues:</strong> Insufficient network bandwidth can lead to congestion and slower performance.</li>\n            </ul>\n        </li>\n        <li><strong>Concurrency Bottlenecks:</strong>\n            <ul>\n                <li><strong>Locking and Blocking:</strong> Excessive locking and blocking due to unoptimized transactions can cause significant delays.</li>\n                <li><strong>High Contention on Resources:</strong> High levels of contention for database resources, such as tablespaces and data files, can slow down performance.</li>\n            </ul>\n        </li>\n        <li><strong>Configuration Issues:</strong>\n            <ul>\n                <li><strong>Improper Parameter Settings:</strong> Misconfigured Oracle initialization parameters can negatively impact performance.</li>\n                <li><strong>Inadequate Hardware Resources:</strong> Under-provisioned hardware resources, such as CPU, memory, and storage, can lead to performance issues.</li>\n            </ul>\n        </li>\n        <li><strong>SQL Query Performance:</strong>\n            <ul>\n                <li><strong>Inefficient Queries:</strong> Poorly optimized SQL queries can lead to high resource consumption and slow response times.</li>\n                <li><strong>Lack of Indexes:</strong> Not having appropriate indexes can cause the database to perform full table scans, impacting performance.</li>\n                <li><strong>Suboptimal Execution Plans:</strong> Inefficient execution plans chosen by the optimizer can slow down query performance.</li>\n            </ul>\n        </li>\n        <li><strong>Application Design Issues:</strong>\n            <ul>\n                <li><strong>Poorly Designed Schema:</strong> A suboptimal database schema can lead to inefficient data retrieval and manipulation.</li>\n                <li><strong>Excessive Use of Triggers and Cursors:</strong> Overuse of triggers and cursors can lead to performance overhead.</li>\n                <li><strong>Inadequate Connection Pooling:</strong> Poor management of database connections can lead to bottlenecks.</li>\n            </ul>\n        </li>\n        <li><strong>Data Volume and Growth:</strong>\n            <ul>\n                <li><strong>Large Tables and Indexes:</strong> As tables and indexes grow, the time required for data retrieval and maintenance increases.</li>\n                <li><strong>Fragmentation:</strong> Data and index fragmentation can lead to inefficient space utilization and slower performance.</li>\n            </ul>\n        </li>\n        <li><strong>Maintenance Activities:</strong>\n            <ul>\n                <li><strong>Lack of Regular Maintenance:</strong> Not performing regular maintenance tasks, such as updating statistics and rebuilding indexes, can degrade performance.</li>\n            </ul>\n        </li>\n    </ul>\n    <p>By identifying and addressing these common bottlenecks, database performance can be significantly improved.</p>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 126,
    "Question": "What is a 'Literal' in SQL? Provide an example.",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .table-container {\n            overflow-x: auto;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            max-width: 800px;\n            margin: 20px 0;\n            border: 1px solid #ddd;\n            font-size: 16px;\n        }\n        th, td {\n            text-align: left;\n            padding: 8px;\n            border: 1px solid #ddd;\n        }\n        th {\n            background-color: #F0F0F0;\n        }\n        tr:nth-child(even) {\n            background-color: #FFFFFF;\n        }\n        tr:nth-child(odd) {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            table, th, td {\n                font-size: 12px;\n            }\n            th, td {\n                padding: 6px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In Oracle SQL, a 'literal' is a fixed data value that appears directly in a SQL statement. Literals represent constant values and can be of various data types, including strings, numbers, dates, and more. Here are some examples of different types of literals in Oracle SQL, using an e-commerce database for context:</p>\n    <h4 class=\"bold-blue\">Types of Literals</h4>\n    <h4 class=\"bold-blue\">1. String Literals</h4>\n    String literals are enclosed in single quotes (<code>'</code>).\n    Example:\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLString\">'Discount Offer'</span> <span class=\"SQLKeyword\">AS</span> promotion_message\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">2. Numeric Literals</h4>\n    Numeric literals are numbers and do not require quotes.\n    Example:\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> 10000 <span class=\"SQLKeyword\">AS</span> product_stock\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">3. Date Literals</h4>\n    Date literals are usually enclosed in single quotes and can be formatted using the <code>TO_DATE</code> function.\n    Example:\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">TO_DATE</span><span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'2024-07-19'</span>, <span class=\"SQLString\">'YYYY-MM-DD'</span><span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> sale_start_date\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">4. Interval Literals</h4>\n    Interval literals represent a period of time and can be specified using <code>INTERVAL</code>.\n    Example:\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> SYSDATE <span class=\"SQLOperator\">+</span> <span class=\"SQLKeyword\">INTERVAL</span> <span class=\"SQLString\">'30'</span> <span class=\"SQLKeyword\">DAY</span> <span class=\"SQLKeyword\">AS</span> sale_end_date\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Examples of Using Literals in SQL Statements</h4>\n    <h4 class=\"bold-blue\">1. String Literal Example</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> product_name, category\n<span class=\"SQLKeyword\">FROM</span> products\n<span class=\"SQLKeyword\">WHERE</span> category = <span class=\"SQLString\">'Electronics'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>In this example, <code>'Electronics'</code> is a string literal used to filter products based on their category.</p>\n    <h4 class=\"bold-blue\">2. Numeric Literal Example</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> order_id, total_amount\n<span class=\"SQLKeyword\">FROM</span> orders\n<span class=\"SQLKeyword\">WHERE</span> total_amount <span class=\"SQLOperator\">></span> 500<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>Here, <code>500</code> is a numeric literal used to filter orders with a total amount greater than 500.</p>\n    <h4 class=\"bold-blue\">3. Date Literal Example</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> order_id, order_date\n<span class=\"SQLKeyword\">FROM</span> orders\n<span class=\"SQLKeyword\">WHERE</span> order_date <span class=\"SQLOperator\">></span> <span class=\"SQLFunction\">TO_DATE</span><span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'2023-01-01'</span>, <span class=\"SQLString\">'YYYY-MM-DD'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>In this query, <code>'2023-01-01'</code> is a string literal representing a date, converted to a date literal using <code>TO_DATE</code>.</p>\n    <h4 class=\"bold-blue\">4. Interval Literal Example</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> customer_id, SYSDATE <span class=\"SQLOperator\">+</span> <span class=\"SQLKeyword\">INTERVAL</span> <span class=\"SQLString\">'5'</span> <span class=\"SQLKeyword\">DAY</span> <span class=\"SQLKeyword\">AS</span> delivery_date\n<span class=\"SQLKeyword\">FROM</span> orders\n<span class=\"SQLKeyword\">WHERE</span> order_status = <span class=\"SQLString\">'Shipped'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This query adds an interval literal of 5 days to the current date (<code>SYSDATE</code>), creating a new date for expected delivery 5 days from today.</p>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 127,
    "Question": "How is the double ampersand (&&) used in SQL queries? Provide an example.",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .table-container {\n            overflow-x: auto;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            max-width: 800px;\n            margin: 20px 0;\n            border: 1px solid #ddd;\n            font-size: 16px;\n        }\n        th, td {\n            text-align: left;\n            padding: 8px;\n            border: 1px solid #ddd;\n        }\n        th {\n            background-color: #F0F0F0;\n        }\n        tr:nth-child(even) {\n            background-color: #FFFFFF;\n        }\n        tr:nth-child(odd) {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            table, th, td {\n                font-size: 12px;\n            }\n            th, td {\n                padding: 6px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In Oracle SQL, the double ampersand (&&) is used to define and reuse substitution variables. These variables act as placeholders that get replaced with actual values when the query is executed. Using the double ampersand enables the user to define a variable once and reuse it multiple times within the same script or session.</p>\n    <h4 class=\"bold-blue\">Example of Usage</h4>\n    <h4 class=\"bold-blue\">Single Use with One Ampersand (&):</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> *\n<span class=\"SQLKeyword\">FROM</span> employees\n<span class=\"SQLKeyword\">WHERE</span> department_id = <span class=\"SQLOperator\">&</span>department_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>When executing this query, Oracle will prompt you to enter a value for department_id each time the query is run.</p>\n    <h4 class=\"bold-blue\">Reusing a Variable with Double Ampersand (&&):</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> *\n<span class=\"SQLKeyword\">FROM</span> employees\n<span class=\"SQLKeyword\">WHERE</span> department_id = <span class=\"SQLOperator\">&amp;&amp;</span>department_id<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">SELECT</span> department_name\n<span class=\"SQLKeyword\">FROM</span> departments\n<span class=\"SQLKeyword\">WHERE</span> department_id = <span class=\"SQLOperator\">&amp;&amp;</span>department_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>In this scenario, Oracle will prompt you to enter a value for <code>department_id</code> when the first query runs. The entered value will be stored and reused in the second query without prompting again.</p>\n    <h4 class=\"bold-blue\">Practical Example</h4>\n    <p>Suppose we want to retrieve employees from a specific department and also fetch the department name for that department:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- First prompt for department_id</span>\n<span class=\"SQLKeyword\">SELECT</span> *\n<span class=\"SQLKeyword\">FROM</span> employees\n<span class=\"SQLKeyword\">WHERE</span> department_id = <span class=\"SQLOperator\">&amp;&amp;</span>department_id<span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Reuse the same department_id without prompting again</span>\n<span class=\"SQLKeyword\">SELECT</span> department_name\n<span class=\"SQLKeyword\">FROM</span> departments\n<span class=\"SQLKeyword\">WHERE</span> department_id = <span class=\"SQLOperator\">&amp;&amp;</span>department_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>When this script is executed, Oracle will prompt you to enter a value for <code>department_id</code> only once. The entered value will be used for both queries.</p>\n    <h4 class=\"bold-blue\">Sample Execution</h4>\n    <p>If the user inputs <code>10</code> for <code>department_id</code>:</p>\n    <!-- <ol> -->\n        <li>The first query will become:\n            <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> *\n<span class=\"SQLKeyword\">FROM</span> employees\n<span class=\"SQLKeyword\">WHERE</span> department_id = 10<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n        </li>\n        <li>The second query will become:\n            <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> department_name\n<span class=\"SQLKeyword\">FROM</span> departments\n<span class=\"SQLKeyword\">WHERE</span> department_id = 10<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n        </li>\n    <!-- </ol> -->\n    <p>This approach ensures the value <code>10</code> is used consistently in both queries without prompting the user multiple times.</p>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 128,
    "Question": "How do you retrieve the nth record from a table in SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .table-container {\n            overflow-x: auto;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            max-width: 800px;\n            margin: 20px 0;\n            border: 1px solid #ddd;\n            font-size: 16px;\n        }\n        th, td {\n            text-align: left;\n            padding: 8px;\n            border: 1px solid #ddd;\n        }\n        th {\n            background-color: #F0F0F0;\n        }\n        tr:nth-child(even) {\n            background-color: #FFFFFF;\n        }\n        tr:nth-child(odd) {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            table, th, td {\n                font-size: 12px;\n            }\n            th, td {\n                padding: 6px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p\">Retrieving the nth record from a table in Oracle SQL can be accomplished using various methods. One common method is to use the <code>ROWNUM</code> or <code>ROW_NUMBER()</code> functions.</p>\n    <h4 class=\"bold-blue\">Example 1: Using ROWNUM</h4>\n    <p>Suppose there is a table <code>TRANSACTIONS</code> that contains transaction records. To retrieve the 5th transaction based on the transaction date, a subquery with <code>ROWNUM</code> can be used:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> *\n<span class=\"SQLKeyword\">FROM</span> <span class=\"SQLKeyword\">(</span>\n    <span class=\"SQLKeyword\">SELECT</span> t.*, <span class=\"SQLKeyword\">ROWNUM AS</span> rn\n    <span class=\"SQLKeyword\">FROM</span> transactions t\n    <span class=\"SQLKeyword\">ORDER BY</span> transaction_date\n<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">WHERE</span> rn = 5<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>In this example, the inner query assigns a unique row number to each transaction sorted by <code>transaction_date</code>. The outer query then retrieves the 5th record.</p>\n    <h4 class=\"bold-blue\">Example 2: Using ROW_NUMBER() with Common Table Expressions (CTE)</h4>\n    <p>A more flexible method involves using the <code>ROW_NUMBER()</code> analytic function. This approach is useful for more complex queries and partitions.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">WITH</span> numbered_transactions <span class=\"SQLKeyword\">AS</span> <span class=\"SQLKeyword\">(</span>\n    <span class=\"SQLKeyword\">SELECT</span> t.*, <span class=\"SQLFunction\">ROW_NUMBER</span><span class=\"SQLKeyword\">()</span> <span class=\"SQLKeyword\">OVER (ORDER BY</span> transaction_date<span class=\"SQLKeyword\">) AS</span> rn\n    <span class=\"SQLKeyword\">FROM</span> transactions t\n<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">SELECT</span> *\n<span class=\"SQLKeyword\">FROM</span> numbered_transactions\n<span class=\"SQLKeyword\">WHERE</span> rn = 5<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>Here, the <code>ROW_NUMBER()</code> function assigns a sequential integer to each row based on the <code>transaction_date</code> order, and the <code>WITH</code> clause (CTE) simplifies the structure of the main query.</p>\n    <h4 class=\"bold-blue\">Example 3: Retrieving the nth Largest Transaction</h4>\n    <p>To retrieve the nth largest transaction amount in the <code>transactions</code> table, the following query can be used:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">WITH</span> ranked_transactions <span class=\"SQLKeyword\">AS</span> <span class=\"SQLKeyword\">(</span>\n    <span class=\"SQLKeyword\">SELECT</span> t.*, <span class=\"SQLFunction\">ROW_NUMBER</span><span class=\"SQLKeyword\">()</span> <span class=\"SQLKeyword\">OVER (ORDER BY</span> transaction_amount <span class=\"SQLKeyword\">DESC) AS</span> rn\n    <span class=\"SQLKeyword\">FROM</span> transactions t\n<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">SELECT</span> *\n<span class=\"SQLKeyword\">FROM</span> ranked_transactions\n<span class=\"SQLKeyword\">WHERE</span> rn = 5<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This query fetches the transaction with the 5th highest amount.</p>\n    <h4 class=\"bold-blue\">Example 4: Retrieving the nth Record per Account</h4>\n    <p>To find the nth transaction for each account in the <code>transactions</code> table, the <code>ROW_NUMBER()</code> function partitioned by account number can be used:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">WITH</span> numbered_transactions <span class=\"SQLKeyword\">AS</span> <span class=\"SQLKeyword\">(</span>\n    <span class=\"SQLKeyword\">SELECT</span> t.*, <span class=\"SQLFunction\">ROW_NUMBER</span><span class=\"SQLKeyword\">()</span> <span class=\"SQLKeyword\">OVER (PARTITION BY</span> account_number <span class=\"SQLKeyword\">ORDER BY</span> transaction_date<span class=\"SQLKeyword\">) AS</span> rn\n    <span class=\"SQLKeyword\">FROM</span> transactions t\n<span class=\"SQLKeyword\">)</span\n>\n<span class=\"SQLKeyword\">SELECT</span> *\n<span class=\"SQLKeyword\">FROM</span> numbered_transactions\n<span class=\"SQLKeyword\">WHERE</span> rn = 5<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This query partitions the transactions by <code>account_number</code> and assigns row numbers within each partition, allowing selection of the 5th transaction for each account.</p>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 129,
    "Question": "What are the drawbacks of using sequences?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .table-container {\n            overflow-x: auto;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            max-width: 800px;\n            margin: 20px 0;\n            border: 1px solid #ddd;\n            font-size: 16px;\n        }\n        th, td {\n            text-align: left;\n            padding: 8px;\n            border: 1px solid #ddd;\n        }\n        th {\n            background-color: #F0F0F0;\n        }\n        tr:nth-child(even) {\n            background-color: #FFFFFF;\n        }\n        tr:nth-child(odd) {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            table, th, td {\n                font-size: 12px;\n            }\n            th, td {\n                padding: 6px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Oracle sequences are useful for generating unique numeric values, commonly for primary keys. However, they come with certain drawbacks and limitations:</p>\n    <ul>\n        <li><strong>Gap Generation:</strong>\n            <ul>\n                <li>Gaps can occur in the sequence numbers if transactions using the sequence are rolled back. Additionally, if a system crash happens after a sequence value is generated but before the transaction is committed, gaps will be present.</li>\n            </ul>\n        </li>\n        <li><strong>No Order Guarantee:</strong>\n            <ul>\n                <li>Sequences ensure unique values but do not guarantee the order in which values are generated. When multiple sessions request sequence values simultaneously, the generated values might not match the request order.</li>\n            </ul>\n        </li>\n        <li><strong>Performance Impact:</strong>\n            <ul>\n                <li>High concurrency can cause contention issues. Although sequences are designed to be lightweight, they can still become a bottleneck in high-transaction environments due to the serialized nature of sequence value generation.</li>\n            </ul>\n        </li>\n        <li><strong>Limited Customization:</strong>\n            <ul>\n                <li>Sequences are restricted to numeric values and offer limited customization options. Generating alphanumeric keys or incorporating specific business rules directly within sequences is challenging and often requires additional application logic.</li>\n            </ul>\n        </li>\n        <li><strong>No Transactional Control:</strong>\n            <ul>\n                <li>Sequence values are independent of transactions. Once a sequence value is generated, it is not rolled back if the transaction fails or is rolled back, resulting in gaps in the sequence numbers.</li>\n            </ul>\n        </li>\n    </ul>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 130,
    "Question": "How do you address missing serial numbers in a sequential column?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n            white-space: nowrap;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Input Data: TRANSACTIONS Table</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>TRANSACTION_ID</th>\n                    <th>TRANSACTION_NAME</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>1001</td>\n                    <td>Deposit</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>1002</td>\n                    <td>Withdrawal</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>1004</td>\n                    <td>Transfer</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>1005</td>\n                    <td>Deposit</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>1007</td>\n                    <td>Payment</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <p>This sample data has missing transaction IDs 1003 and 1006.</p>\n    <h4 class=\"bold-blue\">Method 1: Using Analytic Functions</h4>\n    <div class=\"scrollable-container\">\n        <pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> previous_id <span class=\"SQLOperator\">+</span> 1 <span class=\"SQLKeyword\">AS</span> missing_transaction_id\n<span class=\"SQLKeyword\">FROM</span> <span class=\"SQLKeyword\">(</span><span class=\"SQLKeyword\">SELECT</span> transaction_id,\n               <span class=\"SQLFunction\">LAG</span><span class=\"SQLKeyword\">(</span>transaction_id<span class=\"SQLKeyword\">)</span>\n                 <span class=\"SQLKeyword\">OVER (ORDER BY</span> transaction_id<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> previous_id\n        <span class=\"SQLKeyword\">FROM</span> transactions<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">WHERE</span> transaction_id <span class=\"SQLOperator\">-</span> previous_id <span class=\"SQLOperator\">></span> 1<span class=\"SQLOperator\">;</span>\n        </pre>\n    </div>\n    <h4 class=\"bold-blue\">Output:</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>MISSING_TRANSACTION_ID</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>1003</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>1006</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li>\n            <strong>Method 1: Using Analytic Functions</strong>\n            <ul>\n                <li>The query uses the <code>LAG()</code> analytic function to compare each <code>transaction_id</code> with the previous one in the sequence.</li>\n                <li>It identifies missing serial numbers by checking where the difference between the current <code>transaction_id</code> and the previous one is greater than 1.</li>\n                <li>The missing transaction ID is calculated as <code>previous_id + 1</code>.</li>\n            </ul>\n        </li>\n    </ul>\n    <h4 class=\"bold-blue\">Method 2: Using a Left Join</h4>\n    <div class=\"scrollable-container\">\n        <pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> a.transaction_id <span class=\"SQLOperator\">+</span> 1 <span class=\"SQLKeyword\">AS</span> missing_transaction_id\n<span class=\"SQLKeyword\">FROM</span> transactions a\n       <span class=\"SQLKeyword\">LEFT JOIN</span> transactions b\n              <span class=\"SQLKeyword\">ON</span> a.transaction_id <span class=\"SQLOperator\">+</span> 1 = b.transaction_id\n<span class=\"SQLKeyword\">WHERE</span> b.transaction_id <span class=\"SQLKeyword\">IS NULL</span>\n       <span class=\"SQLKeyword\">AND</span> a.transaction_id < <span class=\"SQLKeyword\">(SELECT MAX</span><span class=\"SQLKeyword\">(</span>transaction_id<span class=\"SQLKeyword\">)</span>\n                               <span class=\"SQLKeyword\">FROM</span> transactions<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">ORDER BY</span> 1<span class=\"SQLOperator\">;</span>\n        </pre>\n    </div>\n    <h4 class=\"bold-blue\">Output:</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>MISSING_TRANSACTION_ID</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>1003</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>1006</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li>\n            <strong>Method 2: Using a Left Join</strong>\n            <ul>\n                <li>The query performs a self-join on the <code>transactions</code> table, where the left table's <code>transaction_id + 1</code> is joined with the right table's <code>transaction_id</code>.</li>\n                <li>It identifies missing transaction IDs by filtering where the join fails (i.e., where <code>b.transaction_id IS NULL</code>).</li>\n                <li>The result shows the missing transaction IDs, calculated as <code>a.transaction_id + 1</code>.</li>\n            </ul>\n        </li>\n    </ul>\n    <h4 class=\"bold-blue\">Method 3: Using a Left Join to flag \"Missing\" or \"Not Missing\" sequences in the status column</h4>\n    <p>This method not only identifies missing transaction IDs but also indicates the status of each transaction ID.</p>\n    <div class=\"scrollable-container\">\n        <pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> transaction_id,\n       <span class=\"SQLString\">'Not Missing'</span> <span class=\"SQLKeyword\">AS</span> missing_trans_status,\n       transaction_name\n<span class=\"SQLKeyword\">FROM</span> transactions\n<span class=\"SQLKeyword\">UNION</span>\n<span class=\"SQLKeyword\">SELECT</span> a.transaction_id <span class=\"SQLOperator\">+</span> 1,\n       <span class=\"SQLString\">'Missing'</span>,\n       <span class=\"SQLKeyword\">NULL</span>\n<span class=\"SQLKeyword\">FROM</span> transactions a\n       <span class=\"SQLKeyword\">LEFT JOIN</span> transactions b\n              <span class=\"SQLKeyword\">ON</span> a.transaction_id <span class=\"SQLOperator\">+</span> 1 = b.transaction_id\n<span class=\"SQLKeyword\">WHERE</span> b.transaction_id <span class=\"SQLKeyword\">IS NULL</span>\n       <span class=\"SQLKeyword\">AND</span> a.transaction_id < <span class=\"SQLKeyword\">(SELECT MAX</span><span class=\"SQLKeyword\">(</span>transaction_id<span class=\"SQLKeyword\">)</span>\n                               <span class=\"SQLKeyword\">FROM</span> transactions<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">ORDER BY</span> 1<span class=\"SQLOperator\">;</span>\n        </pre>\n    </div>\n    <h4 class=\"bold-blue\">Output:</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>TRANSACTION_ID</th>\n                    <th>MISSING_TRANS_STATUS</th>\n                    <th>TRANSACTION_NAME</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>1001</td>\n                    <td>Not Missing</td>\n                    <td>Deposit</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>1002</td>\n                    <td>Not Missing</td>\n                    <td>Withdrawal</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>1003</td>\n                    <td>Missing</td>\n                    <td>NULL</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>1004</td>\n                    <td>Not Missing</td>\n                    <td>Transfer</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>1005</td>\n                    <td>Not Missing</td>\n                    <td>Deposit</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>1006</td>\n                    <td>Missing</td>\n                    <td>NULL</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>1007</td>\n                    <td>Not Missing</td>\n                    <td>Payment</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li>\n            <strong>Method 3: Using a Left Join to Flag \"Missing\" or \"Not Missing\" Sequences</strong>\n            <ul>\n                <li>This method combines the results of existing and missing transaction IDs into a single query, also indicating whether each ID is \"Missing\" or \"Not Missing\".</li>\n                <li>The first part of the <code>UNION</code> query selects all existing transaction IDs and flags them as \"Not Missing\".</li>\n                <li>The second part identifies missing transaction IDs using a left join, similar to Method 2, and flags them as \"Missing\".</li>\n                <li>The combined result set provides a comprehensive view of all transaction IDs, including those that are missing.</li>\n            </ul>\n        </li>\n    </ul>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 131,
    "Question": "Write a query to display male and female students alternately from the students table.",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n            white-space: nowrap;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Input Data: STUDENTS Table</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>STUDENT_ID</th>\n                    <th>STUDENT_NAME</th>\n                    <th>GENDER</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>1</td>\n                    <td>Michael Jordan</td>\n                    <td>Male</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>10</td>\n                    <td>Michael Phelps</td>\n                    <td>Male</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>3</td>\n                    <td>Usain Bolt</td>\n                    <td>Male</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>4</td>\n                    <td>Ronda Rousey</td>\n                    <td>Female</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>5</td>\n                    <td>Lionel Messi</td>\n                    <td>Male</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>6</td>\n                    <td>Allyson Felix</td>\n                    <td>Female</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>7</td>\n                    <td>Roger Federer</td>\n                    <td>Male</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>8</td>\n                    <td>Lindsey Vonn</td>\n                    <td>Female</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>9</td>\n                    <td>LeBron James</td>\n                    <td>Male</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>2</td>\n                    <td>Serena Williams</td>\n                    <td>Female</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <h4 class=\"bold-blue\">Output:</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>STUDENT_ID</th>\n                    <th>STUDENT_NAME</th>\n                    <th>GENDER</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>2</td>\n                    <td>Serena Williams</td>\n                    <td>Female</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>1</td>\n                    <td>Michael Jordan</td>\n                    <td>Male</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>4</td>\n                    <td>Ronda Rousey</td>\n                    <td>Female</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>3</td>\n                    <td>Usain Bolt</td>\n                    <td>Male</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>6</td>\n                    <td>Allyson Felix</td>\n                    <td>Female</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>5</td>\n                    <td>Lionel Messi</td>\n                    <td>Male</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>8</td>\n                    <td>Lindsey Vonn</td>\n                    <td>Female</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>7</td>\n                    <td>Roger Federer</td>\n                    <td>Male</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>9</td>\n                    <td>LeBron James</td>\n                    <td>Male</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>10</td>\n                    <td>Michael Phelps</td>\n                    <td>Male</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <h4 class=\"bold-blue\">SQL Query to Achieve the Alternating Order</h4>\n    <div class=\"scrollable-container\">\n        <pre class=\"SQLCode\"><span class=\"SQLKeyword\">WITH</span> male_students\n     <span class=\"SQLKeyword\">AS</span> <span class=\"SQLKeyword\">(</span><span class=\"SQLKeyword\">SELECT</span> student_id,\n                student_name,\n                gender,\n                <span class=\"SQLFunction\">ROW_NUMBER</span><span class=\"SQLKeyword\">()</span>\n                  <span class=\"SQLKeyword\">OVER (ORDER BY</span> student_id<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> rn\n         <span class=\"SQLKeyword\">FROM</span> students\n         <span class=\"SQLKeyword\">WHERE</span> gender = <span class=\"SQLString\">'Male'</span><span class=\"SQLKeyword\">)</span>,\n     female_students\n     <span class=\"SQLKeyword\">AS</span> <span class=\"SQLKeyword\">(</span><span class=\"SQLKeyword\">SELECT</span> student_id,\n                student_name,\n                gender,\n                <span class=\"SQLFunction\">ROW_NUMBER</span><span class=\"SQLKeyword\">()</span>\n                  <span class=\"SQLKeyword\">OVER (ORDER BY</span> student_id<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> rn\n         <span class=\"SQLKeyword\">FROM</span> students\n         <span class=\"SQLKeyword\">WHERE</span> gender = <span class=\"SQLString\">'Female'</span><span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">SELECT</span> student_id,\n       student_name,\n       gender\n<span class=\"SQLKeyword\">FROM</span> <span class=\"SQLKeyword\">(</span><span class=\"SQLKeyword\">SELECT</span> student_id,\n               student_name,\n               gender,\n               rn\n        <span class=\"SQLKeyword\">FROM</span> male_students\n        <span class=\"SQLKeyword\">UNION ALL</span>\n        <span class=\"SQLKeyword\">SELECT</span> student_id,\n               student_name,\n               gender,\n               rn\n        <span class=\"SQLKeyword\">FROM</span> female_students<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">ORDER BY</span> rn,\n          gender<span class=\"SQLOperator\">;</span></pre>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n<ul>\n    <li>\n        <strong>CTE for Male Students:</strong>\n        <ul>\n            <li>The query defines a Common Table Expression (CTE) named <code>male_students</code>, which selects male students from the <code>students</code> table.</li>\n            <li>It assigns a row number to each male student using the <code>ROW_NUMBER()</code> function, ordered by <code>student_id</code>.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>CTE for Female Students:</strong>\n        <ul>\n            <li>Another CTE named <code>female_students</code> is defined to select female students from the <code>students</code> table.</li>\n            <li>It similarly assigns a row number to each female student using the <code>ROW_NUMBER()</code> function, ordered by <code>student_id</code>.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>Combining Results:</strong>\n        <ul>\n            <li>The query combines the results from both CTEs using the <code>UNION ALL</code> operator.</li>\n            <li>This ensures that all students, both male and female, are included in the final result set with their respective row numbers.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>Final Ordering:</strong>\n        <ul>\n            <li>The combined result set is ordered by the row number (<code>rn</code>) and gender, ensuring an alternating sequence of male and female students.</li>\n            <li>This alternating pattern is achieved by interleaving the row numbers of male and female students.</li>\n        </ul>\n    </li>\n</ul>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 132,
    "Question": "What could cause a query that ran in 5 seconds yesterday to take an hour today, and how would you troubleshoot this issue?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .table-container {\n            overflow-x: auto;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            max-width: 800px;\n            margin: 20px 0;\n            border: 1px solid #ddd;\n            font-size: 16px;\n        }\n        th, td {\n            text-align: left;\n            padding: 8px;\n            border: 1px solid #ddd;\n        }\n        th {\n            background-color: #F0F0F0;\n        }\n        tr:nth-child(even) {\n            background-color: #FFFFFF;\n        }\n        tr:nth-child(odd) {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            table, th, td {\n                font-size: 12px;\n            }\n            th, td {\n                padding: 6px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Potential Causes:</h4>\n    <ul>\n        <li><strong>Data Volume Changes:</strong>\n            <ul>\n                <li><strong>Increased Data Volume:</strong> Significant growth in underlying tables since the last execution can lead to longer query times.</li>\n            </ul>\n        </li>\n        <li><strong>Execution Plan Changes:</strong>\n            <ul>\n                <li><strong>Statistics Updates:</strong> The Oracle optimizer relies on table and index statistics. Updated statistics may cause the optimizer to choose a different, less efficient execution plan.</li>\n            </ul>\n        </li>\n        <li><strong>Resource Contention:</strong>\n            <ul>\n                <li><strong>CPU/Memory Contention:</strong> Increased server load or insufficient memory can slow down query execution.</li>\n                <li><strong>I/O Contention:</strong> Higher I/O activity due to other processes or increased database load can cause performance degradation.</li>\n                <li><strong>Lock Contention:</strong> Sessions holding locks on required data can delay query execution.</li>\n            </ul>\n        </li>\n        <li><strong>Changes in Environment:</strong>\n            <ul>\n                <li><strong>Configuration Changes:</strong> Changes in database or server configuration, such as memory settings, CPU allocation, hardware, or disk configuration, can affect performance.</li>\n                <li><strong>Network Issues:</strong> Network latency or connection issues can slow down query performance.</li>\n            </ul>\n        </li>\n        <li><strong>Index Issues:</strong>\n            <ul>\n                <li><strong>Index Fragmentation:</strong> Fragmented indexes can slow down query performance.</li>\n                <li><strong>Missing or Stale Indexes:</strong> Changes in indexing strategy, such as dropped or outdated indexes, can impact performance.</li>\n            </ul>\n        </li>\n        <li><strong>Hardware Issues:</strong>\n            <ul>\n                <li><strong>Disk Failures:</strong> Disk issues or failures causing slower I/O operations.</li>\n                <li><strong>Hardware Degradation:</strong> General hardware degradation affecting server performance.</li>\n            </ul>\n        </li>\n    </ul>\n    <h4 class=\"bold-blue\">Troubleshooting Steps:</h4>\n    <ul>\n        <li><strong>Check Execution Plans:</strong>\n            <ul>\n                <li><strong>Compare Execution Plans:</strong> Retrieve and compare execution plans from previous and current runs using \"DBMS_XPLAN.DISPLAY_CURSOR\".\n                <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> *\n<span class=\"SQLKeyword\">FROM</span> <span class=\"SQLKeyword\">TABLE</span><span class=\"SQLKeyword\">(</span>DBMS_XPLAN.DISPLAY_CURSOR<span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'<SQL_ID>'</span>, 0, <span class=\"SQLString\">'ALLSTATS LAST'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n                </li>\n                <li><strong>Identify Changes:</strong> Look for differences in access paths, join methods, or estimated versus actual rows.</li>\n            </ul>\n        </li>\n        <li><strong>Check Statistics:</strong>\n            <ul>\n                <li><strong>Analyze Table Statistics:</strong> Verify when statistics were last gathered and if they reflect the current data distribution.\n                <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> table_name, num_rows, last_analyzed\n<span class=\"SQLKeyword\">FROM</span> dba_tables\n<span class=\"SQLKeyword\">WHERE</span> table_name = <span class=\"SQLString\">'TABLE_NAME'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n                </li>\n                <li><strong>Gather New Statistics:</strong> If necessary, gather fresh statistics.\n                <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">EXEC</span> DBMS_STATS.GATHER_TABLE_STATS<span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'SCHEMA_NAME'</span>, <span class=\"SQLString\">'TABLE_NAME'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n                </li>\n            </ul>\n        </li>\n        <li><strong>Monitor Resource Usage:</strong>\n            <ul>\n                <li><strong>AWR Reports:</strong> Generate and analyze Automatic Workload Repository (AWR) reports to identify resource bottlenecks.\n                <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Generate AWR Report</span>\n@?/rdbms/admin/awrrpt.sql\n</pre>\n</div>\n                </li>\n                <li><strong>ASH Reports:</strong> Use Active Session History (ASH) reports to understand session wait events during slow execution periods.\n                <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Generate ASH Report</span>\n@?/rdbms/admin/ashrpt.sql\n</pre>\n</div>\n                </li>\n            </ul>\n        </li>\n        <li><strong>Check for Contention:</strong>\n            <ul>\n                <li><strong>Lock Contention:</strong> Check for blocking sessions and lock waits.\n                <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> blocking_session,\n       sid,\n       wait_class,\n       seconds_in_wait,\n       event\n<span class=\"SQLKeyword\">FROM</span> v$session\n<span class=\"SQLKeyword\">WHERE</span> blocking_session <span class=\"SQLKeyword\">IS NOT NULL</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n                </li>\n                <li><strong>I/O Waits:</strong> Look for I/O-related wait events.\n                <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> event,\n       total_waits,\n       time_waited\n<span class=\"SQLKeyword\">FROM</span> v$system_event\n<span class=\"SQLKeyword\">WHERE</span> event <span class=\"SQLKeyword\">LIKE</span> <span class=\"SQLString\">'%I/O%'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n                </li>\n            </ul>\n        </li>\n        <li><strong>Review Index Usage:</strong>\n            <ul>\n                <li><strong>Index Health:</strong> Check the health and fragmentation of indexes.\n                <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> index_name,\n       blevel,\n       leaf_blocks,\n       clustering_factor\n<span class=\"SQLKeyword\">FROM</span> dba_indexes\n<span class=\"SQLKeyword\">WHERE</span> table_name = <span class=\"SQLString\">'TABLE_NAME'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n                </li>\n                <li><strong>Rebuild Indexes:</strong> If indexes are fragmented, consider rebuilding them.\n                <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">ALTER INDEX</span> idx_index_name <span class=\"SQLKeyword\">REBUILD</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n                </li>\n            </ul>\n        </li>\n        <li><strong>Environmental Changes:</strong>\n            <ul>\n                <li><strong>Configuration Changes:</strong> Review any recent changes in database or server configuration.</li>\n                <li><strong>Network Issues:</strong> Use tools like \"tnsping database_name\" to check network latency.</li>\n            </ul>\n        </li>\n        <li><strong>Additional Diagnostics:</strong>\n            <ul>\n                <li><strong>Trace Files:</strong> Enable SQL trace for detailed execution traces and analyze them using TKPROF.\n                <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">ALTER SESSION SET sql_trace = TRUE</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Run the query</span>\n<span class=\"SQLKeyword\">ALTER SESSION SET sql_trace = FALSE</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n                </li>\n                <li><strong>SQL Tuning Advisor:</strong> Use Oracle's SQL Tuning Advisor for query performance recommendations.\n                <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">EXEC</span> DBMS_SQLTUNE.create_tuning_task<span class=\"SQLKeyword\">(</span>sql_id <span class=\"SQLOperator\">=></span> <span class=\"SQLString\">'<SQL_ID>'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n                </li>\n            </ul>\n        </li>\n        <li><strong>Monitor and Analyze Database Jobs:</strong>\n            <ul>\n                <li><strong>Identify Running Jobs:</strong> Check for database jobs or scheduled tasks that might be running concurrently with the query.\n                <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> job_name,\n       session_id,\n       running_instance,\n       elapsed_time\n<span class=\"SQLKeyword\">FROM</span> dba_scheduler_running_jobs<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n                </li>\n            </ul>\n        </li>\n    </ul>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 133,
    "Question": "What is an efficient method for updating a column in a table containing 100 million records?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .table-container {\n            overflow-x: auto;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            max-width: 800px;\n            margin: 20px 0;\n            border: 1px solid #ddd;\n            font-size: 16px;\n        }\n        th, td {\n            text-align: left;\n            padding: 8px;\n            border: 1px solid #ddd;\n        }\n        th {\n            background-color: #F0F0F0;\n        }\n        tr:nth-child(even) {\n            background-color: #FFFFFF;\n        }\n        tr:nth-child(odd) {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            table, th, td {\n                font-size: 12px;\n            }\n            th, td {\n                padding: 6px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">1. Batch Processing</h4>\n    <p>Updating the table in smaller batches helps manage the database load and reduces potential locking and logging issues.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DECLARE</span>\n  v_batch_size <span class=\"SQLKeyword\">NUMBER :=</span> 10000<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">BEGIN</span>\n  <span class=\"SQLKeyword\">LOOP</span>\n    <span class=\"SQLKeyword\">UPDATE</span> table_name\n    <span class=\"SQLKeyword\">SET</span>    column_name = new_value\n    <span class=\"SQLKeyword\">WHERE</span>  condition\n    <span class=\"SQLKeyword\">AND</span>    ROWNUM <span class=\"SQLOperator\"><=</span> v_batch_size<span class=\"SQLOperator\">;</span>\n    <span class=\"SQLKeyword\">COMMIT</span><span class=\"SQLOperator\">;</span>\n    <span class=\"SQLKeyword\">EXIT</span>\n  <span class=\"SQLKeyword\">WHEN</span> SQL%ROWCOUNT < v_batch_size<span class=\"SQLOperator\">;</span>\n  <span class=\"SQLKeyword\">END LOOP</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">END</span><span class=\"SQLOperator\">;</span><span class=\"SQLOperator\">/</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">2. Parallel Update</h4>\n    <p>Using parallel DML speeds up the update process by utilizing multiple threads.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">ALTER SESSION ENABLE PARALLEL DML</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">UPDATE</span> <span class=\"SQLComment\">/*+ PARALLEL(table_name, 8) */</span> table_name\n<span class=\"SQLKeyword\">SET</span>    old_column = new_value\n<span class=\"SQLKeyword\">WHERE</span>  condition<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">COMMIT</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">3. CTAS (Create Table As Select) Approach</h4>\n    <p>Create a new table with updated values and switch the tables, minimizing the impact on the existing table.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> table_name_new <span class=\"SQLKeyword\">AS</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLComment\">/*+ PARALLEL(8) */</span>\n    t.*,\n    <span class=\"SQLKeyword\">CASE</span>\n        <span class=\"SQLKeyword\">WHEN</span> condition <span class=\"SQLKeyword\">THEN</span> new_value\n        <span class=\"SQLKeyword\">ELSE</span> old_column\n    <span class=\"SQLKeyword\">END</span> <span class=\"SQLKeyword\">AS</span> new_column\n<span class=\"SQLKeyword\">FROM</span> table_name t<span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Rename the tables</span>\n<span class=\"SQLKeyword\">ALTER TABLE</span> table_name <span class=\"SQLKeyword\">RENAME TO</span> table_name_old<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">ALTER TABLE</span> table_name_new <span class=\"SQLKeyword\">RENAME TO</span> table_name<span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Optional: Drop the old table\n</span>\n<span class=\"SQLComment\">-- DROP TABLE table_name_old;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">4. Direct Path Update Using Merge</h4>\n    <p>The \"MERGE\" statement can be optimized for large datasets.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">MERGE</span>\n             <span class=\"SQLComment\">/*+ PARALLEL(8) */</span>\n<span class=\"SQLKeyword\">INTO</span>         table_name t\n<span class=\"SQLKeyword\">USING</span>        <span class=\"SQLKeyword\">(</span>\n                    <span class=\"SQLKeyword\">SELECT</span> primary_key,\n                           new_value\n                    <span class=\"SQLKeyword\">FROM</span>   table_name\n                    <span class=\"SQLKeyword\">WHERE</span>  condition<span class=\"SQLKeyword\">)</span> src\n<span class=\"SQLKeyword\">ON</span> <span class=\"SQLKeyword\">(</span>\n                          t.primary_key = src.primary_key<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">WHEN MATCHED THEN</span>\n<span class=\"SQLKeyword\">UPDATE</span>\n<span class=\"SQLKeyword\">SET</span>    t.old_column = src.new_value<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">5. Index Management</h4>\n    <p>Disabling indexes before performing large updates can significantly improve performance by reducing overhead. However, indexes must be rebuilt afterward.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Step 1: Disable non-essential indexes</span>\n<span class=\"SQLKeyword\">ALTER INDEX</span> idx_table_name_col1 <span class=\"SQLKeyword\">UNUSABLE</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Step 2: Perform the update with parallel DML</span>\n<span class=\"SQLKeyword\">ALTER SESSION ENABLE PARALLEL DML</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">UPDATE</span> <span class=\"SQLComment\">/*+ PARALLEL(table_name, 8) */</span> table_name\n<span class=\"SQLKeyword\">SET</span> column_name = new_value\n<span class=\"SQLKeyword\">WHERE</span> condition<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">COMMIT</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Step 3: Rebuild the indexes</span>\n<span class=\"SQLKeyword\">ALTER INDEX</span> idx_table_name_col1 <span class=\"SQLKeyword\">REBUILD</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">6. Disable Triggers and Constraints</h4>\n    <p>Temporarily disable triggers and constraints if they are not necessary during the update process. Re-enable them afterward.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">ALTER TABLE</span> table_name <span class=\"SQLKeyword\">DISABLE ALL TRIGGERS</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">UPDATE</span> table_name\n<span class=\"SQLKeyword\">SET</span> column_name = new_value\n<span class=\"SQLKeyword\">WHERE</span> condition<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">ALTER TABLE</span> table_name <span class=\"SQLKeyword\">ENABLE ALL TRIGGERS</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 134,
    "Question": "Can multiple rows containing identical NULL values be inserted into a uniquely constrained column in Oracle?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n            white-space: nowrap;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Oracle allows multiple NULL values in a column with a unique constraint because NULL is not considered equal to any other value, including another NULL.</p>\n    <h4 class=\"bold-blue\">Example with a Single Column Unique Constraint</h4>\n    <p>Consider a table <code>BANK_CUSTOMERS</code> where the <code>customer_email</code> column must have unique values but allows multiple NULLs.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Creating the bank_customers table</span>\n<span class=\"SQLKeyword\">CREATE TABLE</span> bank_customers\n  <span class=\"SQLKeyword\">(</span>\n     customer_id    NUMBER <span class=\"SQLKeyword\">PRIMARY KEY</span>,\n     customer_name  VARCHAR2<span class=\"SQLKeyword\">(</span>100<span class=\"SQLKeyword\">)</span>,\n     customer_email VARCHAR2<span class=\"SQLKeyword\">(</span>100<span class=\"SQLKeyword\">)</span>,\n     account_number VARCHAR2<span class=\"SQLKeyword\">(</span>20<span class=\"SQLKeyword\">)</span>,\n     <span class=\"SQLKeyword\">CONSTRAINT</span> uq_customer_email <span class=\"SQLKeyword\">UNIQUE</span> <span class=\"SQLKeyword\">(</span>customer_email<span class=\"SQLKeyword\">)</span>\n  <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n    </div>\n    <p>Insert multiple rows with <code>NULL</code> in the <code>customer_email</code> column:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">INSERT INTO</span> bank_customers\n            <span class=\"SQLKeyword\">(</span>customer_id,\n             customer_name,\n             customer_email,\n             account_number<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">VALUES</span>      <span class=\"SQLKeyword\">(</span>1,\n             <span class=\"SQLString\">'Lionel Messi'</span>,\n             <span class=\"SQLKeyword\">NULL</span>,\n             <span class=\"SQLString\">'ACC_123'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">INSERT INTO</span> bank_customers\n            <span class=\"SQLKeyword\">(</span>customer_id,\n             customer_name,\n             customer_email,\n             account_number<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">VALUES</span>      <span class=\"SQLKeyword\">(</span>2,\n             <span class=\"SQLString\">'Virat Kohli'</span>,\n             <span class=\"SQLKeyword\">NULL</span>,\n             <span class=\"SQLString\">'ACC_124'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">INSERT INTO</span> bank_customers\n            <span class=\"SQLKeyword\">(</span>customer_id,\n             customer_name,\n             customer_email,\n             account_number<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">VALUES</span>      <span class=\"SQLKeyword\">(</span>3,\n             <span class=\"SQLString\">'Roger Federer'</span>,\n             <span class=\"SQLString\">'roger.federer@aityl.com'</span>,\n             <span class=\"SQLString\">'ACC_125'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">COMMIT</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">SELECT</span> * <span class=\"SQLKeyword\">FROM</span> bank_customers<span class=\"SQLOperator\">;</span>\n</pre>\n    </div>\n    <h4 class=\"bold-blue\">Output:</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>CUSTOMER_ID</th>\n                    <th>CUSTOMER_NAME</th>\n                    <th>CUSTOMER_EMAIL</th>\n                    <th>ACCOUNT_NUMBER</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>1</td>\n                    <td>Lionel Messi</td>\n                    <td>NULL</td>\n                    <td>ACC_123</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>2</td>\n                    <td>Virat Kohli</td>\n                    <td>NULL</td>\n                    <td>ACC_124</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>3</td>\n                    <td>Roger Federer</td>\n                    <td>roger.federer@aityl.com</td>\n                    <td>ACC_125</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n    <h4 class=\"bold-blue\">Example with a Composite Column Unique Constraint</h4>\n    <p>Consider a table <code>bank_accounts</code> where a combination of <code>account_number</code> and <code>branch_code</code> needs to be unique.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> bank_accounts\n<span class=\"SQLKeyword\">(</span>\n    account_id NUMBER <span class=\"SQLKeyword\">PRIMARY KEY</span>,\n    account_number VARCHAR2<span class=\"SQLKeyword\">(</span>20<span class=\"SQLKeyword\">)</span>,\n    branch_code VARCHAR2<span class=\"SQLKeyword\">(</span>10<span class=\"SQLKeyword\">)</span>,\n    account_balance NUMBER,\n    <span class=\"SQLKeyword\">CONSTRAINT</span> uq_account_branch <span class=\"SQLKeyword\">UNIQUE (account_number, branch_code)</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n    </div>\n    <p>Insert multiple rows with <code>NULL</code> values:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">INSERT INTO</span> bank_accounts\n            <span class=\"SQLKeyword\">(</span>account_id,\n             account_number,\n             branch_code,\n             account_balance<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">VALUES</span>      <span class=\"SQLKeyword\">(</span>1,\n             <span class=\"SQLKeyword\">NULL</span>,\n             <span class=\"SQLString\">'BR001'</span>,\n             5000<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">INSERT INTO</span> bank_accounts\n            <span class=\"SQLKeyword\">(</span>account_id,\n             account_number,\n             branch_code,\n             account_balance<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">VALUES</span>      <span class=\"SQLKeyword\">(</span>2,\n             <span class=\"SQLString\">'ACC002'</span>,\n             <span class=\"SQLKeyword\">NULL</span>,\n             10000<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">INSERT INTO</span> bank_accounts\n            <span class=\"SQLKeyword\">(</span>account_id,\n             account_number,\n             branch_code,\n             account_balance<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">VALUES</span>      <span class=\"SQLKeyword\">(</span>3,\n             <span class=\"SQLKeyword\">NULL</span>,\n             <span class=\"SQLKeyword\">NULL</span>,\n             2000<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">INSERT INTO</span> bank_accounts\n            <span class=\"SQLKeyword\">(</span>account_id,\n             account_number,\n             branch_code,\n             account_balance<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">VALUES</span>      <span class=\"SQLKeyword\">(</span>4,\n             <span class=\"SQLKeyword\">NULL</span>,\n             <span class=\"SQLKeyword\">NULL</span>,\n             4000<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">INSERT INTO</span> bank_accounts\n            <span class=\"SQLKeyword\">(</span>account_id,\n             account_number,\n             branch_code,\n             account_balance<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">VALUES</span>      <span class=\"SQLKeyword\">(</span>5,\n             <span class=\"SQLString\">'ACC004'</span>,\n             <span class=\"SQLString\">'BR002'</span>,\n             8500<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- The following statement is not allowed due to unique constraint violation with account_id 2</span>\n<span class=\"SQLKeyword\">INSERT INTO</span> bank_accounts\n            <span class=\"SQLKeyword\">(</span>account_id,\n             account_number,\n             branch_code,\n             account_balance<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">VALUES</span>      <span class=\"SQLKeyword\">(</span>6,\n             <span class=\"SQLString\">'ACC002'</span>,\n             <span class=\"SQLKeyword\">NULL</span>,\n             1000<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">COMMIT</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">SELECT</span> * <span class=\"SQLKeyword\">FROM</span> bank_accounts\n<span class=\"SQLKeyword\">ORDER BY</span> account_number, branch_code<span class=\"SQLOperator\">;</span>\n</pre>\n    </div>\n    <h4 class=\"bold-blue\">Output:</h4>\n    <div class=\"scrollable-container\">\n        <table class=\"tg\">\n            <thead>\n                <tr>\n                    <th>ACCOUNT_ID</th>\n                    <th>ACCOUNT_NUMBER</th>\n                    <th>BRANCH_CODE</th>\n                    <th>ACCOUNT_BALANCE</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr class=\"input-row-even\">\n                    <td>2</td>\n                    <td>ACC002</td>\n                    <td>NULL</td>\n                    <td>10000</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>5</td>\n                    <td>ACC004</td>\n                    <td>BR002</td>\n                    <td>8500</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>1</td>\n                    <td>NULL</td>\n                    <td>BR001</td>\n                    <td>5000</td>\n                </tr>\n                <tr class=\"input-row-odd\">\n                    <td>4</td>\n                    <td>NULL</td>\n                    <td>NULL</td>\n                    <td>4000</td>\n                </tr>\n                <tr class=\"input-row-even\">\n                    <td>3</td>\n                    <td>NULL</td>\n                    <td>NULL</td>\n                    <td>2000</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 135,
    "Question": "Can you delete rows from a parent table without impacting the rows in the child tables?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .table-container {\n            overflow-x: auto;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            max-width: 800px;\n            margin: 20px 0;\n            border: 1px solid #ddd;\n            font-size: 16px;\n        }\n        th, td {\n            text-align: left;\n            padding: 8px;\n            border: 1px solid #ddd;\n        }\n        th {\n            background-color: #F0F0F0;\n        }\n        tr:nth-child(even) {\n            background-color: #FFFFFF;\n        }\n        tr:nth-child(odd) {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            table, th, td {\n                font-size: 12px;\n            }\n            th, td {\n                padding: 6px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In Oracle, when dealing with referential integrity between parent and child tables, the behavior of the database upon deleting a row from the parent table is determined by the <code>ON DELETE</code> clause specified in the foreign key constraint of the child table.</p>\n    <h4 class=\"bold-blue\">Referential Integrity Clauses</h4>\n    <ul>\n        <li><strong>ON DELETE SET NULL:</strong>\n            <ul>\n                <li>When a row in the parent table is deleted, all matching foreign key values in the child table are set to <code>NULL</code>.</li>\n                <li>This effectively removes the association between the child rows and the deleted parent row without deleting the child rows themselves.</li>\n            </ul>\n        </li>\n        <li><strong>Default Behavior:</strong>\n            <ul>\n                <li>If no <code>ON DELETE</code> clause is specified, deleting a row from the parent table will be restricted if there are any matching rows in the child table.</li>\n                <li>If a row in the parent table has dependent rows in the child table, the deletion is not allowed and it raises an error: <code>ORA-02292: integrity constraint (schema_name.FK_constraint_name) violated - child record found</code></li>\n            </ul>\n        </li>\n        <li><strong>ON DELETE CASCADE:</strong>\n            <ul>\n                <li>When a row in the parent table is deleted, all matching rows in the child table are also deleted.</li>\n                <li>This enforces the complete removal of the parent-child relationship by deleting the child rows when the parent row is deleted.</li>\n            </ul>\n        </li>\n    </ul>\n    <h4 class=\"bold-blue\">Example of Creating Tables with Different ON DELETE Clauses</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Parent table</span>\n<span class=\"SQLKeyword\">CREATE TABLE</span> parent_table <span class=\"SQLKeyword\">(</span>\n   parent_id NUMBER <span class=\"SQLKeyword\">PRIMARY KEY</span>,\n   parent_data VARCHAR2<span class=\"SQLKeyword\">(</span>100<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Child table with ON DELETE SET NULL</span>\n<span class=\"SQLKeyword\">CREATE TABLE</span> child_table_set_null <span class=\"SQLKeyword\">(</span>\n   child_id NUMBER <span class=\"SQLKeyword\">PRIMARY KEY</span>,\n   parent_id NUMBER,\n   child_data VARCHAR2<span class=\"SQLKeyword\">(</span>100<span class=\"SQLKeyword\">)</span>,\n   <span class=\"SQLKeyword\">CONSTRAINT</span> fk_set_null <span class=\"SQLKeyword\">FOREIGN KEY (parent_id) </span>\n   <span class=\"SQLKeyword\">REFERENCES</span> parent_table<span class=\"SQLKeyword\">(</span>parent_id<span class=\"SQLKeyword\">) </span>\n   <span class=\"SQLKeyword\">ON DELETE SET NULL</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Child table (default behavior)</span>\n<span class=\"SQLKeyword\">CREATE TABLE</span> child_table_no_action <span class=\"SQLKeyword\">(</span>\n   child_id NUMBER <span class=\"SQLKeyword\">PRIMARY KEY</span>,\n   parent_id NUMBER,\n   child_data VARCHAR2<span class=\"SQLKeyword\">(</span>100<span class=\"SQLKeyword\">)</span>,\n   <span class=\"SQLKeyword\">CONSTRAINT</span> fk_no_action <span class=\"SQLKeyword\">FOREIGN KEY (parent_id) </span>\n   <span class=\"SQLKeyword\">REFERENCES</span> parent_table<span class=\"SQLKeyword\">(</span>parent_id<span class=\"SQLKeyword\">)</span>\n   <span class=\"SQLComment\">-- No Need to specify anything for default behavior</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Child table with ON DELETE CASCADE</span>\n<span class=\"SQLKeyword\">CREATE TABLE</span> child_table_cascade <span class=\"SQLKeyword\">(</span>\n   child_id NUMBER <span class=\"SQLKeyword\">PRIMARY KEY</span>,\n   parent_id NUMBER,\n   child_data VARCHAR2<span class=\"SQLKeyword\">(</span>100<span class=\"SQLKeyword\">)</span>,\n   <span class=\"SQLKeyword\">CONSTRAINT</span> fk_cascade <span class=\"SQLKeyword\">FOREIGN KEY (parent_id) </span>\n   <span class=\"SQLKeyword\">REFERENCES</span> parent_table<span class=\"SQLKeyword\">(</span>parent_id<span class=\"SQLKeyword\">) </span>\n   <span class=\"SQLKeyword\">ON DELETE CASCADE</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 136,
    "Question": "What are the key differences between 'User Views,' 'All Views,' and 'DBA Views' in the Oracle data dictionary?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .table-container {\n            overflow-x: auto;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            max-width: 800px;\n            margin: 20px 0;\n            border: 1px solid #ddd;\n            font-size: 16px;\n        }\n        th, td {\n            text-align: left;\n            padding: 8px;\n            border: 1px solid #ddd;\n        }\n        th {\n            background-color: #F0F0F0;\n        }\n        tr:nth-child(even) {\n            background-color: #FFFFFF;\n        }\n        tr:nth-child(odd) {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            table, th, td {\n                font-size: 12px;\n            }\n            th, td {\n                padding: 6px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In Oracle, the data dictionary views provide different levels of information about the database objects. Understanding the differences between \"User Views,\" \"All Views,\" and \"DBA Views\" is essential for managing and querying database objects effectively. These differences are primarily based on the scope and access privileges.</p>\n    <h4 class=\"bold-blue\">User Views (<code>USER_*</code>)</h4>\n    <ul>\n        <li><strong>Scope</strong>: These views provide information about the objects owned by the current user.</li>\n        <li><strong>Access</strong>: Only the current user can access these views, and they can only see objects that they own.</li>\n        <li><strong>Examples</strong>:\n            <ul>\n                <li><code>USER_TABLES</code>: Lists all the tables owned by the user.</li>\n                <li><code>USER_VIEWS</code>: Lists all the views owned by the user.</li>\n                <li><code>USER_INDEXES</code>: Lists all the indexes owned by the user.</li>\n            </ul>\n        </li>\n    </ul>\n    <h4 class=\"bold-blue\">All Views (<code>ALL_*</code>)</h4>\n    <ul>\n        <li><strong>Scope</strong>: These views provide information about all the objects to which the current user has access, regardless of ownership.</li>\n        <li><strong>Access</strong>: The current user can see objects that they own, as well as objects that they have been granted privileges on (from other users).</li>\n        <li><strong>Examples</strong>:\n            <ul>\n                <li><code>ALL_TABLES</code>: Lists all the tables accessible to the user.</li>\n                <li><code>ALL_VIEWS</code>: Lists all the views accessible to the user.</li>\n                <li><code>ALL_INDEXES</code>: Lists all the indexes accessible to the user.</li>\n            </ul>\n        </li>\n    </ul>\n    <h4 class=\"bold-blue\">DBA Views (<code>DBA_*</code>)</h4>\n    <ul>\n        <li><strong>Scope</strong>: These views provide comprehensive information about all the objects in the entire database.</li>\n        <li><strong>Access</strong>: Typically, only users with DBA privileges can access these views.</li>\n        <li><strong>Examples</strong>:\n            <ul>\n                <li><code>DBA_TABLES</code>: Lists all the tables in the database.</li>\n                <li><code>DBA_VIEWS</code>: Lists all the views in the database.</li>\n                <li><code>DBA_INDEXES</code>: Lists all the indexes in the database.</li>\n            </ul>\n        </li>\n    </ul>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 137,
    "Question": "What are pseudo columns in SQL, and how are they utilized?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .table-container {\n            overflow-x: auto;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            max-width: 800px;\n            margin: 20px 0;\n            border: 1px solid #ddd;\n            font-size: 16px;\n        }\n        th, td {\n            text-align: left;\n            padding: 8px;\n            border: 1px solid #ddd;\n        }\n        th {\n            background-color: #F0F0F0;\n        }\n        tr:nth-child(even) {\n            background-color: #FFFFFF;\n        }\n        tr:nth-child(odd) {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            table, th, td {\n                font-size: 12px;\n            }\n            th, td {\n                padding: 6px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In SQL, pseudo columns are special types of columns that are not actual columns in a table but are instead derived at runtime. They provide additional metadata or functionality for use in queries. In Oracle, some of the most commonly used pseudo columns include <code>SEQUENCE</code> pseudo columns, <code>ROWID</code>, and <code>ROWNUM</code>.</p>\n    <h4 class=\"bold-blue\">1. Sequence Pseudo Columns</h4>\n    <p>Sequence pseudo columns are used to generate unique values. They are part of sequence objects in Oracle. The two main sequence pseudo columns are <code>NEXTVAL</code> and <code>CURRVAL</code>.</p>\n    <ul>\n        <li><strong><code>NEXTVAL</code></strong>: Retrieves the next value in the sequence.</li>\n        <li><strong><code>CURRVAL</code></strong>: Retrieves the current value of the sequence.</li>\n    </ul>\n    <h4 class=\"bold-blue\">Example</h4>\n    <p>Adding a new product to a product table with a unique <code>product_id</code>.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Create a sequence for product IDs</span>\n<span class=\"SQLKeyword\">CREATE SEQUENCE</span> product_seq\n  <span class=\"SQLKeyword\">START WITH</span> 1\n  <span class=\"SQLKeyword\">INCREMENT BY</span> 1<span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Insert a new product using the sequence</span>\n<span class=\"SQLKeyword\">INSERT INTO</span> products\n            <span class=\"SQLKeyword\">(</span>product_id,\n             product_name,\n             price,\n             category_id<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">VALUES</span>      <span class=\"SQLKeyword\">(</span>product_seq.NEXTVAL,\n             <span class=\"SQLString\">'Analogue Watch'</span>,\n             19.99,\n             3<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Retrieve the current value of the sequence</span>\n<span class=\"SQLKeyword\">SELECT</span> product_seq.CURRVAL\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">2. ROWID</h4>\n    <p><code>ROWID</code> is a pseudo column that returns the unique address of a row in the database. It can be used to quickly access rows.</p>\n    <h4 class=\"bold-blue\">Example</h4>\n    <p>Fetching a product by its <code>ROWID</code> and updating its price.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Select a product by its ROWID</span>\n<span class=\"SQLKeyword\">SELECT</span> ROWID,\n       product_name,\n       price\n<span class=\"SQLKeyword\">FROM</span> products\n<span class=\"SQLKeyword\">WHERE</span> product_name = <span class=\"SQLString\">'Analogue Watch'</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Assume the ROWID is returned as 'AAAPrAAABAAABrAAB'</span>\n<span class=\"SQLComment\">-- Update the price using the ROWID</span>\n<span class=\"SQLKeyword\">UPDATE</span> products\n<span class=\"SQLKeyword\">SET</span>    price = 17.99\n<span class=\"SQLKeyword\">WHERE</span>  ROWID = <span class=\"SQLString\">'AAAPrAAABAAABrAAB'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">3. ROWNUM</h4>\n    <p><code>ROWNUM</code> is a pseudo column that assigns a unique number to each row returned by a query, starting from 1. It is often used for pagination and limiting results.</p>\n    <h4 class=\"bold-blue\">Example</h4>\n    <p>Fetching the first 5 products from the <code>products</code> table.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Select the first 5 products based on ROWNUM</span>\n<span class=\"SQLKeyword\">SELECT</span> ROWNUM,\n       product_name,\n       price\n<span class=\"SQLKeyword\">FROM</span> products\n<span class=\"SQLKeyword\">WHERE</span> ROWNUM <span class=\"SQLOperator\"><=</span> 5<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 138,
    "Question": "How does Oracle differentiate between a schema and a user?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .table-container {\n            overflow-x: auto;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            max-width: 800px;\n            margin: 20px 0;\n            border: 1px solid #ddd;\n            font-size: 16px;\n        }\n        th, td {\n            text-align: left;\n            padding: 8px;\n            border: 1px solid #ddd;\n        }\n        th {\n            background-color: #F0F0F0;\n        }\n        tr:nth-child(even) {\n            background-color: #FFFFFF;\n        }\n        tr:nth-child(odd) {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            table, th, td {\n                font-size: 12px;\n            }\n            th, td {\n                padding: 6px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In Oracle, users and schemas are essentially synonymous. A user refers to the account used to connect to the database, while a schema represents the collection of objects (tables, views, indexes etc.) that belong to that account.</p>\n    <h4 class=\"bold-blue\">User</h4>\n    <ul>\n        <li>A <strong>user</strong> in Oracle is an account that allows access to the database. It is essentially an authentication entity.</li>\n        <li>Users have credentials (username and password) and permissions that determine what actions can be performed in the database.</li>\n        <li>Users can be assigned roles and privileges that define their access level and capabilities within the database.</li>\n    </ul>\n    <h4 class=\"bold-blue\">Schema</h4>\n    <ul>\n        <li>A <strong>schema</strong> is a collection of database objects that belong to a particular user. It is a way to logically group these objects for organizational purposes.</li>\n        <li>The schema includes objects like tables, views, indexes, procedures, and sequences that are created by the user.</li>\n        <li>Each user has a default schema with the same name as their username. For example, if the user is named <code>XYZ_BANK</code>, their default schema will also be named <code>XYZ_BANK</code>, and all objects created by this user will be part of this schema.</li>\n    </ul>\n    <h4 class=\"bold-blue\">Key Points of Differentiation:</h4>\n    <ul>\n        <li><strong>Ownership</strong>: A user owns a schema, and the schema is essentially a namespace for the user's database objects. The user who creates a schema is the owner of that schema.</li>\n        <li><strong>Naming</strong>: By default, the schema name is the same as the username. However, while the schema name and user name are typically identical, they represent different concepts: one is for access and authentication (user), while the other is for object organization (schema).</li>\n        <li><strong>Access Control</strong>: Users can be granted or denied privileges on schemas. For example, a user might have <code>SELECT</code> privileges on tables in another user's schema.</li>\n        <li><strong>Functionality</strong>: When referring to a schema, the discussion typically revolves around the structure and organization of objects within it. When referring to a user, the discussion focuses on the access rights and credentials of an individual or application connecting to the database.</li>\n    </ul>\n    <p>In summary, while every user has a schema that bears their name and contains their objects, the user is concerned with access and permissions, while the schema is concerned with organizing and managing the user's database objects.</p>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 139,
    "Question": "What are the various methods to connect to a database?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .table-container {\n            overflow-x: auto;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            max-width: 800px;\n            margin: 20px 0;\n            border: 1px solid #ddd;\n            font-size: 16px;\n        }\n        th, td {\n            text-align: left;\n            padding: 8px;\n            border: 1px solid #ddd;\n        }\n        th {\n            background-color: #F0F0F0;\n        }\n        tr:nth-child(even) {\n            background-color: #FFFFFF;\n        }\n        tr:nth-child(odd) {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            table, th, td {\n                font-size: 12px;\n            }\n            th, td {\n                padding: 6px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>There are several methods to connect to an Oracle database, each suited to different use cases and environments. Here are some methods:</p>\n    <h4 class=\"bold-blue\">1. SQL*Plus</h4>\n    <ul>\n        <li><strong>Description</strong>: A command-line tool provided by Oracle for executing SQL and PL/SQL commands.</li>\n        <li><strong>Usage</strong>: Commonly used for database administration and scripting.</li>\n    </ul>\n    <h4 class=\"bold-blue\">2. Oracle SQL Developer</h4>\n    <ul>\n        <li><strong>Description</strong>: A graphical integrated development environment (IDE) for database development.</li>\n        <li><strong>Usage</strong>: Ideal for developers and administrators to interact with the database through a user-friendly interface.</li>\n    </ul>\n    <h4 class=\"bold-blue\">3. JDBC (Java Database Connectivity)</h4>\n    <ul>\n        <li><strong>Description</strong>: A Java-based API to connect and execute queries on the Oracle database.</li>\n        <li><strong>Usage</strong>: Widely used in Java applications.</li>\n    </ul>\n    <h4 class=\"bold-blue\">4. ODBC (Open Database Connectivity)</h4>\n    <ul>\n        <li><strong>Description</strong>: A standard API for accessing database management systems (DBMS).</li>\n        <li><strong>Usage</strong>: Used in applications written in languages like C++ and tools like Microsoft Excel.</li>\n    </ul>\n    <h4 class=\"bold-blue\">5. OCI (Oracle Call Interface)</h4>\n    <ul>\n        <li><strong>Description</strong>: A C language interface that allows applications to interact with the Oracle database.</li>\n        <li><strong>Usage</strong>: Suitable for high-performance applications requiring fine-grained control over database operations.</li>\n    </ul>\n    <h4 class=\"bold-blue\">6. Database Links</h4>\n    <ul>\n        <li><strong>Description</strong>: A method to access data in a remote Oracle database.</li>\n        <li><strong>Usage</strong>: Enables querying and manipulation of remote data as if it were local.</li>\n    </ul>\n    <h4 class=\"bold-blue\">7. RESTful Web Services</h4>\n    <ul>\n        <li><strong>Description</strong>: Accessing Oracle database services using RESTful APIs.</li>\n        <li><strong>Usage</strong>: Useful for web and mobile applications needing database access.</li>\n    </ul>\n    <h4 class=\"bold-blue\">8. Oracle SQLcl</h4>\n    <ul>\n        <li><strong>Description</strong>: A command-line interface for Oracle Database.</li>\n        <li><strong>Usage</strong>: Provides a modern and enhanced SQL*Plus experience with additional features.</li>\n    </ul>\n    <h4 class=\"bold-blue\">9. Toad for Oracle</h4>\n    <ul>\n        <li><strong>Description</strong>: A comprehensive database management toolset for Oracle.</li>\n        <li><strong>Usage</strong>: Used for development, administration, and performance tuning.</li>\n    </ul>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 140,
    "Question": "What is the difference between a database and an instance in Oracle?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .table-container {\n            overflow-x: auto;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            max-width: 800px;\n            margin: 20px 0;\n            border: 1px solid #ddd;\n            font-size: 16px;\n        }\n        th, td {\n            text-align: left;\n            padding: 8px;\n            border: 1px solid #ddd;\n        }\n        th {\n            background-color: #F0F0F0;\n        }\n        tr:nth-child(even) {\n            background-color: #FFFFFF;\n        }\n        tr:nth-child(odd) {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            table, th, td {\n                font-size: 12px;\n            }\n            th, td {\n                padding: 6px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In Oracle, the terms \"database\" and \"instance\" refer to two distinct components that work together to store and manage data. Here's a detailed explanation of their differences:</p>\n    <h4 class=\"bold-blue\">Oracle Database</h4>\n    <ul>\n        <li><strong>Definition</strong>: A database is a collection of physical files on disk.</li>\n        <li><strong>Components</strong>:\n            <ul>\n                <li><strong>Data Files</strong>: Store the actual data.</li>\n                <li><strong>Control Files</strong>: Contain metadata about the database structure.</li>\n                <li><strong>Redo Log Files</strong>: Record changes made to the data for recovery purposes.</li>\n            </ul>\n        </li>\n        <li><strong>Persistence</strong>: The data remains stored on disk even if the Oracle software is not running.</li>\n        <li><strong>Function</strong>: The primary role is to store and manage the actual data.</li>\n    </ul>\n    <h4 class=\"bold-blue\">Oracle Instance</h4>\n    <ul>\n        <li><strong>Definition</strong>: An instance is a set of memory structures and background processes that manage the database files.</li>\n        <li><strong>Components</strong>:\n            <ul>\n                <li><strong>System Global Area (SGA)</strong>: A shared memory region containing data and control information.</li>\n                <li><strong>Program Global Area (PGA)</strong>: Memory regions containing data and control information for server processes.</li>\n                <li><strong>Background Processes</strong>: Include processes like DBWn (Database Writer), LGWR (Log Writer), SMON (System Monitor), and PMON (Process Monitor).</li>\n            </ul>\n        </li>\n        <li><strong>Volatility</strong>: The instance exists only while the Oracle software is running; it is created when the instance is started and destroyed when the instance is shut down.</li>\n        <li><strong>Function</strong>: Manages database operations, handles user connections, and ensures data consistency and recovery.</li>\n    </ul>\n    <h4 class=\"bold-blue\">Key Differences</h4>\n    <ul>\n        <li><strong>Nature</strong>:\n            <ul>\n                <li><strong>Database</strong>: Physical, persistent storage on disk.</li>\n                <li><strong>Instance</strong>: In-memory structures and processes; dynamic and volatile.</li>\n            </ul>\n        </li>\n        <li><strong>Existence</strong>:\n            <ul>\n                <li><strong>Database</strong>: Exists independently on disk.</li>\n                <li><strong>Instance</strong>: Exists only when Oracle software is running.</li>\n            </ul>\n        </li>\n        <li><strong>Role</strong>:\n            <ul>\n                <li><strong>Database</strong>: Stores data.</li>\n                <li><strong>Instance</strong>: Manages and interacts with the database.</li>\n            </ul>\n        </li>\n    </ul>\n    <h4 class=\"bold-blue\">Interaction</h4>\n    <ul>\n        <li>The database is accessed and managed by the instance.</li>\n        <li>The instance provides the environment and tools needed to manipulate the data stored in the database.</li>\n    </ul>\n    <p>In summary, while a database is the physical storage of data, an instance is the in-memory set of structures and processes that Oracle uses to interact with and manage that data.</p>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 141,
    "Question": "What is a DB link in Oracle, and how is it used?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .table-container {\n            overflow-x: auto;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            max-width: 800px;\n            margin: 20px 0;\n            border: 1px solid #ddd;\n            font-size: 16px;\n        }\n        th, td {\n            text-align: left;\n            padding: 8px;\n            border: 1px solid #ddd;\n        }\n        th {\n            background-color: #F0F0F0;\n        }\n        tr:nth-child(even) {\n            background-color: #FFFFFF;\n        }\n        tr:nth-child(odd) {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            table, th, td {\n                font-size: 12px;\n            }\n            th, td {\n                padding: 6px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>A DB link (Database Link) in Oracle is a schema object in one database that enables access to objects in another database. The DB link essentially provides a path for communication between two Oracle databases, allowing SQL operations to be executed on a remote database as if it were local.</p>\n    <h4 class=\"bold-blue\">How a DB Link is Used</h4>\n    <h4 class=\"bold-blue\">1. Creation</h4>\n    <ul>\n        <li>A DB link is created using the <code>CREATE DATABASE LINK</code> statement.</li>\n        <li>It specifies the remote database and the connection credentials (username and password).</li>\n        <li>Example:</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE DATABASE LINK</span> remote_db\n    <span class=\"SQLKeyword\">CONNECT TO</span> remote_user <span class=\"SQLKeyword\">IDENTIFIED BY</span> password\n<span class=\"SQLKeyword\">USING</span> <span class=\"SQLString\">'remote_db_tns_entry'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>In this example, <code>remote_db</code> is the name of the database link, <code>remote_user</code> and <code>password</code> are the credentials for the remote database, and <code>remote_db_tns_entry</code> is the TNS (Transparent Network Substrate) entry in the <code>tnsnames.ora</code> file.</p>\n    <h4 class=\"bold-blue\">2. Usage</h4>\n    <ul>\n        <li>Once the DB link is created, it can be used to query remote tables, views, and other objects.</li>\n        <li>SQL operations can include <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code>.</li>\n        <li>Example of querying a remote table:</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> * <span class=\"SQLKeyword\">FROM</span> employees@remote_db<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>Here, <code>employees</code> is a table in the remote database, and <code>@remote_db</code> specifies the DB link.</p>\n    <h4 class=\"bold-blue\">3. DML Operations</h4>\n    <ul>\n        <li>Data Manipulation Language (DML) operations can be performed on remote tables.</li>\n        <li>Example of inserting data:</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">INSERT INTO</span> employees@remote_db <span class=\"SQLKeyword\">(</span>\n    employee_id,\n    name,\n    department\n<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>\n    101,\n    <span class=\"SQLString\">'Steffi Graf'</span>,\n    <span class=\"SQLString\">'Sales'</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>\nExample of updating data:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">UPDATE</span> employees@remote_db\n<span class=\"SQLKeyword\">SET</span>\n    department = <span class=\"SQLString\">'Marketing'</span>\n<span class=\"SQLKeyword\">WHERE</span>\n    employee_id = 101<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">4. Joining Local and Remote Tables</h4>\n    <ul>\n        <li>DB links can be used to join tables from the local and remote databases.</li>\n        <li>Example:</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    l.name,\n    r.department\n<span class=\"SQLKeyword\">FROM</span>\n         local_employees l\n    <span class=\"SQLKeyword\">JOIN</span> employees@remote_db r <span class=\"SQLKeyword\">ON</span> l.employee_id = r.employee_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">5. Privileges</h4>\n    <ul>\n        <li>The user creating the DB link must have the <code>CREATE DATABASE LINK</code> privilege.</li>\n        <li>Appropriate privileges are required on the remote database objects being accessed.</li>\n    </ul>\n    <h4 class=\"bold-blue\">6. Types of DB Links</h4>\n    <ul>\n        <li><strong>Private DB Link</strong>: Created by a specific user/schema and only accessible by that user/schema.</li>\n        <li><strong>Public DB Link</strong>: Created using <code>CREATE PUBLIC DATABASE LINK</code> and accessible by all users/schemas in the database.</li>\n    </ul>\n    <h4 class=\"bold-blue\">7. Managing DB Links</h4>\n    <ul>\n        <li><strong>Viewing DB Links</strong>: Existing DB links can be viewed using the <code>DBA_DB_LINKS</code>, <code>ALL_DB_LINKS</code>, or <code>USER_DB_LINKS</code> data dictionary views.</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> * <span class=\"SQLKeyword\">FROM</span> user_db_links<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <ul>\n        <li><strong>Dropping a DB Link</strong>: The <code>DROP DATABASE LINK</code> statement is used.</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DROP DATABASE LINK</span> remote_db<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>By using DB links, data can be effectively integrated and managed across different Oracle databases, enabling seamless data retrieval and manipulation as if all the data were in a single database.</p>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 142,
    "Question": "Why is it important to use ROLLBACK or COMMIT when working with DB links, even for SELECT statements?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .table-container {\n            overflow-x: auto;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            max-width: 800px;\n            margin: 20px 0;\n            border: 1px solid #ddd;\n            font-size: 16px;\n        }\n        th, td {\n            text-align: left;\n            padding: 8px;\n            border: 1px solid #ddd;\n        }\n        th {\n            background-color: #F0F0F0;\n        }\n        tr:nth-child(even) {\n            background-color: #FFFFFF;\n        }\n        tr:nth-child(odd) {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            table, th, td {\n                font-size: 12px;\n            }\n            th, td {\n                padding: 6px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In Oracle, using <code>COMMIT</code> or <code>ROLLBACK</code> is important when working with DB links, even for <code>SELECT</code> statements, due to the following reasons:</p>\n    <h4 class=\"bold-blue\">1. Transaction Consistency</h4>\n    <ul>\n        <li><strong>Remote Transactions</strong>: When executing <code>SELECT</code> statements over a DB link, Oracle might initiate a transaction on the remote database. If this transaction is not properly terminated with a <code>COMMIT</code> or <code>ROLLBACK</code>, it can leave the remote database in an inconsistent state.</li>\n        <li><strong>Two-Phase Commit (2PC)</strong>: Oracle uses a two-phase commit protocol to ensure data integrity across distributed transactions. Explicitly committing or rolling back ensures that both local and remote transactions are synchronized and committed correctly.</li>\n    </ul>\n    <h4 class=\"bold-blue\">2. Resource Management</h4>\n    <ul>\n        <li><strong>Locks and Resources</strong>: Uncommitted transactions can hold locks and consume resources on the remote database. This can lead to contention, reduced performance, and even deadlocks. By using <code>COMMIT</code> or <code>ROLLBACK</code>, these resources are released promptly.</li>\n        <li><strong>Temporary Segments</strong>: Some <code>SELECT</code> operations might involve sorting or other activities that use temporary segments. Committing or rolling back ensures that these segments are released and do not cause unnecessary resource usage.</li>\n    </ul>\n    <h4 class=\"bold-blue\">3. Performance and Scalability</h4>\n    <ul>\n        <li><strong>Open Transactions</strong>: Leaving transactions open on the remote database can degrade performance over time. It can also affect scalability as resources on the remote database become tied up, potentially impacting other users and operations.</li>\n        <li><strong>Network Efficiency</strong>: Ensuring that transactions are explicitly committed or rolled back can reduce the overhead and potential issues with network communication between the databases.</li>\n    </ul>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 143,
    "Question": "If you insert a row and then alter another table without committing, will the insert be saved if the session is forcefully closed or killed?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .table-container {\n            overflow-x: auto;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            max-width: 800px;\n            margin: 20px 0;\n            border: 1px solid #ddd;\n            font-size: 16px;\n        }\n        th, td {\n            text-align: left;\n            padding: 8px;\n            border: 1px solid #ddd;\n        }\n        th {\n            background-color: #F0F0F0;\n        }\n        tr:nth-child(even) {\n            background-color: #FFFFFF;\n        }\n        tr:nth-child(odd) {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            table, th, td {\n                font-size: 12px;\n            }\n            th, td {\n                padding: 6px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In Oracle Database, DDL (Data Definition Language) commands such as <code>ALTER</code>, <code>CREATE</code>, <code>DROP</code>, etc., perform implicit commits. This behavior has important implications for transactions involving both DDL and DML (Data Manipulation Language) commands.</p>\n    <h4 class=\"bold-blue\">Example Scenario</h4>\n    <p>Consider the following sequence of operations within a single session:</p>\n    <h4 class=\"bold-blue\">1. Insert a row into a table</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">INSERT INTO</span> table1 <span class=\"SQLKeyword\">(</span>column1<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'value1'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">2. Alter another table within the same session</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">ALTER TABLE</span> table2 <span class=\"SQLKeyword\">ADD</span> <span class=\"SQLKeyword\">(</span>column2 VARCHAR2(50)<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>In this scenario, the <code>ALTER TABLE</code> command will issue an implicit commit. This implicit commit will commit all preceding DML operations. As a result, the <code>INSERT</code> operation will be committed when the <code>ALTER TABLE</code> command is executed.</p>\n    <h4 class=\"bold-blue\">Transaction Outcome</h4>\n    <p>If the session is forcefully closed after these commands but before an explicit <code>COMMIT</code> is issued, the following will occur:</p>\n    <ul>\n        <li>The <code>INSERT</code> operation into <code>table1</code> will be committed because the <code>ALTER TABLE</code> command performs an implicit commit.</li>\n        <li>The <code>ALTER TABLE</code> operation will also be committed.</li>\n    </ul>\n    <p>Therefore, even if the session is forcefully closed after executing these commands, the changes made by the <code>INSERT</code> operation will be saved because of the implicit commit triggered by the <code>ALTER TABLE</code> command.</p>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 144,
    "Question": "What is SQL Loader, and how is it used? Provide an example.",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .table-container {\n            overflow-x: auto;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            max-width: 800px;\n            margin: 20px 0;\n            border: 1px solid #ddd;\n            font-size: 16px;\n        }\n        th, td {\n            text-align: left;\n            padding: 8px;\n            border: 1px solid #ddd;\n        }\n        th {\n            background-color: #F0F0F0;\n        }\n        tr:nth-child(even) {\n            background-color: #FFFFFF;\n        }\n        tr:nth-child(odd) {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            table, th, td {\n                font-size: 12px;\n            }\n            th, td {\n                padding: 6px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>SQL*Loader is a utility provided by Oracle to load data from external files into tables in an Oracle database. It is commonly used for bulk loading of data from files into Oracle tables, which can be especially useful for large volumes of data that need to be imported quickly.</p>\n    <h4 class=\"bold-blue\">Key Features of SQL*Loader</h4>\n    <ul>\n        <li><strong>Data Loading</strong>: Loads data from flat files (CSV, text files) into Oracle tables.</li>\n        <li><strong>Control File</strong>: Uses a control file to define the format of the data files and the mapping between file fields and Oracle table columns.</li>\n        <li><strong>Direct Path Load</strong>: Allows bypassing the SQL processing layer for faster data loads.</li>\n        <li><strong>Conventional Path Load</strong>: Uses the SQL INSERT statement to load data.</li>\n        <li><strong>Data Transformation</strong>: Allows transformation of data during the load process.</li>\n        <li><strong>Error Handling</strong>: Can log errors and bad records for later review and correction.</li>\n    </ul>\n    <h4 class=\"bold-blue\">Basic Components of SQL*Loader</h4>\n    <ul>\n        <li><strong>Data File</strong>: The file that contains the data to be loaded (e.g., <code>data.csv</code>).</li>\n        <li><strong>Control File</strong>: A file that specifies how the data file should be loaded (e.g., <code>load.ctl</code>).</li>\n        <li><strong>Log File</strong>: A file that logs the loading process details (e.g., <code>load.log</code>).</li>\n        <li><strong>Bad File</strong>: A file that records any records that cause errors (e.g., <code>load.bad</code>).</li>\n        <li><strong>Discard File</strong>: A file that records any records that are discarded (e.g., <code>load.dsc</code>).</li>\n    </ul>\n    <h4 class=\"bold-blue\">Example: Loading Customer Orders Data</h4>\n    <p>Consider a scenario where customer order data needs to be loaded from a CSV file into an orders table in an eCommerce database.</p>\n    <h4 class=\"bold-blue\">Step 1: Prepare the Data File</h4>\n    <p>Create a data file <code>orders.csv</code> with the following content:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- orders.csv content</span>\norder_id,customer_id,order_date,order_status,order_total\n1,101,2024-07-01,Shipped,150.00\n2,102,2024-07-02,Pending,200.00\n3,103,2024-07-03,Delivered,300.00\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Step 2: Create the Control File</h4>\n    <p>Create a control file <code>load_orders.ctl</code> with the following content:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- load_orders.ctl content</span>\nLOAD DATA\nINFILE 'orders.csv'\nINTO TABLE orders\nFIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\n(\n  order_id,\n  customer_id,\n  order_date DATE \"YYYY-MM-DD\",\n  order_status,\n  order_total DECIMAL EXTERNAL\n)\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Step 3: Create the Table in Oracle</h4>\n    <p>Ensure the <code>orders</code> table exists in the Oracle database with the appropriate schema:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> orders <span class=\"SQLKeyword\">(</span>\n  order_id NUMBER <span class=\"SQLKeyword\">PRIMARY KEY</span>,\n  customer_id NUMBER,\n  order_date DATE,\n  order_status VARCHAR2(50),\n  order_total NUMBER\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Step 4: Run SQL*Loader</h4>\n    <p>Run the SQL*Loader utility from the command line to load the data:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Command to run SQL*Loader</span>\nsqlldr username/password@database control=load_orders.ctl log=load_orders.log bad=load_orders.bad\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Summary:</h4>\n    <p>In this example, SQL*Loader reads the <code>orders.csv</code> file, interprets it according to the <code>load_orders.ctl</code> control file, and loads the data into the <code>orders</code> table in the Oracle database. Any errors during the load process are logged in <code>load_orders.log</code>, and bad records are saved in <code>load_orders.bad</code>.</p>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 145,
    "Question": "How can you convert fields to a string in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        h4.bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        h4.bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n        }\n        .table-container {\n            overflow-x: auto;\n        }\n        table {\n            border-collapse: collapse;\n            width: 100%;\n            max-width: 800px;\n            margin: 20px 0;\n            border: 1px solid #ddd;\n            font-size: 16px;\n        }\n        th, td {\n            text-align: left;\n            padding: 8px;\n            border: 1px solid #ddd;\n        }\n        th {\n            background-color: #F0F0F0;\n        }\n        tr:nth-child(even) {\n            background-color: #FFFFFF;\n        }\n        tr:nth-child(odd) {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            table, th, td {\n                font-size: 12px;\n            }\n            th, td {\n                padding: 6px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Use the <code>TO_CHAR</code> function to convert fields to a string.</p>\n    <h4 class=\"bold-blue\">Syntax:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example: Convert a number to a string</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">TO_CHAR</span><span class=\"SQLKeyword\">(</span>salary<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Example: Convert a number to a string</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">TO_CHAR</span><span class=\"SQLKeyword\">(</span>123<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Example: Convert a date to a string</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">TO_CHAR</span><span class=\"SQLKeyword\">(</span>sysdate<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 146,
    "Question": "How do you split comma-separated values in a field in Oracle?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Input Data - Table ORDERS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORDER_ID</th>\n                <th>ITEMS</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Sunglasses,Bluetooth Speaker,Phone Tripod</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Smart Watch,Kindle E-Reader</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORDER_ID</th>\n                <th>ITEM</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Sunglasses</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>1</td>\n                <td>Bluetooth Speaker</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Phone Tripod</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Smart Watch</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>2</td>\n                <td>Kindle E-Reader</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">Method 1: Using <code>REGEXP_SUBSTR</code> and <code>CONNECT BY</code></h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Using REGEXP_SUBSTR function in combination with CONNECT BY \n-- to split comma-separated values into individual rows.</span>\n<span class=\"SQLKeyword\">SELECT</span> order_id,\n   <span class=\"SQLFunction\">TRIM</span><span class=\"SQLKeyword\">(</span><span class=\"SQLFunction\">REGEXP_SUBSTR</span><span class=\"SQLKeyword\">(</span>items, <span class=\"SQLString\">'[^,]+'</span>, 1, LEVEL<span class=\"SQLKeyword\">)</span><span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> item\n<span class=\"SQLKeyword\">FROM</span>   orders\n<span class=\"SQLKeyword\">CONNECT BY</span> <span class=\"SQLFunction\">REGEXP_SUBSTR</span><span class=\"SQLKeyword\">(</span>items, <span class=\"SQLString\">'[^,]+'</span>, 1, LEVEL<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">IS NOT NULL</span>\n      <span class=\"SQLKeyword\">AND PRIOR</span> order_id = order_id\n               <span class=\"SQLKeyword\">AND PRIOR</span> <span class=\"SQLFunction\">DBMS_RANDOM.VALUE</span> <span class=\"SQLKeyword\">IS NOT NULL</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ol>\n        <li><strong>Extracts and Trims Substrings</strong>:\n            <ul>\n                <li><code>REGEXP_SUBSTR(items, '[^,]+', 1, LEVEL)</code>: Extracts comma-separated values from <code>items</code>.</li>\n                <li><code>TRIM</code>: Removes any leading or trailing spaces from extracted values.</li>\n            </ul>\n        </li>\n        <li><strong>Hierarchy</strong>:\n            <ul>\n                <li><code>CONNECT BY</code>: Uses hierarchical querying to split values.</li>\n                <li><code>REGEXP_SUBSTR(..., LEVEL) IS NOT NULL</code>: Continues extraction as long as values are found.</li>\n                <li><code>PRIOR order_id = order_id</code>: Keeps the hierarchy within the same <code>order_id</code>.</li>\n                <li><code>PRIOR DBMS_RANDOM.VALUE IS NOT NULL</code>: Ensures unique rows in the hierarchy.</li>\n            </ul>\n        </li>\n    </ol>\n    <h4 class=\"bold-blue\">Method 2: Using <code>INSTR</code> and <code>SUBSTR</code></h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Using INSTR and SUBSTR functions in a loop to split the values.</span>\n<span class=\"SQLKeyword\">SELECT</span> order_id,\n<span class=\"SQLFunction\">SUBSTR</span><span class=\"SQLKeyword\">(</span>items, <span class=\"SQLFunction\">INSTR</span><span class=\"SQLKeyword\">(</span>items, <span class=\"SQLString\">','</span>, 1, level<span class=\"SQLKeyword\">)</span> + 1,\n<span class=\"SQLFunction\">INSTR</span><span class=\"SQLKeyword\">(</span>items, <span class=\"SQLString\">','</span>, 1, level + 1<span class=\"SQLKeyword\">)</span> - <span class=\"SQLFunction\">INSTR</span><span class=\"SQLKeyword\">(</span>items, <span class=\"SQLString\">','</span>, 1, level<span class=\"SQLKeyword\">)</span> - 1<span class=\"SQLKeyword\">)</span> \n    <span class=\"SQLKeyword\">AS</span> item\n<span class=\"SQLKeyword\">FROM</span>   <span class=\"SQLKeyword\">(</span><span class=\"SQLKeyword\">SELECT</span> order_id,\n         <span class=\"SQLString\">','</span>\n         || items\n         || <span class=\"SQLString\">','</span> <span class=\"SQLKeyword\">AS</span> items\n   <span class=\"SQLKeyword\">FROM</span>   orders<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">CONNECT BY LEVEL <= LENGTH</span>\n<span class=\"SQLKeyword\">(</span>items<span class=\"SQLKeyword\">)</span> - <span class=\"SQLFunction\">LENGTH</span><span class=\"SQLKeyword\">(</span><span class=\"SQLFunction\">REPLACE</span><span class=\"SQLKeyword\">(</span>items, <span class=\"SQLString\">','</span>, <span class=\"SQLString\">''</span><span class=\"SQLKeyword\">)</span><span class=\"SQLKeyword\">)</span> - 1\n      <span class=\"SQLKeyword\">AND PRIOR</span> order_id = order_id\n               <span class=\"SQLKeyword\">AND PRIOR</span> <span class=\"SQLFunction\">DBMS_RANDOM.VALUE</span> <span class=\"SQLKeyword\">IS NOT NULL</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Components</h4>\n    <ol>\n        <li><strong>Inner Query</strong>:\n            <ul>\n                <li><code>SELECT order_id, ',' || items || ',' AS items FROM orders</code>: Prefixes and suffixes the <code>items</code> column with commas to handle edge cases (e.g., items at the beginning or end).</li>\n            </ul>\n        </li>\n        <li><strong><code>SUBSTR</code> Function</strong>:\n            <ul>\n                <li>Extracts a substring from the <code>items</code> string.</li>\n                <li><code>INSTR(items, ',', 1, level) + 1</code>: Finds the position of the comma at the current <code>level</code> and starts from the next character.</li>\n                <li><code>INSTR(items, ',', 1, level + 1) - INSTR(items, ',', 1, level) - 1</code>: Determines the length of the substring by finding the distance to the next comma.</li>\n            </ul>\n        </li>\n        <li><strong>Hierarchical Query</strong>:\n            <ul>\n                <li><code>CONNECT BY</code>: Establishes a hierarchy to iteratively extract each item.</li>\n                <li><code>LEVEL <= LENGTH(items) - LENGTH(REPLACE(items, ',', '')) - 1</code>: Determines the number of iterations based on the number of commas.</li>\n                <li><code>PRIOR order_id = order_id</code>: Maintains the hierarchy within the same <code>order_id</code>.</li>\n                <li><code>PRIOR DBMS_RANDOM.VALUE IS NOT NULL</code>: Ensures unique rows in the hierarchy, avoiding cycles.</li>\n            </ul>\n        </li>\n    </ol>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 147,
    "Question": "How can you insert and retrieve a single quote in a table in Oracle?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In Oracle, you can insert and retrieve a single quote in a table by using escape characters or by doubling the single quotes. Here's how you can do it:</p>\n    <h4 class=\"bold-maroon\">Example</h4>\n    <h4 class=\"bold-blue\">1. Create the Table:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> quotes <span class=\"SQLKeyword\">(</span>\n   id NUMBER <span class=\"SQLKeyword\">GENERATED BY DEFAULT AS IDENTITY</span>,\n   quote_text VARCHAR2(255)\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">2. Insert a Value with a Single Quote:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">INSERT INTO</span> quotes <span class=\"SQLKeyword\">(</span>quote_text<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'It''s a beautiful day'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Or using the Q-quote mechanism:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">INSERT INTO</span> quotes <span class=\"SQLKeyword\">(</span>quote_text<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>q<span class=\"SQLString\">'[It's another beautiful day]'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">3. Retrieve the Value:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    *\n<span class=\"SQLKeyword\">FROM</span>\n    quotes\n<span class=\"SQLKeyword\">WHERE</span>\n    quote_text <span class=\"SQLKeyword\">IN</span> <span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'It''s a beautiful day'</span>, \n                    <span class=\"SQLString\">'It''s another beautiful day'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ID</th>\n                <th>QUOTE_TEXT</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>It's a beautiful day</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>It's another beautiful day</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 148,
    "Question": "What do the commands \"Set Define off\" and \"Set Scan off\" do in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">SET DEFINE OFF:</h4>\n    <ul>\n        <li><strong>Purpose</strong>: Turns off the processing of substitution variables (marked by <code>&</code>) in SQL*Plus.</li>\n        <li><strong>Effect</strong>: Stops SQL*Plus from asking for input when it encounters an ampersand, treating it as a literal part of the text instead.</li>\n        <li><strong>Use Case</strong>: Handy for scripts that contain literal text with ampersands, like URLs or specific strings.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Example:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\">SET DEFINE OFF<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLString\">'Johnson &amp; Johnson'</span> <span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Obsolescence of SET SCAN:</h4>\n    <ul>\n        <li><strong>SET SCAN</strong>: Was previously used to turn off substitution variable processing, similar to <code>SET DEFINE OFF</code>, but it is now considered obsolete.</li>\n        <li><strong>Recommendation</strong>: Prefer using <code>SET DEFINE OFF</code>, as it is the current standard for managing substitution variable behavior in SQL*Plus.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 149,
    "Question": "Can rows be inserted into an Oracle table from Excel (.xls or .xlsx) files?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Rows from Excel files can be inserted into an Oracle table using either SQL Developer or SQL*Loader.</p>\n    <ol>\n        <li>Use the Data Import Wizard in SQL Developer.</li>\n        <li>Use the SQL*Loader utility, which requires converting Excel files to CSV format first.</li>\n    </ol>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 150,
    "Question": "Is it possible to insert rows into a table using views?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In Oracle, you can insert rows into a table using a view, but specific conditions must be satisfied for this to work.</p>\n    <ul>\n        <li><strong>Simple View:</strong> The view must be a simple view, meaning it should be based on a single table. It cannot include complex elements such as joins, group functions (e.g., <code>SUM</code>, <code>AVG</code>), <code>DISTINCT</code>, <code>GROUP BY</code>, <code>ORDER BY</code>, or set operators (e.g., <code>UNION</code>, <code>INTERSECT</code>).</li>\n        <li><strong>Columns:</strong> All columns in the underlying table that are required (i.e., those without a <code>DEFAULT</code> value and not nullable) must be included in the view. If these columns are not part of the view, Oracle will not allow an insert operation through the view.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Step-by-Step:</h4>\n    <h4 class=\"bold-blue\">1. Create an Updatable View:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE VIEW</span> product_view\n<span class=\"SQLKeyword\">AS</span>\n  <span class=\"SQLKeyword\">SELECT</span> product_id,\n         product_name,\n         price\n  <span class=\"SQLKeyword\">FROM</span>   products<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">2. Insert Data Using the View:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">INSERT INTO</span> product_view\n            <span class=\"SQLKeyword\">(</span>product_id,\n             product_name,\n             price<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>5,\n             <span class=\"SQLString\">'Smartphone'</span>,\n             699<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Example Data after Insertion:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> * <span class=\"SQLKeyword\">FROM</span> product_view<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PRODUCT_ID</th>\n                <th>PRODUCT_NAME</th>\n                <th>PRICE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Laptop</td>\n                <td>1000</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Headphones</td>\n                <td>100</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Coffee Maker</td>\n                <td>50</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>Blender</td>\n                <td>30</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Smartphone</td>\n                <td>699</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <p>Now, the newly inserted row with product_id = 5 is being fetched from the underlying products table.</p>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 151,
    "Question": "When should you consider creating an index on a table?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In Oracle, you can insert rows into a table using a view, but specific conditions must be satisfied for this to work.</p>\n    <ul>\n        <li><strong>Simple View:</strong> The view must be a simple view, meaning it should be based on a single table. It cannot include complex elements such as joins, group functions (e.g., <code>SUM</code>, <code>AVG</code>), <code>DISTINCT</code>, <code>GROUP BY</code>, <code>ORDER BY</code>, or set operators (e.g., <code>UNION</code>, <code>INTERSECT</code>).</li>\n        <li><strong>Columns:</strong> All columns in the underlying table that are required (i.e., those without a <code>DEFAULT</code> value and not nullable) must be included in the view. If these columns are not part of the view, Oracle will not allow an insert operation through the view.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Step-by-Step:</h4>\n    <h4 class=\"bold-blue\">1. Create an Updatable View:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE VIEW</span> product_view\n<span class=\"SQLKeyword\">AS</span>\n  <span class=\"SQLKeyword\">SELECT</span> product_id,\n         product_name,\n         price\n  <span class=\"SQLKeyword\">FROM</span>   products<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">2. Insert Data Using the View:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">INSERT INTO</span> product_view\n            <span class=\"SQLKeyword\">(</span>product_id,\n             product_name,\n             price<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>5,\n             <span class=\"SQLString\">'Smartphone'</span>,\n             699<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Example Data after Insertion:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> * <span class=\"SQLKeyword\">FROM</span> product_view<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PRODUCT_ID</th>\n                <th>PRODUCT_NAME</th>\n                <th>PRICE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Laptop</td>\n                <td>1000</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Headphones</td>\n                <td>100</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Coffee Maker</td>\n                <td>50</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>Blender</td>\n                <td>30</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Smartphone</td>\n                <td>699</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <p>Now, the newly inserted row with product_id = 5 is being fetched from the underlying products table.</p>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 152,
    "Question": "Can you create a table in Oracle that functions like a NoSQL document with key-value pairs?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In Oracle, the JSON datatype can be used to store key-value pairs.</p>\n    <h4 class=\"bold-maroon\">Syntax:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> documents <span class=\"SQLKeyword\">(</span>\n    id          <span class=\"SQLKeyword\">NUMBER</span> <span class=\"SQLKeyword\">PRIMARY KEY</span>,\n    doc_content <span class=\"SQLKeyword\">CLOB</span>\n        <span class=\"SQLKeyword\">CONSTRAINT</span> ensure_json <span class=\"SQLKeyword\">CHECK</span> <span class=\"SQLKeyword\">(</span> doc_content <span class=\"SQLKeyword\">IS</span> JSON <span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">INSERT INTO</span> documents <span class=\"SQLKeyword\">(</span>\n    id,\n    doc_content\n<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>\n    1,\n    <span class=\"SQLString\">'{\"name\": \"Tom Brady\", \"age\": 30, \"city\": \"New York\"}'</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 153,
    "Question": "Write a query to generate numbers from 1 to 100?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Syntax:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> LEVEL <span class=\"SQLKeyword\">AS</span> num\n<span class=\"SQLKeyword\">FROM</span> dual\n<span class=\"SQLKeyword\">CONNECT BY</span> LEVEL <= 100<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\">NUM\n1\n2\n3\n...\n100\n</pre>\n<h4 class=\"bold-maroon\">Explanation:</h4>\n<ul>\n    <li>\n        <strong>Generating a Sequence of Numbers:</strong>\n        <ul>\n            <li>The query uses the <code>LEVEL</code> pseudo-column to generate a sequence of numbers.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>Source Table:</strong>\n        <ul>\n            <li>The query selects from the <code>dual</code> table, which is a special single-row table in Oracle used for selecting a constant value or generating sequences.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>Hierarchical Query:</strong>\n        <ul>\n            <li>The <code>CONNECT BY</code> clause is used to create a hierarchical query that increments the <code>LEVEL</code> from 1 up to 100.</li>\n            <li>The condition <code>LEVEL <= 100</code> specifies that the sequence should stop when the level reaches 100.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>Result:</strong>\n        <ul>\n            <li>The query returns a list of numbers from 1 to 100, with each number labeled as <code>num</code>.</li>\n        </ul>\n    </li>\n</ul>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 154,
    "Question": "Write two different SQL queries that produce the same results.",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">Using JOIN:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> e.*\n<span class=\"SQLKeyword\">FROM</span>   employees e\n   <span class=\"SQLKeyword\">JOIN</span> departments d\n   <span class=\"SQLKeyword\">ON</span> e.department_id = d.department_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Using Subquery:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> *\n<span class=\"SQLKeyword\">FROM</span>   employees e\n<span class=\"SQLKeyword\">WHERE</span>  e.department_id <span class=\"SQLKeyword\">IN</span> <span class=\"SQLKeyword\">(</span><span class=\"SQLKeyword\">SELECT</span> d.department_id\n                     <span class=\"SQLKeyword\">FROM</span>   departments d<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>Both queries will return all columns from the <code>employees</code> table for employees who have a corresponding department in the <code>departments</code> table.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 155,
    "Question": "What is the difference between the DELETE, TRUNCATE, and DROP commands in SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">DELETE:</h4>\n    <ul>\n        <li><strong>Description</strong>: Removes specific rows from a table based on a condition specified in the WHERE clause. If no condition is provided, all rows are removed.</li>\n        <li><strong>Effect on Table</strong>: The table structure and all its attributes (columns, constraints, etc.) remain intact. Only the specified rows are deleted.</li>\n        <li><strong>Transaction Control</strong>: DELETE operations can be rolled back (i.e., they are transaction-safe).</li>\n        <li><strong>Usage Example</strong>:</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DELETE FROM</span> employees\n   <span class=\"SQLKeyword\">WHERE</span> employee_id = 101<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">DELETE FROM</span> employees<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">TRUNCATE:</h4>\n    <ul>\n        <li><strong>Description</strong>: Removes all rows from a table, effectively resetting it to empty.</li>\n        <li><strong>Effect on Table</strong>: The table structure, columns, and constraints remain intact, but all rows are removed.</li>\n        <li><strong>Transaction Control</strong>: TRUNCATE operations cannot be rolled back in Oracle databases, making it less flexible than DELETE but faster since it doesn't generate individual row delete logs.</li>\n        <li><strong>Usage Example</strong>:</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">TRUNCATE TABLE</\nspan> employees<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">DROP:</h4>\n    <ul>\n        <li><strong>Description</strong>: Completely removes the table and its structure from the database.</li>\n        <li><strong>Effect on Table</strong>: The table and all its data, structure, columns, and constraints are permanently deleted.</li>\n        <li><strong>Transaction Control</strong>: DROP operations cannot be rolled back.</li>\n        <li><strong>Usage Example</strong>:</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DROP TABLE</span> employees<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Summary of Effects:</h4>\n    <ul>\n        <li><strong>DELETE</strong>:\n            <ul>\n                <li>After execution: The table <code>employees</code> still exists with all its columns and constraints, but the specified rows matching the condition (or all rows if no condition is given) are deleted.</li>\n            </ul>\n        </li>\n        <li><strong>TRUNCATE</strong>:\n            <ul>\n                <li>After execution: The table <code>employees</code> still exists with all its columns and constraints, but it has no rows; it is empty.</li>\n            </ul>\n        </li>\n        <li><strong>DROP</strong>:\n            <ul>\n                <li>After execution: The table <code>employees</code> no longer exists in the database; both its data and structure are completely removed.</li>\n            </ul>\n        </li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 156,
    "Question": "Can rows be deleted using the MERGE command in Oracle?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>The <code>MERGE</code> command is used to insert, update, or merge data, and it can also delete rows. The <code>DELETE</code> clause within a <code>MERGE</code> statement can only be used alongside the <code>UPDATE</code> clause. It cannot be used independently within a <code>MERGE</code> statement.</p>\n    <h4 class=\"bold-blue\">Example:</h4>\n    <p>Two tables are given: <code>PRODUCTS</code> (target) and <code>PRODUCT_UPDATES</code> (source). The goal is to update the products if they exist in the <code>PRODUCT_UPDATES</code> table and delete those with low stock after updating.</p>\n    <h4 class=\"bold-maroon\">Input Data - Table <code>PRODUCTS</code></h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PRODUCT_ID</th>\n                <th>PRODUCT_NAME</th>\n                <th>PRICE</th>\n                <th>STOCK</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Smartphone</td>\n                <td>699</td>\n                <td>50</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Laptop</td>\n                <td>999</td>\n                <td>30</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Tablet</td>\n                <td>399</td>\n                <td>20</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Input Data - Table <code>PRODUCT_UPDATES</code></h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PRODUCT_ID</th>\n                <th>PRODUCT_NAME</th>\n                <th>PRICE</th>\n                <th>STOCK</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Smartphone</td>\n                <td>749</td>\n                <td>60</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>3</td>\n                <td>Tablet</td>\n                <td>429</td>\n                <td>25</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>4</td>\n                <td>Smartwatch</td>\n                <td>199</td>\n                <td>40</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Output Data - Table <code>PRODUCTS</code></h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PRODUCT_ID</th>\n                <th>PRODUCT_NAME</th>\n                <th>PRICE</th>\n                <th>STOCK</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Smartphone</td>\n                <td>749</td>\n                <td>60</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Laptop</td>\n                <td>999</td>\n                <td>30</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">MERGE Statement with UPDATE and DELETE Clause:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">MERGE INTO</span> PRODUCTS p\n<span class=\"SQLKeyword\">USING</span> PRODUCT_UPDATES u\n<span class=\"SQLKeyword\">ON</span> <span class=\"SQLKeyword\">(</span>p.PRODUCT_ID = u.PRODUCT_ID<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">WHEN MATCHED THEN</span>\n    <span class=\"SQLKeyword\">UPDATE SET</span> p.PRODUCT_NAME = u.PRODUCT_NAME,\n               p.PRICE = u.PRICE,\n               p.STOCK = u.STOCK\n    <span class=\"SQLKeyword\">DELETE WHERE</span> p.STOCK <= 25<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><strong>WHEN MATCHED THEN UPDATE:</strong> Updates existing rows in <code>PRODUCTS</code> with data from <code>PRODUCT_UPDATES</code>.</li>\n        <li><strong>DELETE WHERE p.STOCK <= 25:</strong> Deletes the rows from <code>PRODUCTS</code> where the stock is less than or equal to 25 after updating.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 157,
    "Question": "What is the difference between the MERGE and UPDATE commands?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">&bull; MERGE:</h4><p> Combines insert, update, and merge operations in a single statement. Used for upserting data.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">-- MERGE example</span>\n<span class=\"SQLKeyword\">MERGE INTO</span> employees e\n<span class=\"SQLKeyword\">USING</span> updates u\n<span class=\"SQLKeyword\">ON</span> <span class=\"SQLKeyword\">(</span>e.employee_id = u.employee_id<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">WHEN MATCHED THEN</span>\n  <span class=\"SQLKeyword\">UPDATE SET</span> e.salary = u.salary\n<span class=\"SQLKeyword\">WHEN NOT MATCHED THEN</span>\n  <span class=\"SQLKeyword\">INSERT</span> <span class=\"SQLKeyword\">(</span>employee_id,\n          salary<span class=\"SQLKeyword\">)</span>\n  <span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>u.employee_id,\n          u.salary<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">&bull; UPDATE:</h4><p> Modifies existing rows in a table based on a condition.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">-- UPDATE example</span>\n<span class=\"SQLKeyword\">UPDATE</span> employees\n<span class=\"SQLKeyword\">SET</span>    salary = 5000\n<span class=\"SQLKeyword\">WHERE</span>  employee_id = 1<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 158,
    "Question": "What is the difference between the EXISTS and IN operators?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-blue\">EXISTS Operator:</h4> <p>Checks for the existence of rows in a subquery and returns true if the subquery returns any rows. It stops processing as soon as it finds a matching row.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">-- EXISTS example</span>\n<span class=\"SQLKeyword\">SELECT</span> employee_name\n<span class=\"SQLKeyword\">FROM</span>   employees e\n<span class=\"SQLKeyword\">WHERE EXISTS</span> <span class=\"SQLKeyword\">(</span><span class=\"SQLKeyword\">SELECT</span> 1\n         <span class=\"SQLKeyword\">FROM</span>   departments d\n         <span class=\"SQLKeyword\">WHERE</span>  e.department_id = d.department_id\n                  <span class=\"SQLKeyword\">AND</span> d.department_name = <span class=\"SQLString\">'Sales'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">IN Operator:</h4><p> Compares a value to a list of values returned by a subquery or specified values. It retrieves all rows in the subquery before performing the comparison.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">-- IN example</span>\n<span class=\"SQLKeyword\">SELECT</span> employee_name\n<span class=\"SQLKeyword\">FROM</span>   employees\n<span class=\"SQLKeyword\">WHERE</span>  department_id <span class=\"SQLKeyword\">IN</span> <span class=\"SQLKeyword\">(</span><span class=\"SQLKeyword\">SELECT</span> department_id\n                     <span class=\"SQLKeyword\">FROM</span>   departments\n                     <span class=\"SQLKeyword\">WHERE</span>  department_name = <span class=\"SQLString\">'Sales'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 159,
    "Question": "How would you design tables, columns, indexes, and views for a specific industry, like banking?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Designing a database for the banking industry in Oracle involves creating various types of tables and other database objects to manage different aspects of banking operations. Here is a detailed design, including reference tables, transactional tables, metadata tables, indexes, and views:</p>\n    <h4 class=\"bold-blue\">1. Reference Tables</h4>\n    <p>Reference tables store static data that is used across multiple tables.</p>\n    <h4 class=\"bold-maroon\">Table: <code>CUSTOMER_TYPE</code></h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_TYPE_ID</th>\n                <th>TYPE_NAME</th>\n                <th>DESCRIPTION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Individual</td>\n                <td>Individual customers</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Business</td>\n                <td>Business customers</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Table: <code>ACCOUNT_TYPE</code></h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ACCOUNT_TYPE_ID</th>\n                <th>TYPE_NAME</th>\n                <th>DESCRIPTION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Savings</td>\n                <td>Savings Account</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Checking</td>\n                <td>Checking Account</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Business</td>\n                <td>Business Account</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Table: <code>TRANSACTION_TYPE</code></h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>TRANSACTION_TYPE_ID</th>\n                <th>TYPE_NAME</th>\n                <th>DESCRIPTION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Deposit</td>\n                <td>Deposit Transaction</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Withdrawal</td>\n                <td>Withdrawal Transaction</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Transfer</td>\n                <td>Transfer Transaction</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">2. Master/Application/Transactional Tables</h4>\n    <h4 class=\"bold-maroon\">Table: <code>CUSTOMERS</code></h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_ID</th>\n                <th>FIRST_NAME</th>\n                <th>LAST_NAME</th>\n                <th>DOB</th>\n                <th>ADDRESS</th>\n                <th>PHONE_NUMBER</th>\n                <th>EMAIL</th>\n                <th>CUSTOMER_TYPE_ID</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>John</td>\n                <td>Cena</td>\n                <td>1985-01-15</td>\n                <td>123 Main St</td>\n                <td>555-1234</td>\n                <td>john.cena@aityl.com</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Under</td>\n                <td>Taker</td>\n                <td>1990-06-25</td>\n                <td>456 Oak Ave</td>\n                <td>555-5678</td>\n                <td>under.taker@aityl.com</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Randy</td>\n                <td>Orton</td>\n                <td>1975-04-01</td>\n                <td>789 Elm St</td>\n                <td>555-9101</td>\n                <td>randy.orton@aityl.com</td>\n                <td>2</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Table: <code>ACCOUNTS</code></h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ACCOUNT_ID</th>\n                <th>ACCOUNT_NUMBER</th>\n                <th>CUSTOMER_ID</th>\n                <th>ACCOUNT_TYPE_ID</th>\n                <th>BALANCE</th>\n                <th>CREATED_DATE</th>\n                <th>STATUS</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>1001</td>\n                <td>1</td>\n                <td>1</td>\n                <td>5000.00</td>\n                <td>2023-01-01</td>\n                <td>Active</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>1002</td>\n                <td>2</td>\n                <td>2</td>\n                <td>3000.00</td>\n                <td>2023-01-10</td>\n                <td>Active</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>1003</td>\n                <td>3</td>\n                <td>3</td>\n                <td>10000.00</td>\n                <td>2023-01-20</td>\n                <td>Active</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">3. Transactional Tables</h4>\n    <h4 class=\"bold-maroon\">Table: <code>TRANSACTIONS</code></h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>TRANSACTION_ID</th>\n                <th>ACCOUNT_ID</th>\n                <th>TRANSACTION_TYPE_ID</th>\n                <th>AMOUNT</th>\n                <th>TRANSACTION_DATE</th>\n                <th>DESCRIPTION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>1</td>\n                <td>1</td>\n                <td>1000.00</td>\n                <td>2023-02-01</td>\n                <td>Deposit to Savings</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>2</td>\n                <td>2</td>\n                <td>500.00</td>\n                <td>2023-02-05</td>\n                <td>Withdrawal from Checking</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>3</td>\n                <td>3</td>\n                <td>2000.00</td>\n                <td>2023-02-10</td>\n                <td>Transfer to Business Account</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">4. Metadata Tables</h4>\n    <h4 class=\"bold-maroon\">Table: <code>TABLE_METADATA</code></h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>TABLE_NAME</th>\n                <th>CREATED_DATE</th>\n                <th>LAST_UPDATED</th>\n                <th>DESCRIPTION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>CUSTOMERS</td>\n                <td>2023-01-01</td>\n                <td>2023-02-01</td>\n                <td>Stores customer information</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>ACCOUNTS</td>\n                <td>2023-01-01</td>\n                <td>2023-02-01</td>\n                <td>Stores account information</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>TRANSACTIONS</td>\n                <td>2023-01-01</td>\n                <td>2023-02-01</td>\n                <td>Stores transaction records</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Table: <code>COLUMN_METADATA</code></h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>TABLE_NAME</th>\n                <th>COLUMN_NAME</th>\n                <th>DATA_TYPE</th>\n                <th>IS_NULLABLE</th>\n                <th>DESCRIPTION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>CUSTOMERS</td>\n                <td>CUSTOMER_ID</td>\n                <td>NUMBER</td>\n                <td>NO</td>\n                <td>Unique ID for each customer</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>CUSTOMERS</td>\n                <td>FIRST_NAME</td>\n                <td>VARCHAR2</td>\n                <td>NO</td>\n                <td>Customer's first name</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>CUSTOMERS</td>\n                <td>LAST_NAME</td>\n                <td>VARCHAR2</td>\n                <td>NO</td>\n                <td>Customer's last name</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>CUSTOMERS</td>\n                <td>DOB</td>\n                <td>DATE</td>\n                <td>NO</td>\n                <td>Date of birth</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">5. Indexes</h4>\n    <h4 class=\"bold-maroon\">Example Indexes</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE INDEX</span> idx_customer_last_name\n  <span class=\"SQLKeyword\">ON</span> CUSTOMERS <span class=\"SQLKeyword\">(</span>LAST_NAME<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">CREATE INDEX</span> idx_account_number\n  <span class=\"SQLKeyword\">ON</span> ACCOUNTS <span class=\"SQLKeyword\">(</span>ACCOUNT_NUMBER<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">CREATE INDEX</span> idx_transaction_date\n  <span class=\"SQLKeyword\">ON</span> TRANSACTIONS <span class=\"SQLKeyword\">(</span>TRANSACTION_DATE<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">6. Views</h4>\n    <h4 class=\"bold-maroon\">View: <code>CUSTOMER_ACCOUNTS_VIEW</code></h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE VIEW</span> CUSTOMER_ACCOUNTS_VIEW\n<span class=\"SQLKeyword\">AS</span>\n  <span class=\"SQLKeyword\">SELECT</span> c.CUSTOMER_ID,\n         c.FIRST_NAME,\n         c.LAST_NAME,\n         a.ACCOUNT_ID,\n         a.ACCOUNT_NUMBER,\n         a.BALANCE\n  <span class=\"SQLKeyword\">FROM</span>   CUSTOMERS c\n         <span class=\"SQLKeyword\">JOIN</span> ACCOUNTS a\n           <span class=\"SQLKeyword\">ON</span> c.CUSTOMER_ID = a.CUSTOMER_ID<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">View: <code>ACCOUNT_TRANSACTIONS_VIEW</code></h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE VIEW</span> ACCOUNT_TRANSACTIONS_VIEW\n<span class=\"SQLKeyword\">AS</span>\n  <span class=\"SQLKeyword\">SELECT</span> a.ACCOUNT_NUMBER,\n         t.TRANSACTION_ID,\n         t.TRANSACTION_TYPE_ID,\n         t.AMOUNT,\n         t.TRANSACTION_DATE,\n         t.DESCRIPTION\n  <span class=\"SQLKeyword\">FROM</span>   ACCOUNTS a\n         <span class=\"SQLKeyword\">JOIN</span> TRANSACTIONS t\n           <span class=\"SQLKeyword\">ON</span> a.ACCOUNT_ID = t.ACCOUNT_ID<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">7. Foreign Keys</h4>\n    <h4 class=\"bold-maroon\">Example Foreign Keys</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">ALTER TABLE</span> CUSTOMERS\n  <span class=\"SQLKeyword\">ADD CONSTRAINT</span> fk_customer_type \n<span class=\"SQLKeyword\">FOREIGN KEY</span> <span class=\"SQLKeyword\">(</span>CUSTOMER_TYPE_ID<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">REFERENCES</span>\n  CUSTOMER_TYPE<span class=\"SQLKeyword\">(</span>CUSTOMER_TYPE_ID<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">ALTER TABLE</span> ACCOUNTS\n  <span class=\"SQLKeyword\">ADD CONSTRAINT</span> fk_account_customer \n<span class=\"SQLKeyword\">FOREIGN KEY</span> <span class=\"SQLKeyword\">(</span>CUSTOMER_ID<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">REFERENCES</span>\n  CUSTOMERS<span class=\"SQLKeyword\">(</span>CUSTOMER_ID<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">ALTER TABLE</span> ACCOUNTS\n  <span class=\"SQLKeyword\">ADD CONSTRAINT</span> fk_account_type \n<span class=\"SQLKeyword\">FOREIGN KEY</span> <span class=\"SQLKeyword\">(</span>ACCOUNT_TYPE_ID<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">REFERENCES</span>\n  ACCOUNT_TYPE<span class=\"SQLKeyword\">(</span>ACCOUNT_TYPE_ID<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">ALTER TABLE</span> TRANSACTIONS\n  <span class=\"SQLKeyword\">ADD CONSTRAINT</span> fk_transaction_account \n<span class=\"SQLKeyword\">FOREIGN KEY</span> <span class=\"SQLKeyword\">(</span>ACCOUNT_ID<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">REFERENCES</span>\n  ACCOUNTS<span class=\"SQLKeyword\">(</span>ACCOUNT_ID<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">ALTER TABLE</span> TRANSACTIONS\n  <span class=\"SQLKeyword\">ADD CONSTRAINT</span> fk_transaction_type \n<span class=\"SQLKeyword\">FOREIGN KEY</span> <span class=\"SQLKeyword\">(</span>TRANSACTION_TYPE_ID<span class=\"SQLKeyword\">)</span>\n  <span class=\"SQLKeyword\">REFERENCES</span> TRANSACTION_TYPE<span class=\"SQLKeyword\">(</span>TRANSACTION_TYPE_ID<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">8. Triggers</h4>\n    <h4 class=\"bold-maroon\">Example Trigger</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE OR REPLACE TRIGGER</span> trg_update_account_balance\n<span class=\"SQLKeyword\">AFTER INSERT OR UPDATE ON</span> TRANSACTIONS\n<span class=\"SQLKeyword\">FOR EACH ROW</span>\n<span class=\"SQLKeyword\">BEGIN</span>\n    <span class=\"SQLKeyword\">UPDATE</span> ACCOUNTS\n    <span class=\"SQLKeyword\">SET</span> BALANCE = BALANCE + :NEW.AMOUNT\n    <span class=\"SQLKeyword\">WHERE</span> ACCOUNT_ID = :NEW.ACCOUNT_ID<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">END</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">9. Procedures and Functions</h4>\n    <h4 class=\"bold-maroon\">Example Procedure</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE OR REPLACE PROCEDURE</span> update_account_status <span class=\"SQLKeyword\">(</span>\n    p_account_id <span class=\"SQLKeyword\">IN</span> accounts.account_id%TYPE,\n    p_status     <span class=\"SQLKeyword\">IN</span> accounts.status%TYPE\n<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span>\n<span class=\"SQLKeyword\">BEGIN</span>\n    <span class=\"SQLKeyword\">UPDATE</span> accounts\n    <span class=\"SQLKeyword\">SET</span>\n        status = p_status\n    <span class=\"SQLKeyword\">WHERE</span>\n        account_id = p_account_id<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">END</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Summary:</h4>\n    <p>This design includes reference tables for static data, master tables for main entities, transactional tables for transaction records, metadata tables for structural information, indexes for performance optimization, views for simplified data access, foreign keys for referential integrity, triggers for business rules, and procedures/functions for encapsulating business logic. This structure ensures a well-organized and efficient database for the banking industry.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 160,
    "Question": "What naming conventions would you follow when creating objects in Oracle?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n    </style>\n</head>\n<body>\n    <p>When creating objects in Oracle, it is important to follow consistent naming conventions to improve readability, maintainability, and avoid potential conflicts. Here are naming conventions for various types of objects in Oracle:</p>\n    <h4 class=\"bold-maroon\">General Guidelines</h4>\n    <ul>\n        <li><strong>Case</strong>: Use upper case or lower case consistently. Oracle identifiers are case-insensitive unless quoted. The most common practice is to use uppercase.</li>\n        <li><strong>Separator</strong>: Use underscores (<code>_</code>) to separate words in identifiers (snake_case).</li>\n        <li><strong>Length</strong>: Keep names concise yet descriptive. Oracle identifiers can be up to 30 characters long for versions less than 12.2 and 128 characters for version 12.2 and above.</li>\n        <li><strong>Prefix/Suffix</strong>: Use standard prefixes or suffixes to denote the type of object.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Naming Conventions by Object Type</h4>\n    <h4 class=\"bold-blue\">Tables</h4>\n    <ul>\n        <li>Use singular nouns to name tables.</li>\n        <li>Example: <code>CUSTOMER</code>, <code>ACCOUNT</code>, <code>TRANSACTION</code></li>\n    </ul>\n    <h4 class=\"bold-blue\">Columns</h4>\n    <ul>\n        <li>Use snake_case to separate words.</li>\n        <li>Name columns with descriptive names.</li>\n        <li>Foreign key columns should reference the primary table name and primary key column.</li>\n        <li>Example: <code>CUSTOMER_ID</code>, <code>FIRST_NAME</code>, <code>LAST_NAME</code>, <code>ACCOUNT_ID</code></li>\n    </ul>\n    <h4 class=\"bold-blue\">Indexes</h4>\n    <ul>\n        <li>Use a prefix like <code>IDX_</code>.</li>\n        <li>Include the table name and column name(s) in the index name.</li>\n        <li>Example: <code>IDX_CUSTOMER_LAST_NAME</code>, <code>IDX_ACCOUNT_NUMBER</code></li>\n    </ul>\n    <h4 class=\"bold-blue\">Primary Keys</h4>\n    <ul>\n        <li>Use a prefix like <code>PK_</code>.</li>\n        <li>Include the table name.</li>\n        <li>Example: <code>PK_CUSTOMER</code>, <code>PK_ACCOUNT</code></li>\n    </ul>\n    <h4 class=\"bold-blue\">Foreign Keys</h4>\n    <ul>\n        <li>Use a prefix like <code>FK_</code>.</li>\n        <li>Include the table name and the referenced table name.</li>\n        <li>Example: <code>FK_ACCOUNT_CUSTOMER</code>, <code>FK_TRANSACTION_ACCOUNT</code></li>\n    </ul>\n    <h4 class=\"bold-blue\">Unique Constraints</h4>\n    <ul>\n        <li>Use a prefix like <code>UK_</code>.</li>\n        <li>Include the table name and column name(s).</li>\n        <li>Example: <code>UK_CUSTOMER_EMAIL</code>, <code>UK_ACCOUNT_NUMBER</code></li>\n    </ul>\n    <h4 class=\"bold-blue\">Check Constraints</h4>\n    <ul>\n        <li>Use a prefix like <code>CK_</code>.</li>\n        <li>Include the table name and column name(s).</li>\n        <li>Example: <code>CK_ACCOUNT_BALANCE</code>, <code>CK_CUSTOMER_DOB</code></li>\n    </ul>\n    <h4 class=\"bold-blue\">Views</h4>\n    <ul>\n        <li>Use a prefix like <code>VW_</code>.</li>\n        <li>Include the descriptive name of the view.</li>\n        <li>Example: <code>VW_CUSTOMER_ACCOUNTS</code>, <code>VW_ACCOUNT_TRANSACTIONS</code></li>\n    </ul>\n    <h4 class=\"bold-blue\">Triggers</h4>\n    <ul>\n        <li>Use a prefix like <code>TRG_</code>.</li>\n        <li>Include the table name and the action.</li>\n        <li>Example: <code>TRG_CUSTOMER_BEFORE_INSERT</code>, <code>TRG_TRANSACTION_AFTER_INSERT</code></li>\n    </ul>\n    <h4 class=\"bold-blue\">Procedures</h4>\n    <ul>\n        <li>Use a prefix like <code>PRC_</code>.</li>\n        <li>Include a verb that describes the action and the table name.</li>\n        <li>Example: <code>PRC_UPDATE_ACCOUNT_STATUS</code>, <code>PRC_INSERT_TRANSACTION</code></li>\n    </ul>\n    <h4 class=\"bold-blue\">Functions</h4>\n    <ul>\n        <li>Use a prefix like <code>FN_</code>.</li>\n        <li>Include a verb that describes the action.</li>\n        <li>Example: <code>FN_GET_ACCOUNT_BALANCE</code>, <code>FN_CALCULATE_INTEREST</code></li>\n    </ul>\n    <h4 class=\"bold-blue\">Sequences</h4>\n    <ul>\n        <li>Use a prefix like <code>SEQ_</code>.</li>\n        <li>Include the table name.</li>\n        <li>Example: <code>SEQ_CUSTOMER_ID</code>, <code>SEQ_TRANSACTION_ID</code></li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 161,
    "Question": "Write a query to fetch employee names along with their respective department names.",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        .tg{\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data - Table EMPLOYEES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>FIRST_NAME</th>\n                <th>LAST_NAME</th>\n                <th>DEPARTMENT_ID</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Usain</td>\n                <td>Bolt</td>\n                <td>10</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Michael</td>\n                <td>Phelps</td>\n                <td>20</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Input Data - Table DEPARTMENTS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>DEPARTMENT_ID</th>\n                <th>DEPARTMENT_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>10</td>\n                <td>Sales</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>20</td>\n                <td>Marketing</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>FIRST_NAME</th>\n                <th>LAST_NAME</th>\n                <th>DEPARTMENT_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>Usain</td>\n                <td>Bolt</td>\n                <td>Sales</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>Michael</td>\n                <td>Phelps</td>\n                <td>Marketing</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <div class=\"scrollable-container\">\n        <pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> e.first_name,\n               e.last_name,\n               d.department_name\n        <span class=\"SQLKeyword\">FROM</span>   employees e\n               <span class=\"SQLKeyword\">JOIN</span> departments d\n                 <span class=\"SQLKeyword\">ON</span> e.department_id = d.department_id<span class=\"SQLOperator\">;</span></pre>\n        </div>\n        <h4 class=\"bold-maroon\">Explanation:</h4>\n<ul>\n    <li>\n        <strong>Table Join:</strong>\n        <ul>\n            <li>The query performs an inner join between the <code>employees</code> table (aliased as <code>e</code>) and the <code>departments</code> table (aliased as <code>d</code>).</li>\n            <li>The join is based on the common column department_id, which exists in both tables and identifies the department to which the employee belongs.</li>\n        </ul>\n    </li>\n</ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 162,
    "Question": "Write a query to calculate the average salary of employees in each department.",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> department_id,\n       <span class=\"SQLFunction\">AVG</span>(salary) <span class=\"SQLKeyword\">AS</span> avg_salary\n<span class=\"SQLKeyword\">FROM</span>   employees\n<span class=\"SQLKeyword\">GROUP  BY</span> department_id<span class=\"SQLOperator\">;</span></pre>\n</div>\n<h4 class=\"bold-maroon\">Explanation:</h4>\n<ul>\n    <li>\n        <strong>Grouping by Department:</strong>\n        <ul>\n            <li>The query groups the data from the <code>EMPLOYEES</code> table by the <code>department_id</code>.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>Average Salary Calculation:</strong>\n        <ul>\n            <li>For each department, the query calculates the average salary using the <code>AVG(salary)</code> function.</li>\n        </ul>\n    </li>\n</ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 163,
    "Question": "What is an index in Oracle SQL, and what types of indexes are available?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n    </style>\n</head>\n<body>\n    <p>An index in Oracle SQL is a database object that improves the speed of data retrieval operations on a table. It works by creating an entry for each value that can be quickly searched, significantly reducing the time required to locate rows with specific column values. Indexes are especially useful for queries that involve searching, sorting, and joining tables.</p>\n    <h4 class=\"bold-maroon\">Types of Indexes in Oracle SQL</h4>\n    <h4 class=\"bold-blue\">1. B-tree Index (Balanced Tree Index)</h4>\n    <p><strong>Description:</strong> The default and most common type of index. It stores data in a balanced tree structure that allows for fast and efficient retrieval.</p>\n    <p><strong>Usage:</strong> Suitable for columns with a wide range of values.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE INDEX</span> idx_customer_name <span class=\"SQLKeyword\">ON</span> customers <span class=\"SQLKeyword\">(</span>customer_name<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-blue\">2. Bitmap Index</h4>\n    <p><strong>Description:</strong> Uses a bitmap for each distinct value of the column(s) being indexed. It is efficient for columns with low cardinality (few distinct values\n).</p>\n    <p><strong>Usage:</strong> Suitable for data warehousing and columns with low distinct values, such as gender or status fields.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE BITMAP INDEX</span> idx_customer_status <span class=\"SQLKeyword\">ON</span> customers <span class=\"SQLKeyword\">(</span>status<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-blue\">3. Unique Index</h4>\n    <p><strong>Description:</strong> Ensures that all values in the indexed column are unique. Automatically created when a unique constraint is defined.</p>\n    <p><strong>Usage:</strong> Suitable for columns that must have unique values, such as primary key columns.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE UNIQUE INDEX</span> idx_unique_customer_id \n<span class=\"SQLKeyword\">ON</span> customers <span class=\"SQLKeyword\">(</span>customer_id<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-blue\">4. Composite Index</h4>\n    <p><strong>Description:</strong> An index on multiple columns of a table. Also known as a concatenated index.</p>\n    <p><strong>Usage:</strong> Suitable for queries that filter or sort on multiple columns.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE INDEX</span> idx_customer_name_dob \n<span class=\"SQLKeyword\">ON</span> customers <span class=\"SQLKeyword\">(</span>customer_name, dob<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-blue\">5. Function-Based Index</h4>\n    <p><strong>Description:</strong> An index based on expressions or functions involving one or more columns.</p>\n    <p><strong>Usage:</strong> Suitable for queries that use functions on columns in WHERE clauses.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE INDEX</span> idx_upper_customer_name \n<span class=\"SQLKeyword\">ON</span> customers <span class=\"SQLKeyword\">(</span>UPPER<span class=\"SQLKeyword\">(</span>customer_name<span class=\"SQLKeyword\">)</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span></pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 164,
    "Question": "Explain the concept of synonyms in Oracle SQL.",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n    </style>\n</head>\n<body>\n    <p>A synonym in Oracle SQL is an alias or an alternative name for a database object, such as a table, view, sequence, procedure, function, package, materialized view, or another synonym. Synonyms provide a layer of abstraction, allowing users to refer to an object without needing to know its actual name or owner.</p>\n    <h4 class=\"bold-maroon\">Types of Synonyms</h4>\n    <ul>\n        <li><strong>Public Synonyms</strong>: These are accessible to all users in the database. They are created by the database administrator and do not belong to any specific schema.</li>\n        <li><strong>Private Synonyms</strong>: These are available only to the user who creates them or to those users who have been granted specific permissions. Private synonyms are owned by the schema in which they are created.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Syntax</h4>\n    <h4 class=\"bold-blue\">Creating a Private Synonym:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE SYNONYM</span> synonym_name <span class=\"SQLKeyword\">FOR</span> object_name<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-blue\">Creating a Public Synonym:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE PUBLIC SYNONYM</span> synonym_name <span class=\"SQLKeyword\">FOR</span> object_name<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">Use Cases</h4>\n    <h4 class=\"bold-blue\">1. Simplifying SQL Statements</h4>\n    <p>Synonyms can be used to simplify the complexity of SQL statements by providing shorter, more user-friendly names for objects.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE SYNONYM</span> emp <span class=\"SQLKeyword\">FOR</span> hr.employees<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">SELECT</span> * <span class=\"SQLKeyword\">FROM</span> emp<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-blue\">2. Location Transparency</h4>\n    <p>Synonyms can be used to create location transparency by providing a consistent name for objects, regardless of the schema or database in which they reside.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE SYNONYM</span> orders <span class=\"SQLKeyword\">FOR</span> sales.orders<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">SELECT</span> * <span class=\"SQLKeyword\">FROM</span> orders<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-blue\">3. Security and Encapsulation</h4>\n    <p>Synonyms can encapsulate the underlying object details, improving security and abstracting the schema layout from the end users.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE SYNONYM</span> dept <span class=\"SQLKeyword\">FOR</span> hr.departments<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">GRANT SELECT ON</span> hr.departments <span class=\"SQLKeyword\">TO</span> public_user<span class=\"SQLOperator\">;</span></pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 165,
    "Question": "Describe how to use the PARTITION BY and ORDER BY clause in an analytical query to segment data.",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n    </style>\n</head>\n<body>\n    <p>Analytical functions in Oracle SQL provide efficient ways to perform complex calculations over sets of rows. The <code>PARTITION BY</code> and <code>ORDER BY</code> clauses are used within these functions to segment and order the data for these calculations.</p>\n    <h4 class=\"bold-maroon\">PARTITION BY Clause</h4>\n    <p>The <code>PARTITION BY</code> clause divides the result set into partitions (groups) to which the analytical function is applied. Each partition is processed independently.</p>\n    <h4 class=\"bold-maroon\">ORDER BY Clause</h4>\n    <p>The <code>ORDER BY</code> clause specifies the order of rows within each partition. This is necessary for functions that depend on row order, such as cumulative sums, running totals, and moving averages.</p>\n    <h4 class=\"bold-maroon\">Example Scenario</h4>\n    <p>Consider a table <code>sales</code> with the following structure:</p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>SALE_ID</th>\n                <th>CUSTOMER_ID</th>\n                <th>SALE_DATE</th>\n                <th>AMOUNT</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>101</td>\n                <td>2023-01-01</td>\n                <td>100</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>102</td>\n                <td>2023-01-02</td>\n                <td>150</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>101</td>\n                <td>2023-01-03</td>\n                <td>200</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>103</td>\n                <td>2023-01-04</td>\n                <td>50</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>101</td>\n                <td>2023-01-05</td>\n                <td>300</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>6</td>\n                <td>102</td>\n                <td>2023-01-06</td>\n                <td>100</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Example: <code>SUM()</code> with <code>PARTITION BY</code> and <code>ORDER BY</code></h4>\n    <p>The <code>SUM()</code> function calculates the running total within each partition.</p>\n    <h4 class=\"bold-blue\">Query</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> SALE_ID,\n       CUSTOMER_ID,\n       SALE_DATE,\n       AMOUNT,\n       <span class=\"SQLFunction\">SUM</span>(AMOUNT)\n         <span class=\"SQLKeyword\">OVER</span> <span class=\"SQLKeyword\">(</span>\n           <span class=\"SQLKeyword\">PARTITION BY</span> CUSTOMER_ID\n           <span class=\"SQLKeyword\">ORDER BY</span> SALE_DATE<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> RUNNING_TOTAL\n<span class=\"SQLKeyword\">FROM</span>   sales<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><strong>PARTITION BY CUSTOMER_ID</strong>: The data is partitioned by <code>CUSTOMER_ID</code>, so the running total is calculated separately for each customer.</li>\n        <li><strong>ORDER BY SALE_DATE</strong>: Within each partition, rows are ordered by <code>SALE_DATE</code>, and the running total is calculated in this order.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>SALE_ID</th>\n                <th>CUSTOMER_ID</th>\n                <th>SALE_DATE</th>\n                <th>AMOUNT</th>\n                <th>RUNNING_TOTAL</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>101</td>\n                <td>2023-01-01</td>\n                <td>100</td>\n                <td>100</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>3</td>\n                <td>101</td>\n                <td>2023-01-03</td>\n                <td>200</td>\n                <td>300</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>101</td>\n                <td>2023-01-05</td>\n                <td>300</td>\n                <td>600</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>102</td>\n                <td>2023-01-02</td>\n                <td>150</td>\n                <td>150</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>6</td>\n                <td>102</td>\n                <td>2023-01-06</td>\n                <td>100</td>\n                <td>250</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>103</td>\n                <td>2023-01-04</td>\n                <td>50</td>\n                <td>50</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Conclusion:</h4>\n    <p>The <code>PARTITION BY</code> clause segments the data into partitions, and the <code>ORDER BY</code> clause orders the rows within each partition. These clauses are integral parts of analytical queries in SQL, allowing for sophisticated data analysis and reporting.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 166,
    "Question": "What is SQL, and what are its primary uses?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n    </style>\n</head>\n<body>\n    <p><strong>SQL (Structured Query Language)</strong> is a standardized programming language specifically designed for managing and manipulating relational databases. SQL provides a robust and efficient way to perform various operations on data stored in relational database management systems (RDBMS).</p>\n    <h4 class=\"bold-maroon\">Primary Uses of SQL</h4>\n    <h4 class=\"bold-blue\">1. Data Querying</h4>\n    <p>SQL is used to retrieve data from databases using the <code>SELECT</code> statement. This allows users to specify the exact data they need, filter it based on certain conditions, sort it, and perform calculations.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> first_name,\n       last_name\n<span class=\"SQLKeyword\">FROM</span>   employees\n<span class=\"SQLKeyword\">WHERE</span>  department_id = 10<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-blue\">2. Data Manipulation</h4>\n    <p>SQL allows for the insertion, updating, and deletion of data within a database.</p>\n    <ul>\n        <li><strong>INSERT</strong>: Adds new rows to a table.</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">INSERT INTO</span> employees\n            <span class=\"SQLKeyword\">(</span>first_name,\n             last_name,\n             department_id<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">VALUES</span>      <span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'Michael '</span>,\n             <span class=\"SQLString\">'Schumacar'</span>,\n             10<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span></pre>\n</div>\n    <ul>\n        <li><strong>UPDATE</strong>: Modifies existing data in a table.</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">UPDATE</span> employees\n<span class=\"SQLKeyword\">SET</span>    last_name = <span class=\"SQLString\">'Schumacher'</span>\n<span class=\"SQLKeyword\">WHERE</span>  employee_id = 123<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <ul>\n        <li><strong>DELETE</strong>: Removes rows from a table.</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DELETE FROM</span> employees\n<span class=\"SQLKeyword\">WHERE</span>  employee_id = 123<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-blue\">3. Data Definition</h4>\n    <p>SQL is used to define the structure of a database, including the creation, modification, and deletion of database objects such as tables, indexes, and views.</p>\n    <ul>\n        <li><strong>CREATE</strong>: Creates new database objects.</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> employees\n  <span class=\"SQLKeyword\">(</span>\n     employee_id   <span class=\"SQLKeyword\">INT</span> <span class=\"SQLKeyword\">PRIMARY KEY</span>,\n     first_name    VARCHAR<span class=\"SQLKeyword\">(</span>50<span class=\"SQLKeyword\">)</span>,\n     last_name     VARCHAR<span class=\"SQLKeyword\">(</span>50<span class=\"SQLKeyword\">)</span>,\n     department_id <span class=\"SQLKeyword\">INT</span>\n  <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span></pre>\n</div>\n    <ul>\n        <li><strong>ALTER</strong>: Modifies existing database objects.</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">ALTER TABLE</span> employees <span class=\"SQLKeyword\">ADD</span> <span class=\"SQLKeyword\">(</span>email VARCHAR<span class=\"SQLKeyword\">(</span>100<span class=\"SQLKeyword\">)</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span></pre>\n</div>\n    <ul>\n        <li><strong>DROP</strong>: Deletes database objects.</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DROP TABLE</span> employees<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-blue\">4. Data Control</h4>\n    <p>SQL includes commands to control access to data within the database, ensuring data security and integrity.</p>\n    <ul>\n        <li><strong>GRANT</strong>: Provides specific privileges to users or roles.</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">GRANT SELECT ON</span> employees <span class=\"SQLKeyword\">TO</span> public<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <ul>\n        <li><strong>REVOKE</strong>: Removes privileges from users or roles.</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">REVOKE SELECT ON</span> employees <span class=\"SQLKeyword\">FROM</span> public<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-blue\">5. Transaction Control</h4>\n    <p>SQL manages transactions to ensure data integrity and consistency. Transactions are sequences of SQL statements that are treated as a single unit.</p>\n    <ul>\n        <li><strong>COMMIT</strong>: Saves all changes made during the current transaction.</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">COMMIT</span><span class=\"SQLOperator\">;</span></pre>\n</div>\n    <ul>\n        <li><strong>ROLLBACK</strong>: Reverts all changes made during the current transaction.</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">ROLLBACK</span><span class=\"SQLOperator\">;</span></pre>\n</div>\n    <ul>\n        <li><strong>SAVEPOINT</strong>: Sets a point within a transaction to which you can roll back.</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SAVEPOINT</span> savepoint_name<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-blue\">6. Data Integrity</h4>\n    <p>SQL ensures data integrity through constraints such as <code>PRIMARY KEY</code>, <code>FOREIGN KEY</code>, <code>UNIQUE</code>, <code>NOT NULL</code>, and <code>CHECK</code>.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> employees\n<span class=\"SQLKeyword\">(</span>\nemployee_id <span class=\"SQLKeyword\">INT PRIMARY KEY</span>,\ntitle       VARCHAR<span class=\"SQLKeyword\">(</span>10<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">CHECK</span> <span class=\"SQLKeyword\">(</span>title <span class=\"SQLKeyword\">IN</span> <span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'Mr'</span>, <span class=\"SQLString\">'Miss'</span>, <span class=\"SQLString\">'Mrs.'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLKeyword\">)</span>,\nfirst_name VARCHAR<span class=\"SQLKeyword\">(</span>50<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">NOT NULL</span>,\nlast_name   VARCHAR<span class=\"SQLKeyword\">(</span>50<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">NOT NULL</span>,\nemail       VARCHAR<span class=\"SQLKeyword\">(</span>100<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">UNIQUE</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">Conclusion:</h4>\n    <p>SQL is a versatile and robust language used to manage and manipulate relational databases. Its primary uses include querying data, manipulating data, defining database structures, controlling access to data, managing transactions, and ensuring data integrity. By leveraging SQL's capabilities, users can effectively handle large amounts of data and perform complex operations with ease.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 167,
    "Question": "What is the difference between SQL and Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n    </style>\n</head>\n<body>\n    <p><strong>SQL (Structured Query Language)</strong> is a standard programming language used to manage and manipulate relational databases. It is a language adopted by various database management systems (DBMS), including Oracle, Microsoft SQL Server, MySQL, PostgreSQL, and others. <strong>Oracle SQL</strong> refers specifically to the implementation and extensions of SQL provided by Oracle Database, a product developed by Oracle Corporation.</p>\n    <h4 class=\"bold-maroon\">1. Standard SQL vs. Oracle SQL</h4>\n    <ul>\n        <li><strong>Standard SQL</strong>: Refers to the SQL language defined by ISO/IEC standards. It includes core SQL commands and syntax that are generally supported across different DBMSs.</li>\n        <li><strong>Oracle SQL</strong>: Refers to the SQL implementation by Oracle, which not only supports standard SQL but also includes proprietary extensions and features unique to Oracle Database.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">2. Proprietary Extensions and Features</h4>\n    <ul>\n        <li><strong>PL/SQL</strong>: Oracle SQL includes PL/SQL (Procedural Language/SQL), which extends SQL with procedural capabilities, allowing for the creation of stored procedures, functions, packages, and triggers. PL/SQL adds programming constructs such as loops, conditions, and exceptions.</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DECLARE</span>\n    v_total <span class=\"SQLKeyword\">NUMBER</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">BEGIN</span>\n    <span class=\"SQLKeyword\">SELECT</span>\n        <span class=\"SQLFunction\">SUM</span>(salary)\n    <span class=\"SQLKeyword\">INTO</span> v_total\n    <span class=\"SQLKeyword\">FROM</span>\n        employees<span class=\"SQLOperator\">;</span>\n    dbms_output<span class=\"SQLOperator\">.</span>put_line<span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'Total Salary: '</span> <span class=\"SQLOperator\">||</span> v_total<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">END</span><span class=\"SQLOperator\">;</span></pre>\n</div>\n    <ul>\n        <li><strong>Data Types</strong>: Oracle SQL supports additional data types that are not part of the standard SQL, such as <code>RAW</code>, <code>LONG</code>, <code>BFILE</code>, <code>ROWID</code>, and <code>UROWID</code>.</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> example <span class=\"SQLKeyword\">(</span>\n      id <span class=\"SQLKeyword\">NUMBER PRIMARY KEY</span>,\n      data <span class=\"SQLKeyword\">RAW</span><span class=\"SQLKeyword\">(</span>2000<span class=\"SQLKeyword\">)</span>\n  <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span></pre>\n</div>\n    <ul>\n        <li><strong>Advanced Indexing</strong>: Oracle SQL offers advanced indexing options like bitmap indexes, function-based indexes, and domain indexes.</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE BITMAP INDEX</span> idx_status\n   <span class=\"SQLKeyword\">ON</span> employees<span class=\"SQLKeyword\">(</span>status<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span></pre>\n</div>\n    <ul>\n        <li><strong>Partitioning</strong>: Oracle SQL provides advanced table partitioning features, which are not available in standard SQL.</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> sales <span class=\"SQLKeyword\">(</span>\n    sale_id   <span class=\"SQLKeyword\">NUMBER</span>,\n    sale_date <span class=\"SQLKeyword\">DATE</span>,\n    amount    <span class=\"SQLKeyword\">NUMBER</span>\n<span class=\"SQLKeyword\">)</span>\n    <span class=\"SQLKeyword\">PARTITION BY RANGE</span> <span class=\"SQLKeyword\">(</span>\n        sale_date\n    <span class=\"SQLKeyword\">)</span>\n    <span class=\"SQLKeyword\">(</span> <span class=\"SQLKeyword\">PARTITION</span> p1\n        <span class=\"SQLKeyword\">VALUES LESS THAN</span> <span class=\"SQLKeyword\">(</span> <span class=\"SQLFunction\">TO_DATE</span><span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'2022-01-01'</span>, <span class=\"SQLString\">'YYYY-MM-DD'</span><span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">,</span>\n    <span class=\"SQLKeyword\">PARTITION</span> p2\n        <span class=\"SQLKeyword\">VALUES LESS THAN</span> <span class=\"SQLKeyword\">(</span> <span class=\"SQLFunction\">TO_DATE</span><span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'2023-01-01'</span>, <span class=\"SQLString\">'YYYY-MM-DD'</span><span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">)</span>\n    <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span></pre>\n</div>\n    <ul>\n        <li><strong>Materialized Views</strong>: Oracle SQL includes materialized views, which store the result of a query physically and can be refreshed periodically.</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE MATERIALIZED VIEW</span> sales_summary <span class=\"SQLKeyword\">AS</span>\n    <span class=\"SQLKeyword\">SELECT</span>\n        sale_date,\n        <span class=\"SQLFunction\">SUM</span>(amount)\n    <span class=\"SQLKeyword\">FROM</span>\n        sales\n    <span class=\"SQLKeyword\">GROUP BY</span>\n        sale_date<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">3. Oracle-Specific Functions</h4>\n    <ul>\n        <li><strong>Hierarchical Queries</strong>: Oracle SQL supports hierarchical queries using the <code>CONNECT BY</code> clause.</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    employee_id,\n    first_name,\n    last_name,\n    manager_id\n<span class=\"SQLKeyword\">FROM</span>\n    employees\n<span class=\"SQLKeyword\">CONNECT BY</span>\n    <span class=\"SQLKeyword\">PRIOR</span> employee_id = manager_id<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <ul>\n        <li><strong>Analytical Functions</strong>: While standard SQL includes basic analytical functions, Oracle SQL offers a rich set of analytical functions with enhanced capabilities.</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    employee_id,\n    first_name,\n    last_name,\n    <span class=\"SQLFunction\">RANK</span><span class=\"SQLKeyword\">()</span>\n    <span class=\"SQLKeyword\">OVER</span><span class=\"SQLKeyword\">(</span>\n        <span class=\"SQLKeyword\">ORDER BY</span>\n            salary <span class=\"SQLKeyword\">DESC</span>\n    <span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> rank\n<span class=\"SQLKeyword\">FROM</span>\n    employees<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <ul>\n        <li><strong>Flashback Queries</strong>: Oracle SQL includes flashback queries, which allow querying historical data using the <code>AS OF</code> clause.</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    *\n<span class=\"SQLKeyword\">FROM</span>\n    employees <span class=\"SQLKeyword\">AS OF TIMESTAMP</span> <span class=\"SQLKeyword\">(</span> systimestamp - <span class=\"SQLKeyword\">INTERVAL</span> <span class=\"SQLString\">'1'</span> <span class=\"SQLKeyword\">DAY</span> <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">4. Performance Tuning Features</h4>\n    <ul>\n        <li><strong>Hints</strong>: Oracle SQL allows the use of hints to influence the optimizer's choice of execution plan.</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLComment\">/*+ FULL(employees) */</span> *\n  <span class=\"SQLKeyword\">FROM</span> employees<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <ul>\n        <li><strong>Optimizer</strong>: Oracle's cost-based optimizer includes numerous features and settings specific to Oracle, which are not part of the standard SQL.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Summary:</h4>\n    <p><strong>SQL</strong> is a standardized language used across various database systems, providing core commands for database management and manipulation. <strong>Oracle SQL</strong>, on the other hand, refers to Oracle's implementation of SQL, which includes not only the standard SQL features but also proprietary extensions, advanced features, and tools unique to Oracle Database. These enhancements make Oracle SQL particularly important and versatile for complex database applications, providing capabilities beyond those defined by the SQL standard.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 168,
    "Question": "What are joins in SQL? List the different types of joins.",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th,\n        .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode,\n            .tg {\n                font-size: 12px;\n            }\n            .tg th,\n            .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode,\n            .tg {\n                font-size: 11px;\n            }\n            .tg th,\n            .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In Oracle SQL, joins are used to combine rows from two or more tables based on a related column between them. Joins are an efficient way to query data from multiple tables and present it as a single set of results.</p>\n    <h4 class=\"bold-maroon\">Here are the different types of joins in Oracle SQL:</h4>\n    <ul>\n        <li>Inner Join</li>\n        <li>Left Outer Join (or Left Join)</li>\n        <li>Right Outer Join (or Right Join)</li>\n        <li>Full Outer Join</li>\n        <li>Cross Join</li>\n        <li>Self Join</li>\n        <li>Natural Join</li>\n    </ul>\n    <h4 class=\"bold-blue\">1. Inner Join</h4>\n    <h4 class=\"bold-maroon\">Description:</h4>\n    <p>An inner join returns rows when there is a match in both tables.</p>\n    <h4 class=\"bold-maroon\">Example:</h4>\n    <h4 class=\"bold-maroon\">Let's assume we have two tables:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_ID</th>\n                <th>CUSTOMER_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Kane</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Rhonda</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Devi</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORDER_ID</th>\n                <th>CUSTOMER_ID</th>\n                <th>ORDER_DATE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>101</td>\n                <td>1</td>\n                <td>2024-01-01</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>102</td>\n                <td>2</td>\n                <td>2024-01-02</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>103</td>\n                <td>4</td>\n                <td>2024-01-03</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\" style=\"margin-top:20px;\">SQL Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    customers.customer_id,\n    customers.customer_name,\n    orders.order_id,\n    orders.order_date\n<span class=\"SQLKeyword\">FROM</span>\n         customers\n    <span class=\"SQLKeyword\">INNER JOIN</span> orders\n      <span class=\"SQLKeyword\">ON</span> customers.customer_id = orders.customer_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_ID</th>\n                <th>CUSTOMER_NAME</th>\n                <th>ORDER_ID</th>\n                <th>ORDER_DATE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Kane</td>\n                <td>101</td>\n                <td>2024-01-01</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Rhonda</td>\n                <td>102</td>\n                <td>2024-01-02</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\" style=\"margin-top:20px;\">2. Left Outer Join (Left Join)</h4>\n    <h4 class=\"bold-maroon\">Description:</h4>\n    <p>A left join returns all rows from the left table (Customers), and the matched rows from the right table (Orders). If no match is found, NULL values are returned for columns from the right table.</p>\n    <h4 class=\"bold-maroon\" style=\"margin-top:20px;\">SQL Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    customers.customer_id,\n    customers.customer_name,\n    orders.order_id,\n    orders.order_date\n<span class=\"SQLKeyword\">FROM</span>\n    customers\n    <span class=\"SQLKeyword\">LEFT JOIN</span> orders\n        <span class=\"SQLKeyword\">ON</span> customers.customer_id = orders.customer_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_ID</th>\n                <th>CUSTOMER_NAME</th>\n                <th>ORDER_ID</th>\n                <th>ORDER_DATE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Kane</td>\n                <td>101</td>\n                <td>2024-01-01</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Rhonda</td>\n                <td>102</td>\n                <td>2024-01-02</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Devi</td>\n                <td>NULL</td>\n                <td>NULL</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\" style=\"margin-top:20px;\">3. Right Outer Join (Right Join)</h4>\n    <h4 class=\"bold-maroon\">Description:</h4>\n    <p>A right join returns all rows from the right table (Orders), and the matched rows from the left table (Customers). If no match is found, NULL values are returned for columns from the left table.</p>\n    <h4 class=\"bold-maroon\" style=\"margin-top:20px;\">SQL Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    customers.customer_id,\n    customers.customer_name,\n    orders.order_id,\n    orders.order_date\n<span class=\"SQLKeyword\">FROM</span>\n         customers <span class=\"SQLKeyword\">RIGHT</span>\n    <span class=\"SQLKeyword\">JOIN</span> orders\n        <span class=\"SQLKeyword\">ON</span> customers.customer_id = orders.customer_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_ID</th>\n                <th>CUSTOMER_NAME</th>\n                <th>ORDER_ID</th>\n                <th>ORDER_DATE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Kane</td>\n                <td>101</td>\n                <td>2024-01-01</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Rhonda</td>\n                <td>102</td>\n                <td>2024-01-02</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>NULL</td>\n                <td>NULL</td>\n                <td>103</td>\n                <td>2024-01-03</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\" style=\"margin-top:20px;\">4. Full Outer Join</h4>\n    <h4 class=\"bold-maroon\">Description:</h4>\n    <p>A full outer join returns all rows when there is a match in one of the tables. This means it returns all rows from the left table and all rows from the right table, with NULLs in places where the join condition is not met.</p>\n    <h4 class=\"bold-maroon\" style=\"margin-top:20px;\">SQL Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    customers.customer_id,\n    customers.customer_name,\n    orders.order_id,\n    orders.order_date\n<span class=\"SQLKeyword\">FROM</span>\n    customers\n    <span class=\"SQLKeyword\">FULL OUTER JOIN</span> orders\n        <span class=\"SQLKeyword\">ON</span> customers.customer_id = orders.customer_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_ID</th>\n                <th>CUSTOMER_NAME</th>\n                <th>ORDER_ID</th>\n                <th>ORDER_DATE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Kane</td>\n                <td>101</td>\n                <td>2024-01-01</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Rhonda</td>\n                <td>102</td>\n                <td>2024-01-02</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Devi</td>\n                <td>NULL</td>\n                <td>NULL</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>NULL</td>\n                <td>NULL</td>\n                <td>103</td>\n                <td>2024-01-03</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\" style=\"margin-top:20px;\">5. Cross Join</h4>\n    <h4 class=\"bold-maroon\">Description:</h4>\n    <p>A cross join returns the Cartesian product of the two tables, which means it returns all possible combinations of rows.</p>\n    <h4 class=\"bold-maroon\" style=\"margin-top:20px;\">SQL Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    customers.customer_id,\n    customers.customer_name,\n    orders.order_id,\n    orders.order_date\n<span class=\"SQLKeyword\">FROM</span>\n         customers\n    <span class=\"SQLKeyword\">CROSS JOIN</span> orders<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_ID</th>\n                <th>CUSTOMER_NAME</th>\n                <th>ORDER_ID</th>\n                <th>ORDER_DATE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Kane</td>\n                <td>101</td>\n                <td>2024-01-01</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>1</td>\n                <td>Kane</td>\n                <td>102</td>\n                <td>2024-01-02</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Kane</td>\n                <td>103</td>\n                <td>2024-01-03</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Rhonda</td>\n                <td>101</td>\n                <td>2024-01-01</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>2</td>\n                <td>Rhonda</td>\n                <td>102</td>\n                <td>2024-01-02</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Rhonda</td>\n                <td>103</td>\n                <td>2024-01-03</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Devi</td>\n                <td>101</td>\n                <td>2024-01-01</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>3</td>\n                <td>Devi</td>\n                <td>102</td>\n                <td>2024-01-02</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Devi</td>\n                <td>103</td>\n                <td>2024-01-03</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\" style=\"margin-top:20px;\">6. Self Join</h4>\n    <h4 class=\"bold-maroon\">Description:</h4>\n    <p>A self join is a regular join, but the table is joined with itself.</p>\n    <h4 class=\"bold-maroon\" style=\"margin-top:20px;\">Example:</h4>\n    <h4 class=\"bold-maroon\">Let's assume we have a table:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>EMPLOYEE_NAME</th>\n                <th>MANAGER_ID</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>John</td>\n                <td>NULL</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Mike</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Sara</td>\n                <td>1</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\" style=\"margin-top:20px;\">SQL Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    e1.employee_id,\n    e1.employee_name,\n    e2.employee_name <span class=\"SQLKeyword\">AS</span> manager_name\n<span class=\"SQLKeyword\">FROM</span>\n    employees e1\n    <span class=\"SQLKeyword\">LEFT JOIN</span> employees e2\n        <span class=\"SQLKeyword\">ON</span> e1.manager_id = e2.employee_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>EMPLOYEE_NAME</th>\n                <th>MANAGER_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>John</td>\n                <td>NULL</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Mike</td>\n                <td>John</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Sara</td>\n                <td>John</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\" style=\"margin-top:20px;\">7. Natural Join</h4>\n    <h4 class=\"bold-maroon\">Description:</h4>\n    <p>A natural join is based on all columns in the two tables that have the same name and data type and selects rows with equal values in the relevant columns.</p>\n    <h4 class=\"bold-maroon\" style=\"margin-top:20px;\">SQL Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> *\n<span class=\"SQLKeyword\">FROM</span> Customers\n<span class=\"SQLKeyword\">NATURAL JOIN</span> Orders<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_ID</th>\n                <th>CUSTOMER_NAME</th>\n                <th>ORDER_ID</th>\n                <th>ORDER_DATE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Kane</td>\n                <td>101</td>\n                <td>2024-01-01</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Rhonda</td>\n                <td>102</td>\n                <td>2024-01-02</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 169,
    "Question": "What is a foreign key, and how does it maintain referential integrity?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>A <strong>Foreign key</strong> is a column or a set of columns in one table that uniquely identifies rows in another table. The table with the foreign key is called the child table, and the table with the candidate key is called the parent table. Foreign keys are used to enforce referential integrity between tables.</p>\n    <p><strong>Referential integrity</strong> ensures that the relationship between tables remains consistent. Specifically, it prevents actions that would lead to orphaned records in the child table, such as deleting a record in the parent table that is referenced by the child table or updating a key in the parent table that would break the link to the child table.</p>\n    <h4 class=\"bold-maroon\">Example of Single Column Foreign Key</h4>\n    <p>Let's consider two tables: <strong>Customers</strong> and <strong>Orders</strong>.</p>\n    <h4 class=\"bold-maroon\">Customers Table (Parent Table):</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_ID</th>\n                <th>CUSTOMER_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Katie</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Elena</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Cristiano</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Orders table (Child Table):</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORDER_ID</th>\n                <th>CUSTOMER_ID</th>\n                <th>ORDER_DATE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>101</td>\n                <td>1</td>\n                <td>2024-01-01</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>102</td>\n                <td>2</td>\n                <td>2024-01-02</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>103</td>\n                <td>1</td>\n                <td>2024-01-03</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">SQL to create the tables with a single column foreign key:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> customers <span class=\"SQLKeyword\">(</span>\n    customer_id   <span class=\"SQLKeyword\">INT PRIMARY KEY</span>,\n    customer_name VARCHAR<span class=\"SQLKeyword\">(</span>50<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">CREATE TABLE</span> orders <span class=\"SQLKeyword\">(</span>\n    order_id    <span class=\"SQLKeyword\">INT PRIMARY KEY</span>,\n    customer_id <span class=\"SQLKeyword\">INT</span>,\n    order_date  <span class=\"SQLKeyword\">DATE</span>,\n    <span class=\"SQLKeyword\">FOREIGN KEY</span> <span class=\"SQLKeyword\">(</span> customer_id <span class=\"SQLKeyword\">)</span>\n        <span class=\"SQLKeyword\">REFERENCES</span> customers <span class=\"SQLKeyword\">(</span> customer_id <span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Example of Multi-Column Foreign Key</h4>\n    <p>Let's consider two tables: <strong>Products</strong> and <strong>OrderDetails</strong>. Here, we assume that an order can have multiple products, and each product can belong to different categories.</p>\n    <h4 class=\"bold-maroon\">Products table (Parent Table):</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PRODUCT_ID</th>\n                <th>CATEGORY_ID</th>\n                <th>PRODUCT_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>1</td>\n                <td>Speakers</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>1</td>\n                <td>Mouse</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>2</td>\n                <td>Keyboard</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">OrderDetails table (Child Table):</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORDER_ID</th>\n                <th>PRODUCT_ID</th>\n                <th>CATEGORY_ID</th>\n                <th>QUANTITY</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>101</td>\n                <td>1</td>\n                <td>1</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>101</td>\n                <td>2</td>\n                <td>1</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>102</td>\n                <td>3</td>\n                <td>2</td>\n                <td>3</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">SQL to create the tables with a multi-column foreign key:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> products <span class=\"SQLKeyword\">(</span>\n    product_id   <span class=\"SQLKeyword\">INT</span>,\n    category_id  <span class=\"SQLKeyword\">INT</span>,\n    product_name VARCHAR<span class=\"SQLKeyword\">(</span>50<span class=\"SQLKeyword\">)</span>,\n    <span class=\"SQLKeyword\">PRIMARY KEY</span> <span class=\"SQLKeyword\">(</span> product_id,\n                  category_id <span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">CREATE TABLE</span> orderdetails <span class=\"SQLKeyword\">(</span>\n    order_id    <span class=\"SQLKeyword\">INT</span>,\n    product_id  <span class=\"SQLKeyword\">INT</span>,\n    category_id <span class=\"SQLKeyword\">INT</span>,\n    quantity    <span class=\"SQLKeyword\">INT</span>,\n    <span class=\"SQLKeyword\">FOREIGN KEY</span> <span class=\"SQLKeyword\">(</span> product_id,\n               category_id <span class=\"SQLKeyword\">)</span>\n      <span class=\"SQLKeyword\">REFERENCES</span> products <span class=\"SQLKeyword\">(</span> product_id,\n                           category_id <span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">How Foreign Keys Maintain Referential Integrity</h4>\n    <p>Foreign keys maintain referential integrity by ensuring the following rules:</p>\n    <ol>\n        <li><strong>Insertion Rule:</strong> You cannot insert a value into the foreign key column(s) of the child table that does not exist in the primary key column(s) of the parent table. This prevents orphan records.</li>\n        <li><strong>Deletion Rule:</strong> You cannot delete a record from the parent table if there are matching records in the child table, unless you use a cascading delete or set null option.</li>\n        <li><strong>Update Rule:</strong> You cannot update the primary key of a parent table if there are matching records in the child table, unless you use a cascading update.</li>\n    </ol>\n    <p>These rules ensure that the relationships between tables remain consistent and that the data integrity is preserved.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 170,
    "Question": "How would you count the number of rows in a table?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>To count the number of rows in a table in Oracle SQL, you can use the \"COUNT\" function in a \"SELECT\" statement. The \"COUNT(*)\" function is commonly used for this purpose as it counts all rows in the table.</p>\n    <h4 class=\"bold-maroon\">Basic Example:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">COUNT</span><span class=\"SQLKeyword\">(</span>*<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">FROM</span> Customers<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Example with Detailed Steps</h4>\n    <p>Assume we have the following table <strong>Customers</strong>:</p>\n    <h4 class=\"bold-maroon\">CUSTOMERS Table:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_ID</th>\n                <th>CUSTOMER_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Alice</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Bob</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Charlie</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>NULL</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <h4 class=\"bold-maroon\">SQL to count all rows in the table:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">COUNT</span><span class=\"SQLKeyword\">(</span>*<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">FROM</span> Customers<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n            <p><strong>Output:</strong></p>\n            <div class=\"scrollable-container\">\n    <table class=\"tg\">\n                <thead>\n                    <tr>\n                        <th>COUNT(*)</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr class=\"input-row-even\">\n                        <td>4</td>\n                    </tr>\n                </tbody>\n                    </table>\n    </div>\n    <h4 class=\"bold-maroon\">SQL to count rows that meet a specific condition:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">COUNT</span><span class=\"SQLKeyword\">(</span>*<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">FROM</span> Customers\n<span class=\"SQLKeyword\">WHERE</span> customer_name <span class=\"SQLKeyword\">LIKE</span> <span class=\"SQLString\">'A%'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n            <p><strong>Output:</strong></p>\n            <div class=\"scrollable-container\">\n    <table class=\"tg\">\n                <thead>\n                    <tr>\n                        <th>COUNT(*)</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr class=\"input-row-even\">\n                        <td>1</td>\n                    </tr>\n                </tbody>\n                    </table>\n    </div>\n    <h4 class=\"bold-maroon\">SQL to count non-NULL values in a specific column:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">COUNT</span><span class=\"SQLKeyword\">(</span>customer_name<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">FROM</span> Customers<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n            <p><strong>Output:</strong></p>\n            <div class=\"scrollable-container\">\n    <table class=\"tg\">\n                <thead>\n                    <tr>\n                        <th>COUNT(customer_name)</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr class=\"input-row-even\">\n                        <td>3</td>\n                    </tr>\n                </tbody>\n                    </table>\n    </div>\n    <h4 class=\"bold-maroon\">Important Notes</h4>\n    <ul>\n        <li><strong>COUNT(*)</strong> counts all rows, including those with NULL values in any column.</li>\n        <li><strong>COUNT(column_name)</strong> counts only the rows where the specified column is not NULL.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 171,
    "Question": "What is the difference between COUNT(*), COUNT(1), and COUNT(ROWID) in Oracle?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In Oracle SQL, \"COUNT(*)\", \"COUNT(1)\", and \"COUNT(ROWID)\" are often used to count the number of rows in a table, but they have subtle differences and usage contexts. Here is a detailed explanation of each:</p>\n    <h4 class=\"bold-maroon\">COUNT(*)</h4>\n    <p><strong>Description:</strong> Counts all rows in a table, including rows with \"NULL\" values in any columns.</p>\n    <p><strong>Performance:</strong> Internally optimized by Oracle and generally considered the standard way to count rows.</p>\n    <p><strong>Usage:</strong> Used when you want to count all rows without concern for column values.</p>\n    <h4 class=\"bold-maroon\">Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">COUNT</span><span class=\"SQLKeyword\">(</span>*<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">FROM</span> Customers<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">COUNT(1)</h4>\n    <p><strong>Description:</strong> Counts all rows in a table. The value \"1\" is a constant and does not reference any column in the table.</p>\n    <p><strong>Performance:</strong> Functionally equivalent to \"COUNT(*)\" as it also counts all rows. Oracle optimizes this query similarly to \"COUNT(*)\".</p>\n    <p><strong>Usage:</strong> Often used interchangeably with \"COUNT(*)\". It can be seen as a style preference.</p>\n    <h4 class=\"bold-maroon\">Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">COUNT</span><span class=\"SQLKeyword\">(</span>1<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">FROM</span> Customers<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">COUNT(ROWID)</h4>\n    <p><strong>Description:</strong> Counts all rows by counting the \"ROWID\" values. \"ROWID\" is a unique identifier for each row in a table.</p>\n    <p><strong>Performance:</strong> May have similar performance to \"COUNT(*)\" and \"COUNT(1)\", but it explicitly uses the \"ROWID\" pseudo-column.</p>\n    <p><strong>Usage:</strong> Useful when you want to explicitly reference \"ROWID\". It can be slightly faster in some contexts as \"ROWID\" is a unique identifier directly tied to the physical storage of the row.</p>\n    <h4 class=\"bold-maroon\">Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">COUNT</span><span class=\"SQLKeyword\">(</span>ROWID<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">FROM</span> Customers<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Comparison and Performance</h4>\n    <ol>\n        <li><strong>Functional Equivalence:</strong>\n            <ul>\n                <li>\"COUNT(*)\" and \"COUNT(1)\" are functionally equivalent. They count all rows in the table, including rows with NULL values.</li>\n                <li>\"COUNT(ROWID)\" is also functionally similar as every row has a unique \"ROWID\".</li>\n            </ul>\n        </li>\n        <li><strong>Performance:</strong>\n            <ul>\n                <li>Generally, there is no significant performance difference between \"COUNT(*)\", \"COUNT(1)\", and \"COUNT(ROWID)\" in Oracle. Oracle's optimizer treats \"COUNT(*)\" and \"COUNT(1)\" the same way.</li>\n                <li>\"COUNT(ROWID)\" might be marginally faster in some cases as it directly references the physical address of the rows, but this difference is usually negligible.</li>\n            </ul>\n        </li>\n    </ol>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 172,
    "Question": "How can you remove duplicates from a result set without using the DISTINCT keyword?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n    </style>\n</head>\n<body>\n    <p>To remove duplicates from a result set without using the <code>DISTINCT</code> keyword, you can use the <code>GROUP BY</code> clause. When you group by all the columns or a single column you are selecting, the result set will contain only unique combinations of those columns.</p>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><strong>GROUP BY Clause:</strong> The <code>GROUP BY</code> clause groups the result set by the specified columns. This means that rows with the same values in the grouped columns are combined into a single row in the result set.</li>\n        <li><strong>Selected Columns:</strong> When you select columns and group by those same columns, Oracle SQL will return unique combinations of the selected columns.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Example Data:</h4>\n    <p>Let's assume you have the following data in the <code>customers</code> table:</p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_NAME</th>\n                <th>DRIVER_LICENSE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>Brad</td>\n                <td>ABC123</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>Angelina</td>\n                <td>XYZ789</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>Brad</td>\n                <td>ABC123</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>Scarlett</td>\n                <td>DEF456</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>Angelina</td>\n                <td>XYZ789</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">SQL Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> customer_name, driver_license\n<span class=\"SQLKeyword\">FROM</span> customers\n<span class=\"SQLKeyword\">GROUP BY</span> customer_name, driver_license<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_NAME</th>\n                <th>DRIVER_LICENSE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>Brad</td>\n                <td>ABC123</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>Angelina</td>\n                <td>XYZ789</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>Scarlett</td>\n                <td>DEF456</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <p>This query removes duplicates from the result set by grouping the rows based on the <code>customer_name</code> and <code>driver_license</code> columns, ensuring that only unique combinations of these columns are returned.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 173,
    "Question": "What are the implications of using indexes on database performance?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Using indexes in an Oracle database can significantly impact performance, both positively and negatively. Here are the key implications:</p>\n    <h4 class=\"bold-maroon\">1. Faster Query Performance:</h4>\n    <ul>\n        <li><strong>Improved Retrieval:</strong> Indexes can speed up the retrieval of data by allowing the database to quickly locate rows that satisfy certain conditions, especially in large tables.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">2. Slower Write Operations:</h4>\n    <ul>\n        <li><strong>Insert, Update, Delete:</strong> Indexes need to be updated whenever the data in the table is modified. This can slow down \"INSERT\", \"UPDATE\", and \"DELETE\" operations, as the database has to maintain the indexes as well as the table data.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">3. Increased Storage Requirements:</h4>\n    <ul>\n        <li>Indexes require additional storage space. Each index occupies disk space, which can be significant for large tables or when many indexes are created.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">4. Maintenance Overhead:</h4>\n    <ul>\n        <li><strong>Rebuilding and Reorganizing:</strong> Indexes may require periodic maintenance, such as rebuilding or reorganizing, to ensure optimal performance. This can be time-consuming and resource-intensive.</li>\n        <li><strong>Statistics Gathering:</strong> The database must gather and maintain statistics on indexes to help the optimizer make informed decisions about query execution plans. This process can add overhead.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">5. Complexity in Query Tuning:</h4>\n    <ul>\n        <li><strong>Choosing the Right Index:</strong> Creating the wrong type of index or creating too many indexes can actually degrade performance. Careful analysis and understanding of query patterns are necessary to choose the most effective indexing strategy.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 174,
    "Question": "What are the challenges of managing large databases, and how can Oracle help?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Managing large databases presents several challenges, including performance issues, storage management, backup and recovery, security, and data consistency. Oracle SQL offers various features and tools to address these challenges effectively. Here's an overview of the challenges and how Oracle SQL can help:</p>\n    <h4 class=\"bold-maroon\">Challenges of Managing Large Databases:</h4>\n    <h4 class=\"bold-maroon\">1. Performance Issues:</h4>\n    <ul>\n        <li><strong>Slow Query Performance:</strong> As databases grow, queries can become slower due to the increased volume of data.</li>\n        <li><strong>Index Management:</strong> Managing indexes for large datasets can become complex and resource-intensive.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">2. Storage Management:</h4>\n    <ul>\n        <li><strong>Space Utilization:</strong> Efficiently using storage space and avoiding wastage.</li>\n        <li><strong>Data Archiving:</strong> Managing old data and archiving it without affecting database performance.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">3. Backup and Recovery:</h4>\n    <ul>\n        <li><strong>Large Backups:</strong> Backing up large databases can be time-consuming and resource-intensive.</li>\n        <li><strong>Recovery Time:</strong> Ensuring quick recovery times in case of failure.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">4. Security:</h4>\n    <ul>\n        <li><strong>Access Control:</strong> Managing and enforcing fine-grained access control for large numbers of users.</li>\n        <li><strong>Data Encryption:</strong> Protecting sensitive data through encryption without compromising performance.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">5. Data Consistency:</h4>\n    <ul>\n        <li><strong>Concurrency Control:</strong> Managing simultaneous access and modifications to ensure data consistency.</li>\n        <li><strong>Data Integrity:</strong> Ensuring data integrity constraints are maintained as the database grows.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">How Oracle Helps:</h4>\n    <h4 class=\"bold-maroon\">1. Performance Optimization</h4>\n    <ul>\n        <li><strong>Indexes:</strong> Oracle SQL allows you to create and manage indexes to improve query performance. By indexing columns that are frequently used in search conditions, join operations, and sorting, you can significantly speed up data retrieval. Partitioned indexes can be used for large tables to manage and query subsets of data more efficiently.</li>\n        <li><strong>Query Optimization:</strong> Oracle's query optimizer generates efficient execution plans for SQL statements. It can use hints to guide the optimizer to use specific indexes or join methods, improving query performance. The optimizer analyzes the query structure and the underlying data to determine the most efficient way to execute the query.</li>\n        <li><strong>Materialized Views:</strong> Materialized views in Oracle SQL store precomputed results of complex queries. They are especially useful for summarizing large amounts of data, enabling faster retrieval by avoiding the need to recompute the results for each query execution.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">2. Storage Management</h4>\n    <ul>\n        <li><strong>Partitioning:</strong> Partitioning large tables into smaller, more manageable pieces can improve query performance and ease management. Oracle SQL supports various partitioning strategies such as range, list, and hash partitioning, allowing you to organize data based on specific criteria.</li>\n        <li><strong>Compression:</strong> Oracle SQL provides table compression features to save storage space and improve I/O performance. Compression reduces the amount of disk space used by tables and can also enhance performance by reducing the amount of data that needs to be read from or written to disk.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">3. Backup and Recovery</h4>\n    <ul>\n        <li><strong>RMAN (Recovery Manager):</strong> RMAN is Oracle's robust tool for backing up and recovering databases. It provides efficient and reliable backup solutions, allowing for point-in-time recovery, incremental backups, and automated backup scheduling. RMAN ensures that backups are consistent and can be quickly restored in case of a failure.</li>\n        <li><strong>Data Pump:</strong> Oracle Data Pump is a high-speed data movement tool used for exporting and importing database objects and data. It is particularly useful for transferring large volumes of data between databases, performing database migrations, and creating backups.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">4. Security</h4>\n    <ul>\n        <li><strong>Fine-Grained Access Control:</strong> Oracle's Virtual Private Database (VPD) allows for fine-grained access control at the row level. Security policies can be enforced to ensure that users only access the data they are authorized to see, enhancing data security and compliance.</li>\n        <li><strong>Encryption:</strong> Transparent Data Encryption (TDE) in Oracle SQL protects sensitive data by encrypting it at the storage level. TDE ensures that data is secure both at rest and during transport, helping to meet regulatory requirements and prevent unauthorized access.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">5. Data Consistency</h4>\n    <ul>\n        <li><strong>Concurrency Control:</strong> Oracle's Multi-Version Concurrency Control (MVCC) handles concurrent data access and modifications efficiently. MVCC provides consistent read views for queries and allows for high levels of concurrency without locking data, which helps in maintaining data consistency in multi-user environments.</li>\n        <li><strong>Data Integrity:</strong> Oracle SQL supports various data integrity constraints such as primary keys, foreign keys, and unique constraints. These constraints ensure the accuracy and consistency of data within the database by enforcing rules for data entry and relationships between tables.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 175,
    "Question": "Explain the different isolation levels in database transactions.",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Isolation levels in database transactions determine how visible changes made by other concurrent transactions are to a transaction. In Oracle, these isolation levels help balance data consistency and system performance. Here are the different isolation levels supported by Oracle and their brief explanations:</p>\n    <h4 class=\"bold-maroon\">1. Read Committed</h4>\n    <ul>\n        <li><strong>Default Isolation Level:</strong> This is the default isolation level in Oracle.</li>\n        <li><strong>Behavior:</strong> A query only sees committed data and does not see uncommitted changes made by other transactions.</li>\n        <li><strong>Implications:</strong>\n            <ul>\n                <li><strong>Prevents Dirty Reads:</strong> Transactions do not see uncommitted changes from other transactions.</li>\n                <li><strong>Allows Non-Repeatable Reads:</strong> The data returned by a query may change if the same query is executed multiple times due to other transactions committing changes in between.</li>\n                <li><strong>Allows Phantom Reads:</strong> New rows inserted by other transactions may be visible if the same query is executed multiple times.</li>\n            </ul>\n        </li>\n        <li><strong>Use Case:</strong> Suitable for environments where maintaining a balance between data consistency and concurrency is important.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">2. Serializable</h4>\n    <ul>\n        <li><strong>Strict Isolation Level:</strong> This level provides the highest isolation by ensuring transactions are fully isolated from each other.</li>\n        <li><strong>Behavior:</strong> Each transaction behaves as if it is the only one operating on the system.</li>\n        <li><strong>Implications:</strong>\n            <ul>\n                <li><strong>Prevents Dirty Reads, Non-Repeatable Reads, and Phantom Reads:</strong> Ensures complete isolation and data consistency.</li>\n                <li><strong>Reduced Concurrency:</strong> This isolation level can significantly limit concurrent access, leading to higher contention and wait times.</li>\n            </ul>\n        </li>\n        <li><strong>Use Case:</strong> Ideal for scenarios where data integrity and consistency are paramount.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">3. Read-Only</h4>\n    <ul>\n        <li><strong>Special Isolation Level:</strong> This level is intended for transactions that do not modify data.</li>\n        <li><strong>Behavior:</strong> A transaction sees only committed data as of the time the transaction began.</li>\n        <li><strong>Implications:</strong>\n            <ul>\n                <li><strong>Ensures Consistent Read Operations:</strong> Suitable for long-running queries or reports that need a consistent view of the data without any changes during the transaction.</li>\n            </ul>\n        </li>\n        <li><strong>Use Case:</strong> Perfect for reporting or analytical queries that require consistent data without modification.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">4. Read Uncommitted (Not Supported in Oracle)</h4>\n    <p>Oracle does not support the \"Read Uncommitted\" isolation level, which allows queries to see uncommitted changes made by other transactions (known as \"dirty reads\"). This level is available in some other database systems but is not implemented in Oracle due to its potential to cause data inconsistency.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 176,
    "Question": "How can you effectively handle date and time data in SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Effectively handling date and time data in Oracle SQL involves understanding the various data types and functions available for date and time manipulation. Here's a guide on how to work with date and time data in Oracle SQL:</p>\n    <h4 class=\"bold-maroon\">Date and Time Data Types:</h4>\n    <h4 class=\"bold-maroon\">1. DATE:</h4>\n    <ul>\n        <li>Stores date and time information (year, month, day, hour, minute, second).</li>\n        <li>Default format: \"DD-MON-YY\" (e.g., \"01-JAN-21\").</li>\n    </ul>\n    <h4 class=\"bold-maroon\">2. TIMESTAMP:</h4>\n    <ul>\n        <li>Stores date and time information with fractional seconds.</li>\n        <li>Can have a precision up to 9 decimal places for seconds.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">3. TIMESTAMP WITH TIME ZONE:</h4>\n    <ul>\n        <li>Stores date and time information with a time zone offset.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">4. TIMESTAMP WITH LOCAL TIME ZONE:</h4>\n    <ul>\n        <li>Stores date and time information, normalized to the database time zone.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Retrieving and Formatting Date and Time Data:</h4>\n    <h4 class=\"bold-maroon\">1. Retrieving and Formatting DATE:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n       <span class=\"SQLFunction\">TO_CHAR</span><span class=\"SQLKeyword\">(</span>sysdate, <span class=\"SQLString\">'YYYY-MM-DD'</span><span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> formatted_date\n   <span class=\"SQLKeyword\">FROM</span>\n       dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">2. Formatting TIMESTAMP:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n<span class=\"SQLFunction\">TO_CHAR</span><span class=\"SQLKeyword\">(</span>systimestamp, <span class=\"SQLString\">'YYYY-MM-DD HH24:MI:SS.FF'</span><span class=\"SQLKeyword\">)</span> \n    <span class=\"SQLKeyword\">AS</span> formatted_timestamp\n<span class=\"SQLKeyword\">FROM</span>\ndual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Date and Time Functions:</h4>\n    <h4 class=\"bold-maroon\">1. Current Date and Time:</h4>\n    <ul>\n        <li><strong>SYSDATE:</strong> Returns the current date and time of the database server.</li>\n        <li><strong>SYSTIMESTAMP:</strong> Returns the current timestamp with fractional seconds of the database server.</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n       sysdate,\n       systimestamp\n   <span class=\"SQLKeyword\">FROM</span>\n       dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">2. Date Arithmetic:</h4>\n    <ul>\n        <li><strong>Adding/Subtracting Days:</strong></li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n         sysdate + 7 <span class=\"SQLKeyword\">AS</span> one_week_later\n     <span class=\"SQLKeyword\">FROM</span>\n         dual<span class=\"SQLComment\">;  -- Adds 7 days</span>\n     <span class=\"SQLKeyword\">SELECT</span>\n         sysdate - 7 <span class=\"SQLKeyword\">AS</span> one_week_earlier\n     <span class=\"SQLKeyword\">FROM</span>\n         dual<span class=\"SQLComment\">;  -- Subtracts 7 days</span>\n</pre>\n</div>\n    <ul>\n        <li><strong>Date Difference:</strong></li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">DATE</span> <span class=\"SQLString\">'2024-07-23'</span> - <span class=\"SQLFunction\">DATE</span> <span class=\"SQLString\">'2024-07-01'</span> <span class=\"SQLKeyword\">AS</span> days_difference\n     <span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLComment\">;  -- Result: 22</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">3. Extracting Components:</h4>\n    <ul>\n        <li>Extract specific components (year, month, day, hour, minute, second) from a date or timestamp:</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">EXTRACT</span><span class=\"SQLKeyword\">(</span>YEAR <span class=\"SQLKeyword\">FROM</span> SYSDATE<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> year,\n            <span class=\"SQLFunction\">EXTRACT</span><span class=\"SQLKeyword\">(</span>MONTH <span class=\"SQLKeyword\">FROM</span> SYSDATE<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> month,\n            <span class=\"SQLFunction\">EXTRACT</span><span class=\"SQLKeyword\">(</span>DAY <span class=\"SQLKeyword\">FROM</span> SYSDATE<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> day\n     <span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">4. Truncating Dates:</h4>\n    <ul>\n        <li>Truncate date to the beginning of a specified unit (e.g., month, year):</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">TRUNC</span><span class=\"SQLKeyword\">(</span>SYSDATE, <span class=\"SQLString\">'MM'</span><span=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> first_day_of_month\n     <span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLComment\">;  -- First day of the current month</span>\n     <span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">TRUNC</span><span class=\"SQLKeyword\">(</span>SYSDATE, <span class=\"SQLString\">'YYYY'</span><span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> first_day_of_year\n     <span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLComment\">;  -- First day of the current year</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Handling Time Zones:</h4>\n    <h4 class=\"bold-maroon\">1. Converting Time Zones:</h4>\n    <ul>\n        <li>Convert between different time zones using \"FROM_TZ\" and \"AT TIME ZONE\":</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">FROM_TZ</span><span class=\"SQLKeyword\">(</span><span class=\"SQLKeyword\">CAST</span><span class=\"SQLKeyword\">(</span>SYSDATE <span class=\"SQLKeyword\">AS</span> TIMESTAMP<span class=\"SQLKeyword\">)</span>, <span class=\"SQLString\">'UTC'</span><span class=\"SQLKeyword\">)</span> \n    <span class=\"SQLKeyword\">AT TIME ZONE</span> <span class=\"SQLString\">'US/Eastern'</span> <span class=\"SQLKeyword\">AS</span> est_time\n     <span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 177,
    "Question": "What is the purpose of the ROLLUP and CUBE functions in SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>The \"ROLLUP\" and \"CUBE\" functions in SQL are used to generate aggregate reports that provide different levels of summarization. These functions are particularly useful in data warehousing and reporting scenarios, where multi-level summaries are often required.</p>\n    <h4 class=\"bold-maroon\">ROLLUP Function:</h4>\n    <h4 class=\"bold-blue\">Purpose:</h4>\n    <p>The \"ROLLUP\" function creates subtotals that roll up from the most detailed level to a grand total. It helps generate hierarchical aggregations of data, which can be useful for reports that need subtotals at multiple levels.</p>\n    <h4 class=\"bold-blue\">Example:</h4>\n    <p>Consider a \"SALES\" table with columns \"region\", \"product\", and \"sales_amount\".</p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>REGION</th>\n                <th>PRODUCT</th>\n                <th>SALES_AMOUNT</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>North</td>\n                <td>A</td>\n                <td>100</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>North</td>\n                <td>B</td>\n                <td>150</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>South</td>\n                <td>A</td>\n                <td>200</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>South</td>\n                <td>B</td>\n                <td>250</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">SQL Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> region, product, <span class=\"SQLFunction\">SUM</span><span class=\"SQLKeyword\">(</span>sales_amount<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> total_sales\n<span class=\"SQLKeyword\">FROM</span> sales\n<span class=\"SQLKeyword\">GROUP BY ROLLUP</span> <span class=\"SQLKeyword\">(</span>region, product<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>REGION</th>\n                <th>PRODUCT</th>\n                <th>TOTAL_SALES</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>North</td>\n                <td>A</td>\n                <td>100</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>North</td>\n                <td>B</td>\n                <td>150</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>North</td>\n                <td>NULL</td>\n                <td>250</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>South</td>\n                <td>A</td>\n                <td>200</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>South</td>\n                <td>B</td>\n                <td>250</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>South</td>\n                <td>NULL</td>\n                <td>450</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>NULL</td>\n                <td>NULL</td>\n                <td>700</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">Explanation:</h4>\n    <ul>\n        <li>The query provides subtotals for each region and a grand total.</li>\n        <li>\"NULL\" values represent subtotal and grand total rows.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">CUBE Function</h4>\n    <h4 class=\"bold-blue\">Purpose:</h4>\n    <p>The \"CUBE\" function generates a result set that shows aggregations for all possible combinations of the specified columns. It is used to produce cross-tabulation reports that include subtotals for every combination of columns.</p>\n    <h4 class=\"bold-maroon\">Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> region, product, <span class=\"SQLFunction\">SUM</span><span class=\"SQLKeyword\">(</span>sales_amount<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> total_sales\n<span class=\"SQLKeyword\">FROM</span> sales\n<span class=\"SQLKeyword\">GROUP BY CUBE</span> <span class=\"SQLKeyword\">(</span>region, product<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>REGION</th>\n                <th>PRODUCT</th>\n                <th>TOTAL_SALES</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>North</td>\n                <td>A</td>\n                <td>100</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>North</td>\n                <td>B</td>\n                <td>150</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>North</td>\n                <td>NULL</td>\n                <td>250</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>South</td>\n                <td>A</td>\n                <td>200</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>South</td>\n                <td>B</td>\n                <td>250</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>South</td>\n                <td>NULL</td>\n                <td>450</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>NULL</td>\n                <td>A</td>\n                <td>300</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>NULL</td>\n                <td>B</td>\n                <td>400</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>NULL</td>\n                <td>NULL</td>\n                <td>700</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">Explanation:</h4>\n    <ul>\n        <li>The \"CUBE\" function generates all possible subtotals:\n            <ul>\n                <li>Totals for each region and product combination.</li>\n                <li>Subtotals for each region across all products.</li>\n                <li>Subtotals for each product across all regions.</li>\n                <li>A grand total.</li>\n            </ul>\n        </li>\n    </ul>\n    <h4 class=\"bold-blue\">Use Cases</h4>\n    <ul>\n        <li><strong>ROLLUP:</strong> Useful for hierarchical data where subtotals are needed at each level of the hierarchy (e.g., quarterly sales within a year, then yearly sales).</li>\n        <li><strong>CUBE:</strong> Ideal for multi-dimensional analysis where aggregations are needed across all combinations of dimensions (e.g., total sales by product, by region, and overall).</li>\n    </ul>\n    <p>By using \"ROLLUP\" and \"CUBE\", the process of generating complex aggregate reports is simplified, providing insightful summaries that assist in making informed business decisions.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 178,
    "Question": "How would you use SQL to resolve a many-to-many relationship in a database schema?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Resolving a many-to-many relationship in a database schema involves creating an intermediary (junction) table that breaks the many-to-many relationship into two one-to-many relationships. This junction table contains foreign keys referencing the primary keys of the two tables involved in the many-to-many relationship. Here's how to achieve this:</p>\n    <h4 class=\"bold-maroon\">Steps to Resolve a Many-to-Many Relationship</h4>\n    <h4 class=\"bold-blue\">1. Identify the Many-to-Many Relationship:</h4>\n    <p>Determine the two or more tables that have a many-to-many relationship.</p>\n    <h4 class=\"bold-blue\">2. Create the Junction Table:</h4>\n    <p>Create a new table that will act as the intermediary, containing foreign keys that reference the primary keys of the two tables.</p>\n    <h4 class=\"bold-blue\">Example Scenario</h4>\n    <p>Assume there is a many-to-many relationship between \"students\" and \"courses\", where a student can enroll in many courses, and a course can have many students.</p>\n    <h4 class=\"bold-blue\">Tables:</h4>\n    <h4 class=\"bold-maroon\">STUDENTS:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> students <span class=\"SQLKeyword\">(</span>\n      student_id INT <span class=\"SQLKeyword\">PRIMARY KEY</span>,\n      student_name VARCHAR<span class=\"SQLKeyword\">(</span>50<span class=\"SQLKeyword\">)</span>\n  <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">COURSES:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> courses <span class=\"SQLKeyword\">(</span>\n      course_id INT <span class=\"SQLKeyword\">PRIMARY KEY</span>,\n      course_name VARCHAR<span class=\"SQLKeyword\">(</span>50<span class=\"SQLKeyword\">)</span>\n  <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Step 1: Create the Junction Table</h4>\n    <h4 class=\"bold-blue\">Enrollments (Junction Table):</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> enrollments <span class=\"SQLKeyword\">(</span>\n      enrollment_id INT <span class=\"SQLKeyword\">PRIMARY KEY</span>,\n      student_id INT,\n      course_id INT,\n      <span class=\"SQLKeyword\">FOREIGN KEY</span> <span class=\"SQLKeyword\">(</span>student_id<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">REFERENCES</span> students<span class=\"SQLKeyword\">(</span>student_id<span class=\"SQLKeyword\">)</span>,\n      <span class=\"SQLKeyword\">FOREIGN KEY</span> <span class=\"SQLKeyword\">(</span>course_id<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">REFERENCES</span> courses<span class=\"SQLKeyword\">(</span>course_id<span class=\"SQLKeyword\">)</span>\n  <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Step 2: Populate the Junction Table</h4>\n    <h4 class=\"bold-maroon\">Insert data into the \"STUDENTS\" Table:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">INSERT INTO</span> students <span class=\"SQLKeyword\">(</span>\n      student_id,\n      student_name\n  <span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>\n      1,\n      <span class=\"SQLString\">'Tom'</span>\n  <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n  <span class=\"SQLKeyword\">INSERT INTO</span> students <span class=\"SQLKeyword\">(</span>\n      student_id,\n      student_name\n  <span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>\n      2,\n      <span class=\"SQLString\">'Devi'</span>\n  <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Insert data into the \"COURSES\" Table:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">INSERT INTO</span> courses <span class=\"SQLKeyword\">(</span>\n      course_id,\n      course_name\n  <span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>\n      101,\n      <span class=\"SQLString\">'Math'</span>\n  <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n  <span class=\"SQLKeyword\">INSERT INTO</span> courses <span class=\"SQLKeyword\">(</span>\n      course_id,\n      course_name\n  <span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>\n      102,\n      <span class=\"SQLString\">'Science'</span>\n  <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Insert data into the \"ENROLLMENTS\" Table:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">INSERT INTO</span> enrollments <span class=\"SQLKeyword\">(</span>\n      enrollment_id,\n      student_id,\n      course_id\n  <span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>\n      1,\n      1,\n      101\n  <span class=\"SQLKeyword\">)</span><span class=\"SQLComment\">; -- Tom enrolls in Math</span>\n  <span class=\"SQLKeyword\">INSERT INTO</span> enrollments <span class=\"SQLKeyword\">(</span>\n      enrollment_id,\n      student_id,\n      course_id\n  <span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>\n      2,\n      1,\n      102\n  <span class=\"SQLKeyword\">)</span><span class=\"SQLComment\">; -- Tom enrolls in Science</span>\n  <span class=\"SQLKeyword\">INSERT INTO</span> enrollments <span class=\"SQLKeyword\">(</span>\n      enrollment_id,\n      student_id,\n      course_id\n  <span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>\n      3,\n      2,\n      101\n  <span class=\"SQLKeyword\">)</span><span class=\"SQLComment\">; -- Devi enrolls in Math</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Step 3: Query the Data</h4>\n    <h4 class=\"bold-maroon\">Get all courses a student is enrolled in:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n      s.student_name,\n      c.course_name\n  <span class=\"SQLKeyword\">FROM</span>\n           students s\n      <span class=\"SQLKeyword\">JOIN</span> enrollments e <span class=\"SQLKeyword\">ON</span> s.student_id = e.student_id\n      <span class=\"SQLKeyword\">JOIN</span> courses     c <span class=\"SQLKeyword\">ON</span> e.course_id = c.course_id\n  <span class=\"SQLKeyword\">WHERE</span>\n      s.student_name = <span class=\"SQLString\">'Tom'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>STUDENT_NAME</th>\n                <th>COURSE_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>Tom</td>\n                <td>Math</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>Tom</td>\n                <td>Science</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Get all students enrolled in a course:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n      c.course_name,\n      s.student_name\n  <span class=\"SQLKeyword\">FROM</span>\n           courses c\n      <span class=\"SQLKeyword\">JOIN</span> enrollments e <span class=\"SQLKeyword\">ON</span> c.course_id = e.course_id\n      <span class=\"SQLKeyword\">JOIN</span> students    s <span class=\"SQLKeyword\">ON</span> e.student_id = s.student_id\n  <span class=\"SQLKeyword\">WHERE</span>\n      c.course_name = <span class=\"SQLString\">'Math'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>COURSE_NAME</th>\n                <th>STUDENT_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>Math</td>\n                <td>Tom</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>Math</td>\n                <td>Devi</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Summary</h4>\n    <p>By creating the \"enrollments\" junction table, the many-to-many relationship between \"students\" and \"courses\" is resolved into two one-to-many relationships. This approach ensures data integrity and allows efficient querying of the relationships between students and courses.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 179,
    "Question": "How would you design a database for a multi-tenant application using Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight:bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Designing a database for a multi-tenant application involves considering how to effectively manage and isolate data for different tenants while ensuring scalability, performance, and maintainability. Here's a theoretical breakdown of the approach, focusing on key aspects and options available in Oracle SQL.</p>\n    <h4 class=\"bold-maroon\">Multi-Tenant Database Design Approaches</h4>\n    <h4 class=\"bold-blue\">1. Shared Database, Shared Schema:</h4>\n    <p>All tenants share the same database and the same set of tables. Tenant data is distinguished using a \"tenant_id\" column in each table.</p>\n    <h4 class=\"bold-blue\">2. Shared Database, Separate Schema:</h4>\n    <p>All tenants share the same database, but each tenant has their own schema. This provides better isolation but increases the complexity of schema management.</p>\n    <h4 class=\"bold-blue\">3. Separate Database:</h4>\n    <p>Each tenant has their own database. This approach provides the highest level of isolation but can be more costly and complex to manage.</p>\n    <h4 class=\"bold-maroon\">Approach: Shared Database, Shared Schema</h4>\n    <p>This approach is the most common for SaaS applications due to its balance between resource efficiency and isolation.</p>\n    <h4 class=\"bold-maroon\">Key Considerations:</h4>\n    <h4 class=\"bold-blue\">1. Tenant Identification:</h4>\n    <p>Every table includes a \"tenant_id\" column to identify the tenant to which the data belongs.</p>\n    <h4 class=\"bold-blue\">2. Security:</h4>\n    <p>Implement row-level security to ensure tenants can only access their data. Use Oracle's Virtual Private Database (VPD) to enforce security policies.</p>\n    <h4 class=\"bold-blue\">3. Performance Optimization:</h4>\n    <p>Use partitioning to improve performance and manageability. Consider indexing strategies that optimize access patterns specific to tenants.</p>\n    <h4 class=\"bold-blue\">4. Scalability:</h4>\n    <p>Design the schema to allow easy addition of new tenants. Monitor resource utilization to ensure adequate capacity for tenant growth.</p>\n    <h4 class=\"bold-blue\">5. Data Isolation:</h4>\n    <p>Ensure logical data separation and isolation by using tenant-specific keys and constraints.</p>\n    <h4 class=\"bold-blue\">Example Schema Design</h4>\n    <h4 class=\"bold-maroon\">1. USERS Table:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> users <span class=\"SQLKeyword\">(</span>\n       user_id INT <span class=\"SQLKeyword\">PRIMARY KEY</span>,\n       tenant_id INT,\n       username VARCHAR<span class=\"SQLKeyword\">(</span>50<span class=\"SQLKeyword\">)</span>,\n       <span class=\"SQLKeyword\">FOREIGN KEY</span> <span class=\"SQLKeyword\">(</span>tenant_id<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">REFERENCES</span> tenants<span class=\"SQLKeyword\">(</span>tenant_id<span class=\"SQLKeyword\">)</span>\n   <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">2. TENANTS Table:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> tenants <span class=\"SQLKeyword\">(</span>\n       tenant_id INT <span class=\"SQLKeyword\">PRIMARY KEY</span>,\n       tenant_name VARCHAR<span class=\"SQLKeyword\">(</span>100<span class=\"SQLKeyword\">)</span>\n   <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">3. ORDERS Table:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> orders <span class=\"SQLKeyword\">(</span>\n       order_id INT <span class=\"SQLKeyword\">PRIMARY KEY</span>,\n       tenant_id INT,\n       order_date DATE,\n       amount NUMBER,\n       <span class=\"SQLKeyword\">FOREIGN KEY</span> <span class=\"SQLKeyword\">(</span>tenant_id<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">REFERENCES</span> tenants<span class=\"SQLKeyword\">(</span>tenant_id<span class=\"SQLKeyword\">)</span>\n   <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>By following these guidelines, a robust multi-tenant database schema in Oracle SQL can be designed to ensure data isolation, security, performance, and scalability.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 180,
    "Question": "Explain how to use SQL for time-series analysis.",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Time-series analysis in Oracle SQL involves querying and analyzing data points that are indexed by time. This type of analysis is useful for various applications such as trend analysis, forecasting, and anomaly detection. Oracle SQL provides several functions and features to facilitate time-series analysis, including window functions, analytic functions, and time-related functions. Here's how to effectively use Oracle SQL for time-series analysis:</p>\n    <h4 class=\"bold-maroon\">Key Features and Functions for Time-Series Analysis</h4>\n    <h4 class=\"bold-blue\">1. Time Functions:</h4>\n    <p>Functions to handle dates and times, such as \"SYSDATE\", \"SYSTIMESTAMP\", \"ADD_MONTHS()\", \"NEXT_DAY()\", and more.</p>\n    <h4 class=\"bold-blue\">2. Window Functions:</h4>\n    <p>Analytic functions such as \"ROW_NUMBER()\", \"RANK()\", \"DENSE_RANK()\", \"LAG()\", \"LEAD()\", and \"NTILE()\" that operate on a set of rows related to the current row.</p>\n    <h4 class=\"bold-blue\">3. GROUP BY and Aggregation:</h4>\n    <p>Aggregating data over time intervals using \"GROUP BY\" with date functions.</p>\n    <h4 class=\"bold-blue\">4. Model Clause:</h4>\n    <p>Advanced SQL feature for complex time-series analysis and forecasting.</p>\n    <h4 class=\"bold-blue\">Example Data</h4>\n    <p>Assume there is a \"SALES\" table with the following structure:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> sales <span class=\"SQLKeyword\">(</span>\n    sale_id NUMBER <span class=\"SQLKeyword\">PRIMARY KEY</span>,\n    sale_date DATE,\n    sale_amount NUMBER\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Basic Time-Series Queries:</h4>\n    <h4 class=\"bold-blue\">1. Extracting Date Components:</h4>\n    <p>Extract year, month, day, etc., from the date column.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n       sale_id,\n       sale_date,\n       <span class=\"SQLFunction\">EXTRACT</span><span class=\"SQLKeyword\">(</span>YEAR <span class=\"SQLKeyword\">FROM</span> sale_date<span class=\"SQLKeyword\">)</span>  <span class=\"SQLKeyword\">AS</span> sale_year,\n       <span class=\"SQLFunction\">EXTRACT</span><span class=\"SQLKeyword\">(</span>MONTH <span class=\"SQLKeyword\">FROM</span> sale_date<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> sale_month,\n       <span class=\"SQLFunction\">EXTRACT</span><span class=\"SQLKeyword\">(</span>DAY <span class=\"SQLKeyword\">FROM</span> sale_date<span class=\"SQLKeyword\">)</span>   <span class=\"SQLKeyword\">AS</span> sale_day\n   <span class=\"SQLKeyword\">FROM</span>\n       sales<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">2. Aggregating Data by Time Periods:</h4>\n    <p>Sum of sales by month.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n       <span class=\"SQLFunction\">TO_CHAR</span><span class=\"SQLKeyword\">(</span>sale_date, <span class=\"SQLString\">'YYYY-MM'</span><span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> sale_month,\n       <span class=\"SQLFunction\">SUM</span><span class=\"SQLKeyword\">(</span>sale_amount<span class=\"SQLKeyword\">)</span>              <span class=\"SQLKeyword\">AS</span> total_sales\n   <span class=\"SQLKeyword\">FROM</span>\n       sales\n   <span class=\"SQLKeyword\">GROUP BY</span>\n       <span class=\"SQLFunction\">TO_CHAR</span><span class=\"SQLKeyword\">(</span>sale_date, <span class=\"SQLString\">'YYYY-MM'</span><span class=\"SQLKeyword\">)</span>\n   <span class=\"SQLKeyword\">ORDER BY</span>\n       sale_month<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Using Window Functions:</h4>\n    <h4 class=\"bold-blue\">1. Calculating Moving Averages:</h4>\n    <p>Calculate a 3-month moving average of sales.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n       sale_date,\n       sale_amount,\n       <span class=\"SQLFunction\">AVG</span><span class=\"SQLKeyword\">(</span>sale_amount<span class=\"SQLKeyword\">)</span>\n       <span class=\"SQLKeyword\">OVER</span><span class=\"SQLKeyword\">(</span>\n           <span class=\"SQLKeyword\">ORDER BY</span>\n               sale_date\n           <span class=\"SQLKeyword\">ROWS BETWEEN</span> 2 <span class=\"SQLKeyword\">PRECEDING AND CURRENT ROW</span>\n       <span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> moving_avg\n   <span class=\"SQLKeyword\">FROM</span>\n       sales\n   <span class=\"SQLKeyword\">ORDER BY</span>\n       sale_date<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">2. Lag and Lead Functions:</h4>\n    <p>Compare current sales to the previous month's sales.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n       sale_date,\n       sale_amount,\n       <span class=\"SQLFunction\">LAG</span><span class=\"SQLKeyword\">(</span>sale_amount, 1<span class=\"SQLKeyword\">)</span>\n       <span class=\"SQLKeyword\">OVER</span><span class=\"SQLKeyword\">(</span>\n           <span class=\"SQLKeyword\">ORDER BY</span>\n               sale_date\n       <span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> prev_month_sales,\n       sale_amount - <span class=\"SQLFunction\">LAG</span><span class=\"SQLKeyword\">(</span>sale_amount, 1<span class=\"SQLKeyword\">)</span>\n                     <span class=\"SQLKeyword\">OVER</span><span class=\"SQLKeyword\">(</span>\n           <span class=\"SQLKeyword\">ORDER BY</span>\n               sale_date\n                     <span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> sales_change\n   <span class=\"SQLKeyword\">FROM</span>\n       sales\n   <span class=\"SQLKeyword\">ORDER BY</span>\n       sale_date<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Using GROUP BY for Time-Series Aggregation:</h4>\n    <h4 class=\"bold-blue\">1. Sales by Year and Month:</h4>\n    <p>Aggregate sales by year and month.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n       <span class=\"SQLFunction\">EXTRACT</span><span class=\"SQLKeyword\">(</span>YEAR <span class=\"SQLKeyword\">FROM</span> sale_date<span class=\"SQLKeyword\">)</span>  <span class=\"SQLKeyword\">AS</span> sale_year,\n       <span class=\"SQLFunction\">EXTRACT</span><span class=\"SQLKeyword\">(</span>MONTH <span class=\"SQLKeyword\">FROM</span> sale_date<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> sale_month,\n       <span class=\"SQLFunction\">SUM</span><span class=\"SQLKeyword\">(</span>sale_amount<span class=\"SQLKeyword\">)</span>              <span class=\"SQLKeyword\">AS</span> total_sales\n   <span class=\"SQLKeyword\">FROM</span>\n       sales\n   <span class=\"SQLKeyword\">GROUP BY</span>\n       <span class=\"SQLFunction\">EXTRACT</span><span class=\"SQLKeyword\">(</span>YEAR <span class=\"SQLKeyword\">FROM</span> sale_date<span class=\"SQLKeyword\">)</span>,\n       <span class=\"SQLFunction\">EXTRACT</span><span class=\"SQLKeyword\">(</span>MONTH <span class=\"SQLKeyword\">FROM</span> sale_date<span class=\"SQLKeyword\">)</span>\n   <span class=\"SQLKeyword\">ORDER BY</span>\n       sale_year,\n       sale_month<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 181,
    "Question": "Discuss the Performance Implications of Different Types of Joins on Large Datasets.",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>When working with large datasets in Oracle, the choice of join type can significantly impact performance. Understanding these implications helps in writing efficient queries and optimizing database performance. Here is a discussion of the performance implications of different types of joins on large datasets in Oracle:</p>\n    <h4 class=\"bold-maroon\">1. Inner Join</h4>\n    <p>An inner join returns rows when there is a match in both tables.</p>\n    <h4 class=\"bold-blue\">Performance Implications:</h4>\n    <ul>\n        <li>Efficiency: Generally efficient with proper indexing.</li>\n        <li>Indexing: Indexes on join columns improve performance by reducing full table scans.</li>\n        <li>Resource Usage: Requires minimal memory and CPU resources compared to outer joins.</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of an Inner Join</span>\n<span class=\"SQLKeyword\">SELECT</span>\n    p<span class=\"SQLOperator\">.</span>product_id<span class=\"SQLOperator\">,</span>\n    p<span class=\"SQLOperator\">.</span>product_name<span class=\"SQLOperator\">,</span>\n    c<span class=\"SQLOperator\">.</span>category_name\n<span class=\"SQLKeyword\">FROM</span>\n    products p\n    <span class=\"SQLKeyword\">INNER JOIN</span> categories c\n    <span class=\"SQLKeyword\">ON</span> p<span class=\"SQLOperator\">.</span>category_id <span class=\"SQLOperator\">=</span> c<span class=\"SQLOperator\">.</span>category_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">2. Left Outer Join</h4>\n    <p>A left outer join returns all rows from the left table and the matched rows from the right table. If no match is found, NULLs are returned for columns from the right table.</p>\n    <h4 class=\"bold-blue\">Performance Implications:</h4>\n    <ul>\n        <li>Complexity: Typically more complex and resource-intensive than inner joins.</li>\n        <li>Indexing: Indexing the join columns is crucial for performance. Without proper indexes, the join may lead to full table scans and significant overhead.</li>\n        <li>Resource Usage: Requires additional processing to handle rows with no matches, potentially increasing execution time and resource consumption.</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of a Left Outer Join</span>\n<span class=\"SQLKeyword\">SELECT</span>\n    p<span class=\"SQLOperator\">.</span>product_id<span class=\"SQLOperator\">,</span>\n    p<span class=\"SQLOperator\">.</span>product_name<span class=\"SQLOperator\">,</span>\n    c<span class=\"SQLOperator\">.</span>category_name\n<span class=\"SQLKeyword\">FROM</span>\n    products p\n    <span class=\"SQLKeyword\">LEFT OUTER JOIN</span> categories c\n    <span class=\"SQLKeyword\">ON</span> p<span class=\"SQLOperator\">.</span>category_id <span class=\"SQLOperator\">=</span> c<span class=\"SQLOperator\">.</span>category_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">3. Right Outer Join</h4>\n    <p>A right outer join returns all rows from the right table and the matched rows from the left table. If no match is found, NULLs are returned for columns from the left table.</p>\n    <h4 class=\"bold-blue\">Performance Implications:</h4>\n    <ul>\n        <li>Similar to Left Join: Performance implications are similar to left outer joins.</li>\n        <li>Indexing: Proper indexing is required to optimize performance.</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of a Right Outer Join</span>\n<span class=\"SQLKeyword\">SELECT</span>\n    p<span class=\"SQLOperator\">.</span>product_id<span class=\"SQLOperator\">,</span>\n    p<span class=\"SQLOperator\">.</span>product_name<span class=\"SQLOperator\">,</span>\n    c<span class=\"SQLOperator\">.</span>category_name\n<span class=\"SQLKeyword\">FROM</span>\n    products p\n    <span class=\"SQLKeyword\">RIGHT OUTER JOIN</span> categories c\n    <span class=\"SQLKeyword\">ON</span> p<span class=\"SQLOperator\">.</span>category_id <span class=\"SQLOperator\">=</span> c<span class=\"SQLOperator\">.</span>category_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">4. Full Outer Join</h4>\n    <p>A full outer join returns all rows when there is a match in one of the tables. It returns all rows from the left table and all rows from the right table, with NULLs in places where the join condition is not met.</p>\n    <h4 class=\"bold-blue\">Performance Implications:</h4>\n    <ul>\n        <li>Complexity: Most complex among the outer joins, requiring substantial resources.</li>\n        <li>Indexing: Proper indexing is essential, but even with indexes, performance might be significantly lower than inner or simple outer joins due to the need to process and merge unmatched rows.</li>\n        <li>Resource Usage: High resource consumption in terms of memory and CPU, especially on large datasets.</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of a Full Outer Join</span>\n<span class=\"SQLKeyword\">SELECT</span>\n    p<span class=\"SQLOperator\">.</span>product_id<span class=\"SQLOperator\">,</span>\n    p<span class=\"SQLOperator\">.</span>product_name<span class=\"SQLOperator\">,</span>\n    c<span class=\"SQLOperator\">.</span>category_name\n<span class=\"SQLKeyword\">FROM</span>\n    products p\n    <span class=\"SQLKeyword\">FULL OUTER JOIN</span> categories c\n    <span class=\"SQLKeyword\">ON</span> p<span class=\"SQLOperator\">.</span>category_id <span class=\"SQLOperator\">=</span> c<span class=\"SQLOperator\">.</span>category_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">5. Cross Join</h4>\n    <p>A cross join returns the Cartesian product of the two tables, meaning every row from the first table is joined with every row from the second table.</p>\n    <h4 class=\"bold-blue\">Performance Implications:</h4>\n    <ul>\n        <li>Inefficiency: Generally very inefficient and should be avoided on large datasets unless absolutely necessary.</li>\n        <li>Resource Usage: Exponential growth in result set size with large tables, leading to high memory and CPU usage.</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of a Cross Join</span>\n<span class=\"SQLKeyword\">SELECT</span>\n    p<span class=\"SQLOperator\">.</span>product_id<span class=\"SQLOperator\">,</span>\n    c<span class=\"SQLOperator\">.</span>category_name\n<span class=\"SQLKeyword\">FROM</span>\n    products p\n    <span class=\"SQLKeyword\">CROSS JOIN</span> categories c<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">6. Self Join</h4>\n    <p>A self join is a regular join, but the table is joined with itself.</p>\n    <h4 class=\"bold-blue\">Performance Implications:</h4>\n    <ul>\n        <li>Indexing: Indexing the join columns is critical to avoid full table scans and reduce resource consumption.</li>\n    </ul>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Example of a Self Join</span>\n<span class=\"SQLKeyword\">SELECT</span>\n    e1<span class=\"SQLOperator\">.</span>employee_id<span class=\"SQLOperator\">,</span>\n    e1<span class=\"SQLOperator\">.</span>employee_name<span class=\"SQLOperator\">,</span>\n    e2<span class=\"SQLOperator\">.</span>employee_name <span class=\"SQLKeyword\">AS</span> manager_name\n<span class=\"SQLKeyword\">FROM</span>\n    employees e1\n    <span class=\"SQLKeyword\">JOIN</span> employees e2\n    <span class=\"SQLKeyword\">ON</span> e1<span class=\"SQLOperator\">.</span>manager_id <span class=\"SQLOperator\">=</span> e2<span class=\"SQLOperator\">.</span>employee_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 182,
    "Question": "How Would You Handle Data Versioning Within a Database Using SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Handling data versioning within a database using Oracle SQL involves creating mechanisms to track changes to records over time. This can be achieved through various methods, such as using history tables or triggers. Here are some approaches to implement data versioning:</p>\n    <h4 class=\"bold-maroon\">1. Using History Tables</h4>\n    <p>Create a separate history table to store versions of each record.</p>\n    <h4 class=\"bold-blue\">Example:</h4>\n    <p>Assume a \"PRODUCTS\" table where product information needs versioning.</p>\n    <h4 class=\"bold-blue\">Original Table:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Products Table</span>\n<span class=\"SQLKeyword\">CREATE TABLE</span> products (\n    product_id <span class=\"SQLKeyword\">NUMBER</span> <span class=\"SQLKeyword\">PRIMARY KEY</span><span class=\"SQLOperator\">,</span>\n    product_name <span class=\"SQLKeyword\">VARCHAR2</span>(100)<span class=\"SQLOperator\">,</span>\n    price <span class=\"SQLKeyword\">NUMBER</span><span class=\"SQLOperator\">,</span>\n    version_start_date <span class=\"SQLKeyword\">DATE</span><span class=\"SQLOperator\">,</span>\n    version_end_date <span class=\"SQLKeyword\">DATE</span>\n)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">History Table:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Products History Table</span>\n<span class=\"SQLKeyword\">CREATE TABLE</span> products_history (\n    product_id <span class=\"SQLKeyword\">NUMBER</span><span class=\"SQLOperator\">,</span>\n    product_name <span class=\"SQLKeyword\">VARCHAR2</span>(100)<span class=\"SQLOperator\">,</span>\n    price <span class=\"SQLKeyword\">NUMBER</span><span class=\"SQLOperator\">,</span>\n    version_start_date <span class=\"SQLKeyword\">DATE</span><span class=\"SQLOperator\">,</span>\n    version_end_date <span class=\"SQLKeyword\">DATE</span><span class=\"SQLOperator\">,</span>\n    <span class=\"SQLKeyword\">PRIMARY KEY</span> (product_id<span class=\"SQLOperator\">,</span> version_start_date)\n)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Trigger to Maintain History:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Trigger to Maintain History</span>\n<span class=\"SQLKeyword\">CREATE OR REPLACE TRIGGER</span> trg_products_versioning\n<span class=\"SQLKeyword\">BEFORE UPDATE ON</span> products\n<span class=\"SQLKeyword\">FOR EACH ROW</span>\n<span class=\"SQLKeyword\">BEGIN</span>\n    <span class=\"SQLKeyword\">INSERT INTO</span> products_history (\n        product_id<span class=\"SQLOperator\">,</span>\n        product_name<span class=\"SQLOperator\">,</span>\n        price<span class=\"SQLOperator\">,</span>\n        version_start_date<span class=\"SQLOperator\">,</span>\n        version_end_date\n    ) <span class=\"SQLKeyword\">VALUES</span> (\n        <span class=\"SQLKeyword\">:</span>old<span class=\"SQLOperator\">.</span>product_id<span class=\"SQLOperator\">,</span>\n        <span class=\"SQLKeyword\">:</span>old<span class=\"SQLOperator\">.</span>product_name<span class=\"SQLOperator\">,</span>\n        <span class=\"SQLKeyword\">:</span>old<span class=\"SQLOperator\">.</span>price<span class=\"SQLOperator\">,</span>\n        <span class=\"SQLKeyword\">:</span>old<span class=\"SQLOperator\">.</span>version_start_date<span class=\"SQLOperator\">,</span>\n        <span class=\"SQLFunction\">SYSDATE</span>\n    );\n    <span class=\"SQLKeyword\">:</span>new<span class=\"SQLOperator\">.</span>version_start_date <span class=\"SQLOperator\">:=</span> <span class=\"SQLFunction\">SYSDATE</span><span class=\"SQLOperator\">;</span>\n    <span class=\"SQLKeyword\">:</span>new<span class=\"SQLOperator\">.</span>version_end_date <span class=\"SQLOperator\">:=</span> <span class=\"SQLKeyword\">NULL</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">END</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLOperator\">/</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Explanation:</h4>\n    <ul>\n        <li>The trigger inserts the old record into the history table before updating the main table.</li>\n        <li>The \"version_start_date\" of the new record is set to the current date, while the \"version_end_date\" of the old record is set to the current date.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">2. Using Validity Period Columns</h4>\n    <p>Track changes directly within the main table by maintaining validity period columns.</p>\n    <h4 class=\"bold-blue\">Example:</h4>\n    <h4 class=\"bold-blue\">PRODUCTS Table:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Products Table with Validity Periods</span>\n<span class=\"SQLKeyword\">CREATE TABLE</span> products (\n    product_id <span class=\"SQLKeyword\">NUMBER</span> <span class=\"SQLKeyword\">PRIMARY KEY</span><span class=\"SQLOperator\">,</span>\n    product_name <span class=\"SQLKeyword\">VARCHAR2</span>(100)<span class=\"SQLOperator\">,</span>\n    price <span class=\"SQLKeyword\">NUMBER</span><span class=\"SQLOperator\">,</span>\n    effective_date <span class=\"SQLKeyword\">DATE</span><span class=\"SQLOperator\">,</span>\n    expiration_date <span class=\"SQLKeyword\">DATE</span>\n)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Trigger to Maintain Validity Periods:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Trigger to Maintain Validity Periods</span>\n<span class=\"SQLKeyword\">CREATE OR REPLACE TRIGGER</span> trg_products_validity\n<span class=\"SQLKeyword\">BEFORE UPDATE ON</span> products\n<span class=\"SQLKeyword\">FOR EACH ROW</span>\n<span class=\"SQLKeyword\">BEGIN</span>\n    <span class=\"SQLKeyword\">:</span>new<span class=\"SQLOperator\">.</span>effective_date <span class=\"SQLOperator\">:=</span> <span class=\"SQLFunction\">SYSDATE</span><span class=\"SQLOperator\">;</span>\n    <span class=\"SQLKeyword\">:</span>new<span class=\"SQLOperator\">.</span>expiration_date<span class=\"SQLOperator\">:=</span> <span class=\"SQLKeyword\">NULL</span><span class=\"SQLOperator\">;</span>\n    <span class=\"SQLKeyword\">UPDATE</span> products\n    <span class=\"SQLKeyword\">SET</span> expiration_date<span class=\"SQLOperator\">=</span> <span class=\"SQLFunction\">SYSDATE</span>\n    <span class=\"SQLKeyword\">WHERE</span> product_id <span class=\"SQLOperator\">=</span> <span class=\"SQLKeyword\">:</span>old<span class=\"SQLOperator\">.</span>product_id\n      <span class=\"SQLKeyword\">AND</span> expiration_date <span class=\"SQLKeyword\">IS NULL</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">END</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLOperator\">/</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Explanation:</h4>\n    <ul>\n        <li>The trigger updates the validity period of the current record to mark it as no longer valid.</li>\n        <li>The new version of the record is inserted with a new \"effective_date\" date and a \"NULL\" \"expiration_date\" date.</li>\n        <li>In some business models, the fields valid_from and valid_to are used to identify active rows.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 183,
    "Question": "How Does Oracle SQL Handle Moving Large Amounts of Data?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Moving large amounts of data in Oracle SQL can be efficiently managed using various tools and techniques. Oracle offers several methods to facilitate high-performance data movement while minimizing disruption to database operations. Here are some of the primary approaches:</p>\n    <h4 class=\"bold-maroon\">1. Oracle Data Pump</h4>\n    <h4 class=\"bold-blue\">Description:</h4>\n    <p>Oracle Data Pump is a high-speed data movement utility for transferring data and metadata between Oracle databases. It provides enhanced performance compared to traditional export/import utilities.</p>\n    <h4 class=\"bold-blue\">Usage:</h4>\n    <h4 class=\"bold-blue\">Exporting Data:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Exporting Data Using Oracle Data Pump</span>\n<span class=\"SQLFunction\">expdp</span> username<span class=\"SQLOperator\">/</span>password\n    <span class=\"SQLKeyword\">DIRECTORY</span><span class=\"SQLOperator\">=</span>dpump_dir1\n    <span class=\"SQLKeyword\">DUMPFILE</span><span class=\"SQLOperator\">=</span>expdat.dmp\n    <span class=\"SQLKeyword\">TABLES</span><span class=\"SQLOperator\">=</span>table_name<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Importing Data:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Importing Data Using Oracle Data Pump</span>\n<span class=\"SQLFunction\">impdp</span> username<span class=\"SQLOperator\">/</span>password\n    <span class=\"SQLKeyword\">DIRECTORY</span><span class=\"\nSQLOperator\">=</span>dpump_dir1\n    <span class=\"SQLKeyword\">DUMPFILE</span><span class=\"SQLOperator\">=</span>expdat.dmp\n    <span class=\"SQLKeyword\">TABLES</span><span class=\"SQLOperator\">=</span>table_name<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Benefits:</h4>\n    <ul>\n        <li>High-speed data transfer.</li>\n        <li>Parallel execution capabilities.</li>\n        <li>Efficiently handles large volumes of data.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">2. Oracle SQL*Loader</h4>\n    <h4 class=\"bold-blue\">Description:</h4>\n    <p>SQL*Loader is a bulk data loading tool that allows high-performance loading of data from external files into Oracle tables.</p>\n    <h4 class=\"bold-blue\">Usage:</h4>\n    <h4 class=\"bold-blue\">Control File (example.ctl):</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Control File for SQL*Loader (example.ctl)</span>\n<span class=\"SQLKeyword\">LOAD DATA</span>\n<span class=\"SQLKeyword\">INFILE</span> <span class=\"SQLString\">'data.csv'</span>\n<span class=\"SQLKeyword\">INTO TABLE</span> table_name\n<span class=\"SQLKeyword\">FIELDS TERMINATED BY</span> <span class=\"SQLString\">','</span> <span class=\"SQLKeyword\">OPTIONALLY ENCLOSED BY</span> <span class=\"SQLString\">'\"'</span>\n(<span class=\"SQLKeyword\">\n  column1<span class=\"SQLOperator\">,</span>\n  column2<span class=\"SQLOperator\">,</span>\n  column3\n</span>)\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Loading Data:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Loading Data Using SQL*Loader</span>\n<span class=\"SQLFunction\">sqlldr</span> username<span class=\"SQLOperator\">/</span>password\n    <span class=\"SQLKeyword\">CONTROL</span><span class=\"SQLOperator\">=</span>example.ctl\n    <span class=\"SQLKeyword\">LOG</span><span class=\"SQLOperator\">=</span>example.log<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Benefits:</h4>\n    <ul>\n        <li>Efficiently handles large volumes of data.</li>\n        <li>Supports various file formats and data transformations.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">3. External Tables</h4>\n    <h4 class=\"bold-blue\">Description:</h4>\n    <p>External tables allow Oracle to query data stored outside the database (e.g., flat files) as if it were in a table within the database.</p>\n    <h4 class=\"bold-blue\">Usage:</h4>\n    <h4 class=\"bold-blue\">Creating External Table:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Creating an External Table</span>\n<span class=\"SQLKeyword\">CREATE TABLE</span> external_table (\n  column1 <span class=\"SQLKeyword\">VARCHAR2</span>(100)<span class=\"SQLOperator\">,</span>\n  column2 <span class=\"SQLKeyword\">NUMBER</span><span class=\"SQLOperator\">,</span>\n  column3 <span class=\"SQLKeyword\">DATE</span>\n)\n<span class=\"SQLKeyword\">ORGANIZATION EXTERNAL</span> (\n  <span class=\"SQLKeyword\">TYPE</span> <span class=\"SQLKeyword\">ORACLE_LOADER</span>\n  <span class=\"SQLKeyword\">DEFAULT DIRECTORY</span> data_dir\n  <span class=\"SQLKeyword\">ACCESS PARAMETERS</span> (\n    <span class=\"SQLKeyword\">RECORDS DELIMITED BY NEWLINE</span>\n    <span class=\"SQLKeyword\">FIELDS TERMINATED BY</span> <span class=\"SQLString\">','</span> <span class=\"SQLKeyword\">OPTIONALLY ENCLOSED BY</span> <span class=\"SQLString\">'\"'</span>\n  )\n  <span class=\"SQLKeyword\">LOCATION</span> (<span class=\"SQLString\">'data.csv'</span>)\n)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Querying External Table:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Querying an External Table</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">*</span> <span class=\"SQLKeyword\">FROM</span> external_table<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Benefits:</h4>\n    <ul>\n        <li>Allows querying external data without loading it into the database.</li>\n        <li>Useful for ETL processes and data integration.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">4. Direct Path Insert</h4>\n    <h4 class=\"bold-blue\">Description:</h4>\n    <p>Direct path insert allows data to be inserted directly into datafiles, bypassing the buffer cache, and significantly speeding up insert operations.</p>\n    <h4 class=\"bold-blue\">Usage:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Direct Path Insert Using APPEND Hint</span>\n<span class=\"SQLKeyword\">INSERT</span> <span class=\"SQLComment\">/*+</span> <span class=\"SQLFunction\">APPEND</span> <span class=\"SQLComment\">*/</span> <span class=\"SQLKeyword\">INTO</span> table_name\n   <span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">*</span> <span class=\"SQLKeyword\">FROM</span> source_table<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Benefits:</h4>\n    <ul>\n        <li>Faster data loading by bypassing the buffer cache.</li>\n        <li>Reduces undo and redo generation.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">5. Parallel Execution</h4>\n    <h4 class=\"bold-blue\">Description:</h4>\n    <p>Parallel execution enables the concurrent processing of SQL statements by multiple processes, significantly speeding up data movement operations.</p>\n    <h4 class=\"bold-blue\">Usage:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Parallel Execution for Data Movement</span>\n<span class=\"SQLKeyword\">ALTER SESSION</span> <span class=\"SQLKeyword\">ENABLE PARALLEL DML</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">INSERT</span> <span class=\"SQLComment\">/*+</span> <span class=\"SQLFunction\">PARALLEL</span>(table_name<span class=\"SQLOperator\">,</span> 4) <span class=\"SQLComment\">*/</span> <span class=\"SQLKeyword\">INTO</span> table_name\n   <span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">*</span> <span class=\"SQLKeyword\">FROM</span> source_table<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Benefits:</h4>\n    <ul>\n        <li>Speeds up data loading and querying by leveraging multiple CPUs.</li>\n        <li>Efficient for large-scale data operations.</li>\n    </ul>\n    <p>By utilizing these tools and techniques, large amounts of data can be moved efficiently in Oracle SQL, ensuring minimal disruption to database operations.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 184,
    "Question": "How is the IN Clause Used in SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>The \"IN\" clause is used to filter data by checking if a value matches any value in a specified list or a subquery.</p>\n    <h4 class=\"bold-blue\">Syntax:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Using a List of Values with the IN Clause</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">*</span> <span class=\"SQLKeyword\">FROM</span> customers\n   <span class=\"SQLKeyword\">WHERE</span> customer_id <span class=\"SQLKeyword\">IN</span> (1<span class=\"SQLOperator\">,</span> 2<span class=\"SQLOperator\">,</span> 3)<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">SELECT</span>\n    <span class=\"SQLKeyword\">*</span>\n<span class=\"SQLKeyword\">FROM</span>\n    products\n<span class=\"SQLKeyword\">WHERE</span>\n    product_name <span class=\"SQLKeyword\">IN</span> ( <span class=\"SQLString\">'Smartwatches'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'Books'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'GPS devices'</span> )<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Using a Subquery with the IN Clause</span>\n<span class=\"SQLKeyword\">SELECT</span>\n    <span class=\"SQLKeyword\">*</span>\n<span class=\"SQLKeyword\">FROM</span>\n    customers\n<span class=\"SQLKeyword\">WHERE</span>\n    customer_id <span class=\"SQLKeyword\">IN</span> (\n        <span class=\"SQLKeyword\">SELECT</span>\n            customer_id\n        <span class=\"SQLKeyword\">FROM</span>\n            orders\n        <span class=\"SQLKeyword\">WHERE</span>\n            amount <span class=\"SQLOperator\">&gt;</span> 100\n    )<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>The \"IN\" clause simplifies queries by allowing you to match a column's value against multiple possibilities without using multiple \"OR\" conditions.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 185,
    "Question": "What Is SQL Injection, and How Can It Be Prevented?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>SQL injection is a security vulnerability that enables an attacker to execute arbitrary SQL code on a database. This occurs when untrusted input is directly embedded into SQL statements without proper validation or escaping, allowing attackers to manipulate the SQL query and gain unauthorized access to the database.</p>\n    <h4 class=\"bold-blue\">Impact:</h4>\n    <ul>\n        <li>Unauthorized access to sensitive data.</li>\n        <li>Data manipulation or deletion.</li>\n        <li>Privilege escalation.</li>\n        <li>Execution of administrative operations.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">How SQL Injection Occurs</h4>\n    <p>SQL injection typically happens when user input is directly embedded in SQL queries. For example:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Vulnerable SQL Query</span>\nsql_query <span class=\"SQLOperator\">:=</span> <span class=\"SQLString\">'SELECT * FROM users WHERE username = '''</span>\n             <span class=\"SQLOperator\">||</span> user_input\n             <span class=\"SQLOperator\">||</span> <span class=\"SQLString\">''''</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">EXECUTE IMMEDIATE</span> sql_query<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>If \"user_input\" is \"admin' OR '1'='1\", the resulting SQL query becomes:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Resulting SQL Query with SQL Injection</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">*</span> <span class=\"SQLKeyword\">FROM</span> users\n   <span class=\"SQLKeyword\">WHERE</span> username <span class=\"SQLOperator\">=</span> <span class=\"SQLString\">'admin'</span> <span class=\"SQLKeyword\">OR</span> <span class=\"SQLString\">'1'='1'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Preventing SQL Injection</h4>\n    <p>To prevent SQL injection in Oracle SQL, several best practices and techniques can be employed:</p>\n    <h4 class=\"bold-maroon\">1. Use Bind Variables</h4>\n    <p>Using bind variables ensures that user input is treated as data rather than executable code. Bind variables separate SQL code from data, preventing injection attacks.</p>\n    <h4 class=\"bold-blue\">Example:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Safe SQL Query Using Bind Variables</span>\nsql_query <span class=\"SQLOperator\">:=</span> <span class=\"SQLString\">'SELECT * FROM users WHERE username = :username'</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">EXECUTE IMMEDIATE</span> sql_query\n    <span class=\"SQLKeyword\">USING</span> user_input<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">2. Input Validation</h4>\n    <p>Validate user inputs to ensure they conform to expected formats and values before using them in SQL queries.</p>\n    <h4 class=\"bold-blue\">Example:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Input Validation</span>\n<span class=\"SQLKeyword\">IF</span> user_input <span class=\"SQLKeyword\">IS NULL</span> <span class=\"SQLKeyword\">OR</span> <span class=\"SQLFunction\">length</span>(user_input) <span class=\"SQLOperator\">&gt;</span> 50 <span class=\"SQLKeyword\">THEN</span>\n    <span class=\"SQLKeyword\">raise_application_error</span>(<span class=\"SQLOperator\">-</span>20001<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'Invalid input'</span>)<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">END IF</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">3. Use of Stored Procedures</h4>\n    <p>Stored procedures and functions can encapsulate SQL code and safely handle user input, reducing the risk of SQL injection.</p>\n    <h4 class=\"bold-blue\">Example:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Using Stored Procedures for Safe Query Execution</span>\n<span class=\"SQLKeyword\">CREATE OR REPLACE PROCEDURE</span> get_user_info (\n    p_username <span class=\"SQLKeyword\">IN VARCHAR2</span><span class=\"SQLOperator\">,</span>\n    p_result   <span class=\"SQLKeyword\">OUT SYS_REFCURSOR</span>\n)\n<span class=\"SQLKeyword\">IS</span>\n<span class=\"SQLKeyword\">BEGIN</span>\n    <span class=\"SQLKeyword\">OPEN</span> p_result <span class=\"SQLKeyword\">FOR</span>\n      <span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">*</span>\n      <span class=\"SQLKeyword\">FROM</span>   users\n      <span class=\"SQLKeyword\">WHERE</span>  username <span class=\"SQLOperator\">=</span> p_username<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">END</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLOperator\">/</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">4. Least Privilege Principle</h4>\n    <p>Limit database permissions for applications to only those necessary for their operation. Avoid using high-privilege accounts for database connections.</p>\n    <h4 class=\"bold-blue\">Example:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Grant Minimal Privileges to Database Users</span>\n<span class=\"SQLKeyword\">GRANT SELECT</span><span class=\"SQLOperator\">,</span> <span class=\"SQLKeyword\">INSERT ON</span> users <span class=\"SQLKeyword\">TO</span> app_user<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">5. Security Tools and Libraries</h4>\n    <p>Use security tools and libraries that provide automatic protection against SQL injection, such as Oracle Database Vault or third-party libraries designed for secure database access.</p>\n    <h4 class=\"bold-maroon\">6. Regular Security Audits</h4>\n    <p>Perform regular security audits and code reviews to identify and remediate potential SQL injection vulnerabilities.</p>\n    <h4 class=\"bold-blue\">Summary:</h4>\n    <p>Preventing SQL injection involves using bind variables, validating user input, employing stored procedures, adhering to the principle of least privilege, escaping user input when necessary, leveraging security tools and libraries, and conducting regular security audits. These practices help ensure that applications are protected against SQL injection attacks, safeguarding the integrity and security of the database.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 186,
    "Question": "What is the difference between the CHAR, NCHAR, VARCHAR, VARCHAR2, and NVARCHAR2 data types?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>The \"CHAR\", \"NCHAR\", \"VARCHAR\", \"VARCHAR2\", and \"NVARCHAR2\" data types in Oracle SQL are used to store character data, but they have different characteristics and use cases. Here's a detailed explanation of each:</p>\n    <h4 class=\"bold-maroon\">1. CHAR</h4>\n    <p>Description: \"CHAR\" is a fixed-length character data type.</p>\n    <ul>\n        <li>Stores a fixed number of characters, and any unused space is padded with spaces.</li>\n        <li>Maximum length is 2000 bytes.</li>\n        <li>Suitable for storing data where the length is consistent, such as state codes or fixed-length codes.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">2. NCHAR</h4>\n    <p>Description: \"NCHAR\" is a fixed-length national character set data type.</p>\n    <ul>\n        <li>Similar to \"CHAR\" but designed for storing Unicode character data.</li>\n        <li>Maximum length is 2000 bytes.</li>\n        <li>Suitable for storing fixed-length data in a multilingual environment where Unicode is needed.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">3. VARCHAR</h4>\n    <p>Description: \"VARCHAR\" is a variable-length character data type.</p>\n    <ul>\n        <li>VARCHAR data type is synonymous with VARCHAR2.</li>\n        <li>Maximum length is 4000 bytes in Oracle.</li>\n        <li>Not recommended for use in new applications. Use \"VARCHAR2\" instead.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">4. VARCHAR2</h4>\n    <p>Description: \"VARCHAR2\" is a variable-length character data type.</p>\n    <ul>\n        <li>Stores variable-length strings with a maximum length of 4000 bytes (Standard).</li>\n        <li>Does not pad unused space.</li>\n        <li>Suitable for storing text data of varying lengths, such as names, descriptions, and comments.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Example:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Creating a Table with VARCHAR2</span>\n<span class=\"SQLKeyword\">CREATE TABLE</span> example_varchar2\n(\n    variable_text <span class=\"SQLKeyword\">VARCHAR2</span>(50)\n)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Characteristics:</h4>\n    <p>If \"variable_text\" is set to 'ABC', it will be stored as 'ABC' without any trailing spaces.</p>\n    <h4 class=\"bold-maroon\">5. NVARCHAR2</h4>\n    <p>Description: \"NVARCHAR2\" is a variable-length national character set data type.</p>\n    <ul>\n        <li>Similar to \"VARCHAR2\" but designed for storing Unicode character data.</li>\n        <li>Maximum length is 4000 bytes (Standard).</li>\n        <li>Suitable for storing variable-length data in a multilingual environment where Unicode is needed.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Example:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Creating a Table with NVARCHAR2</span>\n<span class=\"SQLKeyword\">CREATE TABLE</span> example_nvarchar2\n(\n    variable_unicode_text <span class=\"SQLKeyword\">NVARCHAR2</span>(50)\n)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Characteristics:</h4>\n    <p>Stores data in the national character set, useful for internationalization.</p>\n    <h4 class=\"bold-maroon\">Summary of Differences</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>Data Type</th>\n                <th>Fixed/Variable Length</th>\n                <th>Supports Unicode</th>\n                <th>Maximum Length</th>\n                <th>Padding with Spaces</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>CHAR</td>\n                <td>Fixed</td>\n                <td>No</td>\n                <td>2000 bytes</td>\n                <td>Yes</td>\n            </tr>\n            <tr>\n                <td>NCHAR</td>\n                <td>Fixed</td>\n                <td>Yes</td>\n                <td>2000 bytes</td>\n                <td>Yes</td>\n            </tr>\n            <tr>\n                <td>VARCHAR</td>\n                <td>Variable</td>\n                <td>No</td>\n                <td>4000 bytes</td>\n                <td>No</td>\n            </tr>\n            <tr>\n                <td>VARCHAR2</td>\n                <td>Variable</td>\n                <td>No</td>\n                <td>4000 bytes</td>\n                <td>No</td>\n            </tr>\n            <tr>\n                <td>NVARCHAR2</td>\n                <td>Variable</td>\n                <td>Yes</td>\n                <td>4000 bytes</td>\n                <td>No</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 187,
    "Question": "How do you write a SQL query to copy a row in a table?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 12px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode {\n                font-size: 11px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>To copy a row in a table, the \"INSERT INTO ... SELECT\" statement can be used.</p>\n    <h4 class=\"bold-maroon\">Syntax:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Copy a Specific Row with Specific Columns</span>\n<span class=\"SQLKeyword\">INSERT INTO</span> orders_hist (\n    order_id<span class=\"SQLOperator\">,</span>\n    customer_id<span class=\"SQLOperator\">,</span>\n    order_date<span class=\"SQLOperator\">,</span>\n    status\n)\n    <span class=\"SQLKeyword\">SELECT</span>\n        orders_seq<span class=\"SQLOperator\">.</span><span class=\"SQLFunction\">NEXTVAL</span><span class=\"SQLOperator\">,</span>\n        customer_id<span class=\"SQLOperator\">,</span>\n        order_date<span class=\"SQLOperator\">,</span>\n        status\n    <span class=\"SQLKeyword\">FROM</span>\n        orders\n    <span class=\"SQLKeyword\">WHERE</span>\n        order_id <span class=\"SQLOperator\">=</span> 1<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Copy a Specific Row with All Columns</span>\n<span class=\"SQLKeyword\">INSERT INTO</span> orders_hist\n    <span class=\"SQLKeyword\">SELECT</span>\n        <span class=\"SQLKeyword\">*</span>\n    <span class=\"SQLKeyword\">FROM</span>\n        orders\n    <span class=\"SQLKeyword\">WHERE</span>\n        order_id <span class=\"SQLOperator\">=</span> 1<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>The \"INSERT INTO ... SELECT\" statement allows you to select data from one or more rows and insert it into another table. The first example shows copying with specific columns and adding a new sequence for \"order_id\". The second example demonstrates copying all columns directly.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 188,
    "Question": "What is the ALTER TABLE command used for?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 12px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode {\n                font-size: 11px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>The \"ALTER TABLE\" command in an Oracle database is used to modify the structure of an existing table. This command allows for a variety of table alterations without the need to drop and recreate the table.</p>\n    <h4 class=\"bold-maroon\">1. Adding a Column</h4>\n    <h4 class=\"bold-blue\">Description:</h4>\n    <p>Add a new column to an existing table.</p>\n    <h4 class=\"bold-blue\">Usage:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Adding a Column to a Table</span>\n<span class=\"SQLKeyword\">ALTER TABLE</span> employees\n<span class=\"SQLKeyword\">ADD</span> phone_number <span class=\"SQLKeyword\">VARCHAR2</span>(15)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">2. Modifying a Column</h4>\n    <h4 class=\"bold-blue\">Description:</h4>\n    <p>Change the data type, size, or default value of an existing column.</p>\n    <h4 class=\"bold-blue\">Usage:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Modifying a Column in a Table</span>\n<span class=\"SQLKeyword\">ALTER TABLE</span> employees\n<span class=\"SQLKeyword\">MODIFY</span> phone_number <span class=\"SQLKeyword\">VARCHAR2</span>(20)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">3. Dropping a Column</h4>\n    <h4 class=\"bold-blue\">Description:</h4>\n    <p>Remove a column from an existing table.</p>\n    <h4 class=\"bold-blue\">Usage:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Dropping a Column from a Table</span>\n<span class=\"SQLKeyword\">ALTER TABLE</span> employees\n<span class=\"SQLKeyword\">DROP COLUMN</span> phone_number<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">4. Renaming a Column</h4>\n    <h4 class=\"bold-blue\">Description:</h4>\n    <p>Change the name of an existing column.</p>\n    <h4 class=\"bold-blue\">Usage:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Renaming a Column in a Table</span>\n<span class=\"SQLKeyword\">ALTER TABLE</span> employees\n<span class=\"SQLKeyword\">RENAME COLUMN</span> last_name <span class=\"SQLKeyword\">TO</span> surname<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">5. Adding Constraints</h4>\n    <h4 class=\"bold-blue\">Description:</h4>\n    <p>Add constraints like primary key, foreign key, unique, check, or not null constraints to an existing table.</p>\n    <h4 class=\"bold-blue\">Usage:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Adding a Primary Key Constraint</span>\n<span class=\"SQLKeyword\">ALTER TABLE</span> employees\n<span class=\"SQLKeyword\">ADD CONSTRAINT</span\n> pk_employee_id <span class=\"SQLKeyword\">PRIMARY KEY</span> (employee_id)<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">6. Dropping Constraints</h4>\n    <h4 class=\"bold-blue\">Description:</h4>\n    <p>Remove constraints from an existing table.</p>\n    <h4 class=\"bold-blue\">Usage:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Dropping a Constraint from a Table</span>\n<span class=\"SQLKeyword\">ALTER TABLE</span> employees\n<span class=\"SQLKeyword\">DROP CONSTRAINT</span> pk_employee_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">7. Renaming a Table</h4>\n    <h4 class=\"bold-blue\">Description:</h4>\n    <p>Change the name of an existing table.</p>\n    <h4 class=\"bold-blue\">Usage:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Renaming a Table</span>\n<span class=\"SQLKeyword\">ALTER TABLE</span> employees\n<span class=\"SQLKeyword\">RENAME TO</span> staff<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">8. Enabling or Disabling Constraints</h4>\n    <h4 class=\"bold-blue\">Description:</h4>\n    <p>Enable or disable constraints without removing them.</p>\n    <h4 class=\"bold-blue\">Usage:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Enabling a Constraint</span>\n<span class=\"SQLKeyword\">ALTER TABLE</span> employees\n<span class=\"SQLKeyword\">ENABLE CONSTRAINT</span> pk_employee_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Disabling a Constraint</span>\n<span class=\"SQLKeyword\">ALTER TABLE</span> employees\n<span class=\"SQLKeyword\">DISABLE CONSTRAINT</span> pk_employee_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">9. Adding and Dropping Partitions</h4>\n    <h4 class=\"bold-blue\">Description:</h4>\n    <p>Add or drop partitions for partitioned tables.</p>\n    <h4 class=\"bold-blue\">Usage:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Adding a Partition to a Table</span>\n<span class=\"SQLKeyword\">ALTER TABLE</span> sales <span class=\"SQLKeyword\">ADD PARTITION</span> p2024\n    <span class=\"SQLKeyword\">VALUES LESS THAN</span> ( <span class=\"SQLFunction\">TO_DATE</span>(<span class=\"SQLString\">'01-JAN-2025'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'DD-MON-YYYY'</span>) )<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Dropping a Partition from a Table</span>\n<span class=\"SQLKeyword\">ALTER TABLE</span> sales <span class=\"SQLKeyword\">DROP PARTITION</span> p2023<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Summary:</h4>\n    <p>The \"ALTER TABLE\" command in Oracle SQL is a command used to modify the structure of existing tables. It supports operations such as adding, modifying, and dropping columns, renaming columns or tables, and managing constraints and partitions. This command is essential for maintaining and evolving the schema of a database without the need for extensive data migration or table recreation.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 189,
    "Question": "How can you find the size of a database?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 12px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode {\n                font-size: 11px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>To find the size of a database, use the \"DBA_DATA_FILES\" and \"DBA_SEGMENTS\" views. This requires the \"SELECT_CATALOG_ROLE\" privilege or executing from a system account.</p>\n    <h4 class=\"bold-maroon\">Syntax:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Get the Total Size of All Data Files in Megabytes</span>\n<span class=\"SQLKeyword\">SELECT</span>\n    <span class=\"SQLFunction\">SUM</span>(bytes) <span class=\"SQLOperator\">/</span> 1024 <span class=\"SQLOperator\">/</span> 1024 <span class=\"SQLKeyword\">AS</span> size_mb\n<span class=\"SQLKeyword\">FROM</span>\n    dba_data_files<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Get the Size of Segments for a Specific Schema</span>\n<span class=\"SQLKeyword\">SELECT</span>\n    segment_name<span class=\"SQLOperator\">,</span>\n    segment_type<span class=\"SQLOperator\">,</span>\n    bytes <span class=\"SQLOperator\">/</span> 1024 <span class=\"SQLOperator\">/</span> 1024 <span class=\"SQLKeyword\">AS</span> size_mb\n<span class=\"SQLKeyword\">FROM</span>\n    dba_segments\n<span class=\"SQLKeyword\">WHERE</span>\n    owner <span class=\"SQLOperator\">=</span> <span class=\"SQLString\">'SCHEMA_NAME'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 190,
    "Question": "How do you use the LIMIT clause in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue{\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 12px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode {\n                font-size: 11px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Oracle SQL does not have a \"LIMIT\" clause. Instead, use the \"FETCH FIRST ... ROWS ONLY\" clause or the \"ROWNUM\" pseudo-column to limit the number of rows.</p>\n    <h4 class=\"bold-maroon\">Syntax:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Using FETCH FIRST to Limit Rows</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">*</span> <span class=\"SQLKeyword\">FROM</span> orders\n<span class=\"SQLKeyword\">FETCH FIRST</span> 5 <span class=\"SQLKeyword\">ROWS ONLY</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Using ROWNUM to Limit Rows</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">*</span> <span class=\"SQLKeyword\">FROM</span> orders\n   <span class=\"SQLKeyword\">WHERE</span> ROWNUM <span class=\"SQLOperator\">&lt;=</span> 5<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 191,
    "Question": "What is the DUAL table, and why is it important in Oracle?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 12px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode {\n                font-size: 11px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>The \"DUAL\" table is a special, single-row, single-column table present by default in all Oracle databases. It is owned by the user \"SYS\" but is accessible to all users.</p>\n    <p><b>Characteristics of the DUAL Table:</b></p>\n    <ul>\n        <li><b>Table Name:</b> DUAL</li>\n        <li><b>Owner:</b> SYS</li>\n        <li><b>Columns:</b></li>\n        <ul>\n            <li><b>Name:</b> DUMMY</li>\n            <li><b>Type:</b> VARCHAR2(1)</li>\n        </ul>\n        <li><b>Rows:</b></li>\n        <ul>\n            <li><b>Content:</b> One row with the value \"'X'\" in the \"DUMMY\" column</li>\n        </ul>\n    </ul>\n    <h4 class=\"bold-blue\">&bull; Importance of the DUAL Table:</h4>\n    <h4 class=\"bold-maroon\">1. Performing Calculations and Evaluations:</h4>\n    <p>Used to perform calculations and return results. Since \"DUAL\" has exactly one row, operations involving it return a single result.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> 1 + 1 <span class=\"SQLKeyword\">FROM</span> DUAL<span class=\"SQLOperator\">;</span> <span class=\"SQLComment\">-- Returns 2</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">2. Selecting System Values:</h4>\n    <p>Commonly used to select system values, such as the current date and time, without needing to query an actual table.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> SYSDATE <span class=\"SQLKeyword\">FROM</span> DUAL<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">3. Executing User-Defined Functions and PL/SQL:</h4>\n    <p>Used to execute and return the result of functions that do not require table data.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> func_name<span class=\"SQLKeyword\">(</span>parameters<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">FROM</span> DUAL<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">4. Generating Sequences and Using Pseudo Columns:</h4>\n    <p>Used to generate sequence numbers or use pseudo columns like \"ROWNUM\".</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> SEQ_NAME.NEXTVAL <span class=\"SQLKeyword\">FROM</span> DUAL<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">5. Ensuring Compatibility and Portability:</h4>\n    <p>Provides a consistent way to write queries and expressions that require a table reference, ensuring compatibility and portability of SQL code across different environments.</p>\n    <br>\n</body>\n</html>"
  },
  {
    "SrNo": 192,
    "Question": "What are table clusters, and why would you use them in Oracle?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 12px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode {\n                font-size: 11px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>A table cluster is a schema object in Oracle that allows the physical storage of related tables to be clustered together in the same database blocks.</p>\n    <p><b>Characteristics:</b></p>\n    <ul>\n        <li>A cluster contains one or more tables that have one or more columns in common.</li>\n        <li>A cluster key is the column or columns by which the tables in the cluster are related.</li>\n        <li>Data from clustered tables is stored in the same data blocks, reducing the number of I/O operations when accessing related rows.</li>\n    </ul>\n    <h4 class=\"bold-blue\">&bull; Why Use Table Clusters:</h4>\n    <h4 class=\"bold-maroon\">1. Improved Performance:</h4>\n    <ul>\n        <li><b>Reduced I/O:</b> When related rows from multiple tables are frequently queried together, storing these rows in the same data block reduces the number of I/O operations, improving query performance.</li>\n        <li><b>Faster Join Operations:</b> Since related rows are stored together, join operations between clustered tables can be faster because the necessary data is often in the same block.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">2. Space Management:</h4>\n    <ul>\n        <li><b>Efficient Storage:</b> Clustering tables can save space by eliminating redundant storage of common columns in related tables.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">3. Logical Grouping:</h4>\n    <ul>\n        <li><b>Related Data Management:</b> Clusters provide a way to logically group related data together, which can simplify data management and querying.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Example Scenario:</h4>\n    <p>Consider a scenario with two tables: \"departments\" and \"employees\". These tables are frequently queried together, particularly on the \"department_id\" column.</p>\n    <h4 class=\"bold-blue\">Table Definitions:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> departments <span class=\"SQLKeyword\">(</span>\n    department_id   NUMBER <span class=\"SQLKeyword\">PRIMARY KEY</span><span class=\"SQLOperator\">,</span>\n    department_name VARCHAR2<span class=\"SQLKeyword\">(</span>50<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">CREATE TABLE</span> employees <span class=\"SQLKeyword\">(</span>\n    employee_id   NUMBER <span class=\"SQLKeyword\">PRIMARY KEY</span><span class=\"SQLOperator\">,</span>\n    employee_name VARCHAR2<span class=\"SQLKeyword\">(</span>50<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">,</span>\n    department_id NUMBER<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLKeyword\">FOREIGN KEY</span> <span class=\"SQLKeyword\">(</span> department_id <span class=\"SQLKeyword\">)</span>\n        <span class=\"SQLKeyword\">REFERENCES</span> departments <span class=\"SQLKeyword\">(</span> department_id <span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Creating a Cluster:</h4>\n    <h4 class=\"bold-maroon\">1. Create the Cluster:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE CLUSTER</span> dept_emp_cluster <span class=\"SQLKeyword\">(</span>\n    department_id NUMBER\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">2. Create the Tables in the Cluster:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> departments <span class=\"SQLKeyword\">(</span>\n    department_id   NUMBER <span class=\"SQLKeyword\">PRIMARY KEY</span><span class=\"SQLOperator\">,</span>\n    department_name VARCHAR2<span class=\"SQLKeyword\">(</span>50<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">CLUSTER</span> dept_emp_cluster <span class=\"SQLKeyword\">(</span> department_id <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">CREATE TABLE</span> employees <span class=\"SQLKeyword\">(</span>\n    employee_id   NUMBER <span class=\"SQLKeyword\">PRIMARY KEY</span><span class=\"SQLOperator\">,</span>\n    employee_name VARCHAR2<span class=\"SQLKeyword\">(</span>50<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">,</span>\n    department_id NUMBER<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLKeyword\">FOREIGN KEY</span> <span class=\"SQLKeyword\">(</span> department_id <span class=\"SQLKeyword\">)</span>\n        <span class=\"SQLKeyword\">REFERENCES</span> departments <span class=\"SQLKeyword\">(</span> department_id <span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">CLUSTER</span> dept_emp_cluster <span class=\"SQLKeyword\">(</span> department_id <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">3. Create the Cluster Index:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE INDEX</span> idx_dept_emp_cluster\n    <span class=\"SQLKeyword\">ON CLUSTER</span> dept_emp_cluster<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">Query Example:</h4>\n    <p>When a query joins the \"DEPARTMENTS\" and \"EMPLOYEES\" tables on \"department_id\", the database can quickly access related rows stored in the same data blocks.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    d.department_name<span class=\"SQLOperator\">,</span>\n    e.employee_name\n<span class=\"SQLKeyword\">FROM</span>\n         departments d\n    <span class=\"SQLKeyword\">JOIN</span> employees e <span class=\"SQLKeyword\">ON</span> d.department_id = e.department_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 193,
    "Question": "How do you use the PIVOT and UNPIVOT clauses in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>PIVOT and UNPIVOT clauses in Oracle SQL allow you to transform rows into columns and columns into rows, respectively.</p>\n    <h4 class=\"bold-maroon\">Example for PIVOT</h4>\n    <p><b>Input Data: Table - SALES</b></p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ID</th>\n                <th>YEAR</th>\n                <th>PRODUCT</th>\n                <th>AMOUNT</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>2021</td>\n                <td>Product1</td>\n                <td>100</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>2021</td>\n                <td>Product2</td>\n                <td>150</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>2022</td>\n                <td>Product1</td>\n                <td>200</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>2022</td>\n                <td>Product2</td>\n                <td>250</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">PIVOT Query:</h4>\n    <p>Pivot the \"SALES\" table to display the amounts by year for each product:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    <span class=\"SQLOperator\">*</span>\n<span class=\"SQLKeyword\">FROM</span>\n    <span class=\"SQLKeyword\">(</span>\n        <span class=\"SQLKeyword\">SELECT</span>\n            year<span class=\"SQLOperator\">,</span>\n            product<span class=\"SQLOperator\">,</span>\n            amount\n        <span class=\"SQLKeyword\">FROM</span>\n            sales\n    <span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">PIVOT</span> <span class=\"SQLKeyword\">(</span>\n        <span class=\"SQLKeyword\">SUM</span><span class=\"SQLKeyword\">(</span>amount<span class=\"SQLKeyword\">)</span>\n        <span class=\"SQLKeyword\">FOR</span> product\n        <span class=\"SQLKeyword\">IN</span> <span class=\"SQLKeyword\">(</span> <span class=\"SQLString\">'Product1'</span> <span class=\"SQLKeyword\">AS</span> product1<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'Product2'</span> <span class=\"SQLKeyword\">AS</span> product2 <span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>YEAR</th>\n                <th>PRODUCT1</th>\n                <th>PRODUCT2</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>2021</td>\n                <td>100</td>\n                <td>150</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2022</td>\n                <td>200</td>\n                <td>250</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Example for UNPIVOT</h4>\n    <p><b>Input Data: Table - SALES_PIVOTED</b></p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>YEAR</th>\n                <th>PRODUCT1</th>\n                <th>PRODUCT2</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>2021</td>\n                <td>100</td>\n                <td>150</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2022</td>\n                <td>200</td>\n                <td>250</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">UNPIVOT Query:</h4>\n    <p>Unpivot the \"SALES_PIVOTED\" table to revert to the original format:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    year<span class=\"SQLOperator\">,</span>\n    product<span class=\"SQLOperator\">,</span>\n    amount\n<span class=\"SQLKeyword\">FROM</span>\n    sales_pivoted <span class=\"SQLKeyword\">UNPIVOT</span> <span class=\"SQLKeyword\">(</span> amount\n        <span class=\"SQLKeyword\">FOR</span> product\n    <span class=\"SQLKeyword\">IN</span> <span class=\"SQLKeyword\">(</span> product1 <span class=\"SQLKeyword\">AS</span> <span class=\"SQLString\">'Product1'</span><span class=\"SQLOperator\">,</span>\n         product2 <span class=\"SQLKeyword\">AS</span> <span class=\"SQLString\">'Product2'</span> <span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>YEAR</th>\n                <th>PRODUCT</th>\n                <th>AMOUNT</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>2021</td>\n                <td>Product1</td>\n                <td>100</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2021</td>\n                <td>Product2</td>\n                <td>150</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>2022</td>\n                <td>Product1</td>\n                <td>200</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2022</td>\n                <td>Product2</td>\n                <td>250</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">&bull; Summary:</h4>\n    <ul>\n        <li><b>PIVOT:</b> transforms rows into columns.</li>\n        <li><b>UNPIVOT:</b> transforms columns into rows.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 194,
    "Question": "How can you implement pagination in SQL queries?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Pagination in Oracle SQL can be implemented using the \"ROWNUM\" or \"ROW_NUMBER()\" functions in conjunction with common table expressions (CTEs) or subqueries. Oracle 12c and later versions also support the \"OFFSET ... FETCH\" clause, which simplifies the implementation of pagination.</p>\n    <h4 class=\"bold-maroon\">Input Data: Table - TRANSACTIONS</h4>\n    <p>Assume a table named \"TRANSACTIONS\" which logs banking transactions:</p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ID</th>\n                <th>ACCOUNT_NO</th>\n                <th>CUSTOMER_NAME</th>\n                <th>TRANSACTION_DATE</th>\n                <th>AMOUNT</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>1001</td>\n                <td>Einstein</td>\n                <td>2024-01-01</td>\n                <td>500</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>1002</td>\n                <td>Curie</td>\n                <td>2024-01-02</td>\n                <td>700</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>1003</td>\n                <td>Newton</td>\n                <td>2024-01-03</td>\n                <td>300</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>1004</td>\n                <td>Galileo</td>\n                <td>2024-01-04</td>\n                <td>450</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>1005</td>\n                <td>Tesla</td>\n                <td>2024-01-05</td>\n                <td>600</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>6</td>\n                <td>1006</td>\n                <td>Hawking</td>\n                <td>2024-01-06</td>\n                <td>800</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>7</td>\n                <td>1007</td>\n                <td>Darwin</td>\n                <td>2024-01-07</td>\n                <td>200</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>8</td>\n                <td>1008</td>\n                <td>Feynman</td>\n                <td>2024-01-08</td>\n                <td>550</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Pagination using \"ROW_NUMBER()\"</h4>\n    <p>Assume a requirement to fetch data in pages, with each page containing 3 records. For instance, to fetch the second page:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">WITH</span> paginatedtransactions <span class=\"SQLKeyword\">AS</span> <span class=\"SQLKeyword\">(</span>\n    <span class=\"SQLKeyword\">SELECT</span>\n        id<span class=\"SQLOperator\">,</span>\n        account_no<span class=\"SQLOperator\">,</span>\n        customer_name<span class=\"SQLOperator\">,</span>\n        transaction_date<span class=\"SQLOperator\">,</span>\n        amount<span class=\"SQLOperator\">,</span>\n        <span class=\"SQLKeyword\">ROW_NUMBER</span><span class=\"SQLKeyword\">()</span>\n        <span class=\"SQLKeyword\">OVER</span><span class=\"SQLKeyword\">(</span>\n            <span class=\"SQLKeyword\">ORDER BY</span>\n                transaction_date\n        <span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> row_num\n    <span class=\"SQLKeyword\">FROM</span>\n        transactions\n<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">SELECT</span>\n    id<span class=\"SQLOperator\">,</span>\n    account_no<span class=\"SQLOperator\">,</span>\n    customer_name<span class=\"SQLOperator\">,</span>\n    transaction_date<span class=\"SQLOperator\">,</span>\n    amount\n<span class=\"SQLKeyword\">FROM</span>\n    paginatedtransactions\n<span class=\"SQLKeyword\">WHERE</span>\n    row_num <span class=\"SQLKeyword\">BETWEEN</span> 4 <span class=\"SQLKeyword\">AND</span> 6<span class=\"SQLOperator\">;</span>\n    <span class=\"SQLComment\">-- Second page: 3 records per page, so 4th to 6th records</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <p>For the given example, the output for the second page would be:</p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ID</th>\n                <th>ACCOUNT_NO</th>\n                <th>CUSTOMER_NAME</th>\n                <th>TRANSACTION_DATE</th>\n                <th>AMOUNT</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>4</td>\n                <td>1004</td>\n                <td>Galileo</td>\n                <td>2024-01-04</td>\n                <td>450</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>5</td>\n                <td>1005</td>\n                <td>Tesla</td>\n                <td>2024-01-05</td>\n                <td>600</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>6</td>\n                <td>1006</td>\n                <td>Hawking</td>\n                <td>2024-01-06</td>\n                <td>800</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Pagination using OFFSET and FETCH</h4>\n    <p>To fetch the second page of results (assuming each page contains 3 records):</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    id<span class=\"SQLOperator\">,</span>\n    account_no<span class=\"SQLOperator\">,</span>\n    customer_name<span class=\"SQLOperator\">,</span>\n    transaction_date<span class=\"SQLOperator\">,</span>\n    amount\n<span class=\"SQLKeyword\">FROM</span>\n    transactions\n<span class=\"SQLKeyword\">ORDER BY</span>\n    transaction_date\n<span class=\"SQLKeyword\">OFFSET</span> 3 <span class=\"SQLKeyword\">ROWS FETCH NEXT</span> 3 <span class=\"SQLKeyword\">ROWS ONLY</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <p>For the given example, the output for the second page would be:</p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ID</th>\n                <th>ACCOUNT_NO</th>\n                <th>CUSTOMER_NAME</th>\n                <th>TRANSACTION_DATE</th>\n                <th>AMOUNT</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>4</td>\n                <td>1004</td>\n                <td>Galileo</td>\n                <td>2024-01-04</td>\n                <td>450</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>5</td>\n                <td>1005</td>\n                <td>Tesla</td>\n                <td>2024-01-05</td>\n                <td>600</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>6</td>\n                <td>1006</td>\n                <td>Hawking</td>\n                <td>2024-01-06</td>\n                <td>800</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 195,
    "Question": "How do you convert data types in SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In Oracle SQL, data type conversion functions are used to convert values from one data type to another.</p>\n    <p>Common functions include \"TO_CHAR\", \"TO_NUMBER\", \"TO_DATE\", \"CAST\", etc. Here's an explanation with examples:</p>\n    <h4 class=\"bold-maroon\">1. \"TO_CHAR\":</h4>\n    <p>Converts a number or date to a string.</p>\n    <h4 class=\"bold-maroon\">&bull; Convert Number to String:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> TO_CHAR<span class=\"SQLKeyword\">(</span>12345<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> char_value\n    <span class=\"SQLKeyword\">FROM</span> DUAL<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <p><b>Output:</b></p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CHAR_VALUE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>12345</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">&bull; Convert Date to String:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> TO_CHAR<span class=\"SQLKeyword\">(</span>SYSDATE<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span><span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> date_value\n    <span class=\"SQLKeyword\">FROM</span> DUAL<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <p><b>Output:</b></p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>DATE_VALUE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>2024-07-24</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">2. \"TO_NUMBER\":</h4>\n    <p>Converts a string to a number.</p>\n    <h4 class=\"bold-maroon\">&bull; Convert String to Number:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> TO_NUMBER<span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'12345'</span><span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> number_value\n    <span class=\"SQLKeyword\">FROM</span> DUAL<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <p><b>Output:</b></p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>NUMBER_VALUE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>12345</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">3. \"TO_DATE\":</h4>\n    <p>Converts a string to a date.</p>\n    <h4 class=\"bold-maroon\">&bull; Convert String to Date:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> TO_DATE<span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'2024-07-24'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span><span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> date_value\n    <span class=\"SQLKeyword\">FROM</span> DUAL<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <p><b>Output:</b></p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>DATE_VALUE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>24-JUL-24</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">4. \"CAST\":</h4>\n    <p>Converts one data type to another, using a general syntax.</p>\n    <h4 class=\"bold-maroon\">&bull; Convert String to Number:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">CAST</span><span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'12345'</span> <span class=\"SQLKeyword\">AS NUMBER</span><span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> number_value\n    <span class=\"SQLKeyword\">FROM</span> DUAL<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <p><b>Output:</b></p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>NUMBER_VALUE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>12345</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">&bull; Convert String to Date:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">CAST</span><span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'2024-07-24'</span> <span class=\"SQLKeyword\">AS DATE</span><span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> date_value\n    <span class=\"SQLKeyword\">FROM</span> DUAL<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <p><b>Output:</b></p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>DATE_VALUE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>24-JUL-24</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 196,
    "Question": "What is a deadlock in databases, and how can it be resolved?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>A deadlock in an Oracle database occurs when two or more sessions permanently block each other because each session is holding a resource that the other sessions are attempting to acquire.</p>\n    <h4 class=\"bold-maroon\">Causes of Deadlocks</h4>\n    <p>Common causes of deadlocks include:</p>\n    <ul>\n        <li><b>Concurrent Updates:</b> Two transactions update rows in different orders.</li>\n        <li><b>Circular Waits:</b> A cycle of transactions where each transaction is waiting for a resource that the next transaction in the cycle holds.</li>\n        <li><b>User-defined Locks:</b> Improper use of user-defined locks can also lead to deadlocks.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Example Scenario</h4>\n    <p>Consider two transactions:</p>\n    <ul>\n        <li><b>Transaction A</b> locks Row 1 and waits for Row 2.</li>\n        <li><b>Transaction B</b> locks Row 2 and waits for Row 1.</li>\n    </ul>\n    <p>Both transactions are now in a state where neither can proceed, resulting in a deadlock.</p>\n    <h4 class=\"bold-maroon\">Detecting Deadlocks</h4>\n    <p>Oracle automatically detects deadlocks and resolves them by rolling back one of the transactions. When a deadlock is detected, Oracle generates a trace file in the user dump destination directory.</p>\n    <h4 class=\"bold-maroon\">Resolving Deadlocks</h4>\n    <p>Strategies for resolving deadlocks include:</p>\n    <ul>\n        <li><b>Analyze Trace Files:</b> Examine the trace files generated by Oracle to understand the cause of the deadlock.</li>\n        <li><b>Consistent Lock Ordering:</b> Ensure that all applications acquire locks on tables and rows in a consistent order to avoid circular waits.</li>\n        <li><b>Shorter Transactions:</b> Keep transactions short and commit them as soon as possible to reduce the likelihood of deadlocks.</li>\n        <li><b>Indexing:</b> Ensure that appropriate indexes are in place to minimize the number of rows locked during a transaction.</li>\n        <li><b>Deadlock Avoidance in Application Code:</b> Modify the application code to avoid deadlocks, e.g., acquire locks in the same order across different transactions.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Example of Resolving a Deadlock:</h4>\n    <h4 class=\"bold-blue\">1. Analyze Trace File</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- DEADLOCK DETECTED</span>\n<span class=\"SQLComment\">-- Current SQL statement for this session:</span>\n<span class=\"SQLKeyword\">UPDATE</span> employees\n<span class=\"SQLKeyword\">SET</span>\n    salary = salary + 1000\n<span class=\"SQLKeyword\">WHERE</span>\n    employee_id = 100<span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Deadlock graph:</span>\n<span class=\"SQLComment\">---------Blocker(s)--------</span>\n<span class=\"SQLComment\">---------Waiter(s)---------</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">2. Review and Modify Application Code:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Transaction A</span>\n<span class=\"SQLKeyword\">BEGIN</span>\n    <span class=\"SQLComment\">-- Acquire lock on table A before table B</span>\n    <span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLOperator\">*</span> <span class=\"SQLKeyword\">FROM</span> table_A <span class=\"SQLKeyword\">WHERE</span> id = 1 <span class=\"SQLKeyword\">FOR UPDATE</span><span class=\"SQLOperator\">;</span>\n    <span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLOperator\">*</span> <span class=\"SQLKeyword\">FROM</span> table_B <span class=\"SQLKeyword\">WHERE</span> id = 2 <span class=\"SQLKeyword\">FOR UPDATE</span><span class=\"SQLOperator\">;</span>\n    <span class=\"SQLKeyword\">UPDATE</span> table_A <span class=\"SQLKeyword\">SET</span> column = value <span class=\"SQLKeyword\">WHERE</span> id = 1<span class=\"SQLOperator\">;</span>\n    <span class=\"SQLKeyword\">UPDATE</span> table_B <span class=\"SQLKeyword\">SET</span> column = value <span class=\"SQLKeyword\">WHERE</span> id = 2<span class=\"SQLOperator\">;</span>\n    <span class=\"SQLKeyword\">COMMIT</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">END</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">3. Implementing Shorter Transactions:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Original long transaction</span>\n<span class=\"SQLKeyword\">BEGIN</span>\n    <span class=\"SQLKeyword\">UPDATE</span> table_a\n    <span class=\"SQLKeyword\">SET</span> column = value\n    <span class=\"SQLKeyword\">WHERE</span> id <span class=\"SQLKeyword\">BETWEEN</span> 1 <span class=\"SQLKeyword\">AND</span> 1000<span class=\"SQLOperator\">;</span>\n    <span class=\"SQLKeyword\">UPDATE</span> table_b\n    <span class=\"SQLKeyword\">SET</span> column = value\n    <span class=\"SQLKeyword\">WHERE</span> id <span class=\"SQLKeyword\">BETWEEN</span> 1 <span class=\"SQLKeyword\">AND</span> 1000<span class=\"SQLOperator\">;</span>\n    <span class=\"SQLKeyword\">COMMIT</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">END</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Split into shorter transactions</span>\n<span class=\"SQLKeyword\">BEGIN</span>\n    <span class=\"SQLKeyword\">UPDATE</span> table_a\n    <span class=\"SQLKeyword\">SET</span> column = value\n    <span class=\"SQLKeyword\">WHERE</span> id <span class=\"SQLKeyword\">BETWEEN</span> 1 <span class=\"SQLKeyword\">AND</span> 100<span class=\"SQLOperator\">;</span>\n    <span class=\"SQLKeyword\">COMMIT</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">END</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">BEGIN</span>\n    <span class=\"SQLKeyword\">UPDATE</span> table_b\n    <span class=\"SQLKeyword\">SET</span> column = value\n    <span class=\"SQLKeyword\">WHERE</span> id <span class=\"SQLKeyword\">BETWEEN</span> 1 <span class=\"SQLKeyword\">AND</span> 100<span class=\"SQLOperator\">;</span>\n    <span class=\"SQLKeyword\">COMMIT</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">END</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 197,
    "Question": "How do you create and use an index-organized table in Oracle?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>An Index-Organized Table (IOT) in Oracle is a type of table where the data is stored in a B-tree index structure, organized according to the primary key.</p>\n    <h4 class=\"bold-maroon\">Benefits of Index-Organized Tables</h4>\n    <ul>\n        <li><b>Faster Access:</b> For queries that access data via the primary key, IOTs can provide faster access since the data is already sorted and stored in the index.</li>\n        <li><b>Reduced Storage:</b> Since the data and index are stored together, it can reduce storage requirements.</li>\n        <li><b>Elimination of Duplicated Data:</b> No need for a separate primary key index, as the primary key index itself is the table.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Creating an Index-Organized Table</h4>\n    <p>Assume a scenario where a table \"employees\" needs to be created as an Index-Organized Table.</p>\n    <h4 class=\"bold-blue\">1. Create an Index-Organized Table:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> employees_iot <span class=\"SQLKeyword\">(</span>\n    employee_id NUMBER<span class=\"SQLOperator\">,</span>\n    last_name VARCHAR2<span class=\"SQLKeyword\">(</span>50<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">,</span>\n    first_name VARCHAR2<span class=\"SQLKeyword\">(</span>50<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">,</span>\n    hire_date DATE<span class=\"SQLOperator\">,</span>\n    salary NUMBER<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLKeyword\">CONSTRAINT</span> pk_employees_iot <span class=\"SQLKeyword\">PRIMARY KEY</span> <span class=\"SQLKeyword\">(</span>employee_id<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">) ORGANIZATION INDEX</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">2. Insert Data:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">INSERT INTO</span> employees_iot <span class=\"SQLKeyword\">(</span>\n    employee_id<span class=\"SQLOperator\">,</span>\n    last_name<span class=\"SQLOperator\">,</span>\n    first_name<span class=\"SQLOperator\">,</span>\n    hire_date<span class=\"SQLOperator\">,</span>\n    salary\n<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>\n    1<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLString\">'Novak'</span><span class=\"SQLOperator\">,</span>\n    <span class=\"SQLString\">'Djokovic'</span><span class=\"SQLOperator\">,</span>\n    <span class=\"SQLKeyword\">TO_DATE</span><span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'2022-01-10'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">,</span>\n    50000\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">INSERT INTO</span> employees_iot <span class=\"SQLKeyword\">(</span>\n    employee_id<span class=\"SQLOperator\">,</span>\n    last_name<span class=\"SQLOperator\">,</span>\n    first_name<span class=\"SQLOperator\">,</span>\n    hire_date<span class=\"SQLOperator\">,</span>\n    salary\n<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>\n    2<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLString\">'LeBron'</span><span class=\"SQLOperator\">,</span>\n    <span class=\"SQLString\">'James'</span><span class=\"SQLOperator\">,</span>\n    <span class=\"SQLKeyword\">TO_DATE</span><span class=\"\nSQLKeyword\">(</span><span class=\"SQLString\">'2023-02-20'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">,</span>\n    60000\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">INSERT INTO</span> employees_iot <span class=\"SQLKeyword\">(</span>\n    employee_id<span class=\"SQLOperator\">,</span>\n    last_name<span class=\"SQLOperator\">,</span>\n    first_name<span class=\"SQLOperator\">,</span>\n    hire_date<span class=\"SQLOperator\">,</span>\n    salary\n<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>\n    3<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLString\">'Ashleigh'</span><span class=\"SQLOperator\">,</span>\n    <span class=\"SQLString\">'Barty'</span><span class=\"SQLOperator\">,</span>\n    <span class=\"SQLKeyword\">TO_DATE</span><span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'2024-03-30'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">,</span>\n    55000\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">3. Query Data:</h4>\n    <p>Since the table is organized by \"employee_id\", queries using this column will benefit from faster access times.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLOperator\">*</span> <span class=\"SQLKeyword\">FROM</span> employees_iot\n   <span class=\"SQLKeyword\">WHERE</span> employee_id = 2<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 198,
    "Question": "What are the differences between BLOB, CLOB, and NCLOB data types?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In Oracle, BLOB, CLOB, and NCLOB are data types used to store large amounts of data.</p>\n    <h4 class=\"bold-maroon\">BLOB (Binary Large Object)</h4>\n    <ul>\n        <li><b>Storage:</b> Used to store binary data, such as documents, images, audio, video, and other multimedia files.</li>\n        <li><b>Character Set:</b> Not associated with a character set, as it stores binary data.</li>\n        <li><b>Maximum Size:</b> Can store up to 4 GB of binary data.</li>\n        <li><b>Usage:</b> Suitable for storing large binary data that does not require character set conversion.</li>\n    </ul>\n    <h4 class=\"bold-blue\">Example Usage:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> multimedia <span class=\"SQLKeyword\">(</span>\n    id NUMBER <span class=\"SQLKeyword\">PRIMARY KEY</span><span class=\"SQLOperator\">,</span>\n    media BLOB\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Insert binary data into the BLOB column</span>\n<span class=\"SQLKeyword\">INSERT INTO</span> multimedia <span class=\"SQLKeyword\">(</span>id<span class=\"SQLOperator\">,</span> media<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>1<span class=\"SQLOperator\">,</span> <span class=\"SQLFunction\">EMPTY_BLOB</span><span class=\"SQLKeyword\">()</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">CLOB (Character Large Object)</h4>\n    <ul>\n        <li><b>Storage:</b> Used to store large amounts of character data, such as text documents, HTML, XML, etc.</li>\n        <li><b>Character Set:</b> Associated with the database's character set, meaning it stores data in the database character set.</li>\n        <li><b>Maximum Size:</b> Can store up to 4 GB of character data.</li>\n        <li><b>Usage:</b> Suitable for storing large amounts of text data.</li>\n    </ul>\n    <h4 class=\"bold-blue\">Example Usage:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> documents <span class=\"SQLKeyword\">(</span>\n    id NUMBER <span class=\"SQLKeyword\">PRIMARY KEY</span><span class=\"SQLOperator\">,</span>\n    content CLOB\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Insert character data into the CLOB column</span>\n<span class=\"SQLKeyword\">INSERT INTO</span> documents <span class=\"SQLKeyword\">(</span>id<span class=\"SQLOperator\">,</span> content<span class=\"SQLKeyword\">)</span> \n    <span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>1<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'This is a large text document...'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">NCLOB (National Character Large Object)</h4>\n    <ul>\n        <li><b>Storage:</b> Used to store large amounts of character data in the National Character Set\n (NCHAR), which is typically UTF-16.</li>\n        <li><b>Character Set:</b> Associated with the national character set, allowing for storage of characters that may not be supported by the database's default character set.</li>\n        <li><b>Maximum Size:</b> Can store up to 4 GB of character data.</li>\n        <li><b>Usage:</b> Suitable for storing large amounts of text data in a specific national character set.</li>\n    </ul>\n    <h4 class=\"bold-blue\">Example Usage:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> translations <span class=\"SQLKeyword\">(</span>\n    id      NUMBER <span class=\"SQLKeyword\">PRIMARY KEY</span><span class=\"SQLOperator\">,</span>\n    content NCLOB\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Insert character data into the NCLOB column</span>\n<span class=\"SQLKeyword\">INSERT INTO</span> translations <span class=\"SQLKeyword\">(</span>\n    id<span class=\"SQLOperator\">,</span>\n    content\n<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>\n1<span class=\"SQLOperator\">,</span>\n<span class=\"SQLKeyword\">N</span><span class=\"SQLString\">'This is a large text document in the national character set...'</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Summary of Differences:</h4>\n<div class=\"scrollable-container\">\n    <table class=\"tg\">\n<thead>\n  <tr>\n    <th class=\"tg-0pky\">FEATURE</th>\n    <th class=\"tg-0pky\">BLOB</th>\n    <th class=\"tg-0pky\">CLOB</th>\n    <th class=\"tg-0pky\">NCLOB</th>\n  </tr>\n</thead>\n<tbody>\n  <tr class=\"input-row-odd\">\n    <td class=\"tg-0pky\">Data Type</td>\n    <td class=\"tg-0pky\">Binary Data</td>\n    <td class=\"tg-0pky\">Character Data</td>\n    <td class=\"tg-0pky\">National Character Data</td>\n  </tr>\n  <tr class=\"input-row-even\">\n    <td class=\"tg-0pky\">Character Set</td>\n    <td class=\"tg-0pky\">None</td>\n    <td class=\"tg-0pky\">Database Character Set</td>\n    <td class=\"tg-0pky\">National Character Set</td>\n  </tr>\n  <tr class=\"input-row-odd\">\n    <td class=\"tg-0pky\">Max Size</td>\n    <td class=\"tg-0pky\">4 GB</td>\n    <td class=\"tg-0pky\">4 GB</td>\n    <td class=\"tg-0pky\">4 GB</td>\n  </tr>\n  <tr class=\"input-row-even\">\n    <td class=\"tg-0pky\">Use Case</td>\n    <td class=\"tg-0pky\">Multimedia files</td>\n    <td class=\"tg-0pky\">Large text documents</td>\n    <td class=\"tg-0pky\">Large text in national set</td>\n  </tr>\n</tbody>\n        </table>\n    </div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 199,
    "Question": "How do you delete large amounts of data without slowing down the database?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Deleting large amounts of data from an Oracle database can be resource-intensive and can impact the performance of the database. Here are some strategies to delete large amounts of data without significantly slowing down the Oracle database:</p>\n    <h4 class=\"bold-maroon\">Strategies to Delete Large Amounts of Data</h4>\n    <ul>\n        <li><b>Use Batches</b></li>\n        <li><b>Use Partitioning</b></li>\n        <li><b>Disable Constraints and Indexes</b></li>\n        <li><b>Use Parallel DML</b></li>\n        <li><b>Use DELETE with ROWNUM or ROWID</b></li>\n        <li><b>Use TRUNCATE for Entire Table</b></li>\n    </ul>\n    <h4 class=\"bold-blue\">1. Use Batches:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DECLARE</span>\n    l_rows_deleted NUMBER<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">BEGIN</span>\n    <span class=\"SQLKeyword\">LOOP</span>\n        <span class=\"SQLKeyword\">DELETE FROM</span> large_table\n        <span class=\"SQLKeyword\">WHERE</span>\n            ROWNUM <span class=\"SQLOperator\"><=</span> 10000<span class=\"SQLOperator\">;</span>\n        l_rows_deleted <span class=\"SQLKeyword\">:=</span> SQL%rowcount<span class=\"SQLOperator\">;</span>\n        <span class=\"SQLKeyword\">COMMIT</span><span class=\"SQLOperator\">;</span>\n        <span class=\"SQLKeyword\">EXIT</span> <span class=\"SQLKeyword\">WHEN</span> l_rows_deleted <span class=\"SQLOperator\"><</span> 10000<span class=\"SQLOperator\">;</span>\n    <span class=\"SQLKeyword\">END LOOP</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">END</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">2. Use Partitioning:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">ALTER TABLE</span> large_table\n   <span class=\"SQLKeyword\">DROP PARTITION</span> partition_name<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">3. Disable Constraints and Indexes:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Disable constraints and indexes</span>\n<span class=\"SQLKeyword\">ALTER TABLE</span> large_table <span class=\"SQLKeyword\">DISABLE CONSTRAINT</span> constraint_name<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">ALTER INDEX</span> index_name <span class=\"SQLKeyword\">UNUSABLE</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Perform the delete</span>\n<span class=\"SQLKeyword\">DECLARE</span>\n    l_rows_deleted NUMBER<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">BEGIN</span>\n    <span class=\"SQLKeyword\">LOOP</span>\n        <span class=\"SQLKeyword\">DELETE FROM</span> large_table\n        <span class=\"SQLKeyword\">WHERE</span>\n            ROWNUM <span class=\"SQLOperator\"><=</span> 10000<span class=\"SQLOperator\">;</span>\n        l_rows_deleted <span class=\"SQLKeyword\">:=</span> SQL%rowcount<span class=\"SQLOperator\">;</span>\n        <span class=\"SQLKeyword\">COMMIT</span><span class=\"SQLOperator\">;</span>\n        <span class=\"SQLKeyword\">EXIT</span> <span class=\"SQLKeyword\">WHEN</span> l_rows_deleted <span class=\"SQLOperator\"><</span> 10000<span class=\"SQLOperator\">;</span>\n    <span class=\"SQLKeyword\">END LOOP</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">END</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Re-enable constraints and indexes</span>\n<span class=\"SQLKeyword\">ALTER TABLE</span> large_table <span class=\"SQLKeyword\">ENABLE CONSTRAINT</span> constraint_name<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">ALTER INDEX</span> index_name <span class=\"SQLKeyword\">REBUILD</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">4. Use Parallel DML:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">ALTER SESSION ENABLE PARALLEL DML</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">DECLARE</span>\n    l_rows_deleted NUMBER<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">BEGIN</span>\n    <span class=\"SQLKeyword\">LOOP</span>\n        <span class=\"SQLKeyword\">DELETE</span> <span class=\"SQLComment\">/*+ PARALLEL(large_table, 4) */</span> <span class=\"SQLKeyword\">FROM</span> large_table\n        <span class=\"SQLKeyword\">WHERE</span>\n            ROWNUM <span class=\"SQLOperator\"><=</span> 10000<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n        l_rows_deleted <span class=\"SQLKeyword\">:=</span> SQL%rowcount<span class=\"SQLOperator\">;</span>\n        <span class=\"SQLKeyword\">COMMIT</span><span class=\"SQLOperator\">;</span>\n        <span class=\"SQLKeyword\">EXIT</span> <span class=\"SQLKeyword\">WHEN</span> l_rows_deleted <span class=\"SQLOperator\"><</span> 10000<span class=\"SQLOperator\">;</span>\n    <span class=\"SQLKeyword\">END LOOP</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">END</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">5. Use DELETE with ROWNUM or ROWID:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DECLARE</span>\n    l_rows_deleted NUMBER<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">BEGIN</span>\n    <span class=\"SQLKeyword\">LOOP</span>\n        <span class=\"SQLKeyword\">DELETE FROM</span> large_table\n        <span class=\"SQLKeyword\">WHERE</span>  ROWID <span class=\"SQLKeyword\">IN</span> <span class=\"SQLKeyword\">(</span><span class=\"SQLKeyword\">SELECT</span> ROWID\n                         <span class=\"SQLKeyword\">FROM</span>   large_table\n                         <span class=\"SQLKeyword\">WHERE</span>  ROWNUM <span class=\"SQLOperator\"><=</span> 10000<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n        l_rows_deleted <span class=\"SQLKeyword\">:=</span> SQL%rowcount<span class=\"SQLOperator\">;</span>\n        <span class=\"SQLKeyword\">COMMIT</span><span class=\"SQLOperator\">;</span>\n        <span class=\"SQLKeyword\">EXIT</span> <span class=\"SQLKeyword\">WHEN</span> l_rows_deleted <span class=\"SQLOperator\"><</span> 10000<span class=\"SQLOperator\">;</span>\n    <span class=\"SQLKeyword\">END LOOP</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">END</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-blue\">6. Use TRUNCATE for Entire Table:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">TRUNCATE TABLE</span> large_table<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 200,
    "Question": "How do you manage users and roles in Oracle?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Managing users and roles in Oracle is a fundamental aspect of database administration. This involves creating, modifying, and deleting user accounts, as well as creating roles to group privileges and simplify privilege management.</p>\n    <h4 class=\"bold-maroon\">Managing Users</h4>\n    <p><b>1. Creating Users:</b></p>\n    <p>To create a new user, use the \"CREATE USER\" statement.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE USER</span> john_cena <span class=\"SQLKeyword\">IDENTIFIED BY</span> password123<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This command creates a new user named \"john_cena\" with the password \"password123\".</p>\n    <p><b>2. Granting Privileges:</b></p>\n    <p>After creating a user, typically grant some privileges to allow the user to perform database operations.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">GRANT CONNECT</span><span class=\"SQLOperator\">,</span> <span class=\"SQLKeyword\">RESOURCE TO</span> john_cena<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This command grants the \"CONNECT\" and \"RESOURCE\" roles to \"john_cena\".</p>\n    <p><b>3. Modifying Users:</b></p>\n    <p>To modify user attributes, use the \"ALTER USER\" statement.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">ALTER USER</span> john_cena <span class=\"SQLKeyword\">IDENTIFIED BY</span> new_password123<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This command changes the password for \"john_cena\" to \"new_password123\".</p>\n    <p><b>4. Revoking Privileges:</b></p>\n    <p>To revoke privileges from a user, use the \"REVOKE\" statement.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">REVOKE CONNECT</span><span class=\"SQLOperator\">,</span> <span class=\"SQLKeyword\">RESOURCE FROM</span> john_cena<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This command revokes the \"CONNECT\" and \"RESOURCE\" roles from \"john_cena\".</p>\n    <p><b>5. Dropping Users:</b></p>\n    <p>To delete a user, use the \"DROP USER\" statement. Be cautious as this will remove the user and all their schema objects.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DROP USER</span> john_cena <span class=\"SQLKeyword\">CASCADE</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This command drops the user \"john_cena\" and all objects owned by them.</p>\n    <h4 class=\"bold-maroon\">Managing Roles</h4>\n    <p><b>1. Creating Roles:</b></p>\n    <p>Roles are named groups of related privileges that can be granted to users or other roles.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE ROLE</span> read_only<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This command creates a role named \"read_only\".</p>\n    <p><b>2. Granting Privileges to Roles:</b></p>\n    <p>You can grant privileges to a role, which can then be granted to users.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">GRANT SELECT</span> <span class=\"SQLKeyword\">ON</span> employees <span class=\"SQLKeyword\">TO</span> read_only<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This command grants the \"SELECT\" privilege on the \"EMPLOYEES\" table to the \"read_only\" role.</p>\n    <p><b>3. Granting Roles to Users:</b></p>\n    <p>After creating roles and assigning privileges, these roles can be granted to users.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">GRANT</span> read_only <span class=\"SQLKeyword\">TO</span> john_cena<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This command grants the \"read_only\" role to \"john_cena\".</p>\n    <p><b>4. Modifying Roles:</b></p>\n    <p>To modify role attributes, use the \"ALTER ROLE\" statement.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">ALTER ROLE</span> read_only <span class=\"SQLKeyword\">NOT IDENTIFIED</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This command alters the \"read_only\" role to make it a non-authenticated role.</p>\n    <p><b>5. Revoking Roles from Users:</b></p>\n    <p>To revoke a role from a user, use the \"REVOKE\" statement.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">REVOKE</span> read_only <span class=\"SQLKeyword\">FROM</span> john_cena<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This command revokes the \"read_only\" role from \"john_cena\".</p>\n    <p><b>6. Dropping Roles:</b></p>\n    <p>To delete a role, use the \"DROP ROLE\" statement.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DROP ROLE</span> read_only<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>This command drops the \"read_only\" role.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 201,
    "Question": "What are the benefits and drawbacks of partitioning tables?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        ul {\n            margin-bottom: 20px;\n        }\n        li {\n            margin-bottom: 10px;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n    </style>\n</head>\n<body>\n    <p>Partitioning tables in Oracle provides several benefits, particularly for large datasets, but it also comes with some drawbacks. Below is a detailed look at both the benefits and drawbacks of partitioning tables in Oracle:</p>\n    <h4 class=\"bold-maroon\">Benefits of Partitioning Tables</h4>\n    <ul>\n        <li><strong>Improved Performance</strong>\n            <ul>\n                <li><strong>Query Performance:</strong> Partitioning can significantly enhance query performance by allowing the database to scan only relevant partitions rather than the entire table (partition pruning).</li>\n                <li><strong>Parallelism:</strong> Partitioning enables parallel processing, where different partitions can be processed by different threads, leading to faster query execution.</li>\n            </ul>\n        </li>\n        <li><strong>Manageability</strong>\n            <ul>\n                <li><strong>Data Maintenance:</strong> It simplifies data maintenance tasks like loading, deleting, and archiving data. For example, dropping a partition is much faster than deleting a large number of rows.</li>\n                <li><strong>Backup and Recovery:</strong> Allows partition-level backup and recovery, which can be faster and more efficient compared to backing up the entire table.</li>\n            </ul>\n        </li>\n        <li><strong>Scalability</strong>\n            <ul>\n                <li><strong>Handling Large Datasets:</strong> Partitioning makes it easier to manage and query very large tables by breaking them into smaller, more manageable pieces.</li>\n                <li><strong>Table Growth:</strong> Supports better management of table growth and can improve the overall scalability of the database.</li>\n            </ul>\n        </li>\n        <li><strong>Availability</strong>\n            <ul>\n                <li><strong>Partition Independence:</strong> Individual partitions can be managed independently, which can improve the availability of the rest of the table. For instance, maintenance operations on one partition do not affect others.</li>\n            </ul>\n        </li>\n        <li><strong>Efficient Data Management</strong>\n            <ul>\n                <li><strong>Local Indexes:</strong> Partitioning allows the use of local indexes, which can improve index maintenance and performance.</li>\n                <li><strong>Partition-Wise Joins:</strong> Improves the performance of joins by allowing partition-wise joins, where partitions from two tables are joined directly.</li>\n            </ul>\n        </li>\n    </ul>\n    <h4 class=\"bold-maroon\">Drawbacks of Partitioning Tables</h4>\n    <ul>\n        <li><strong>Complexity</strong>\n            <ul>\n                <li><strong>Administration Overhead:</strong> Managing partitions adds complexity to database administration. Tasks such as partitioning strategies, monitoring, and maintenance require more effort and expertise.</li>\n                <li><strong>Application Changes:</strong> Applications may need to be modified to fully take advantage of partitioning, such as ensuring queries are written to benefit from partition pruning.</li>\n            </ul>\n        </li>\n        <li><strong>Resource Usage</strong>\n            <ul>\n                <li><strong>Increased Storage:</strong> Each partition and its associated indexes and metadata can consume additional storage space.</li>\n                <li><strong>Resource Consumption:</strong> Partitioning operations, such as splitting or merging partitions, can be resource-intensive and may affect overall database performance if not managed properly.</li>\n            </ul>\n        </li>\n        <li><strong>Limitations</strong>\n            <ul>\n                <li><strong>Not Suitable for All Tables:</strong> Partitioning is beneficial primarily for very large tables. For smaller tables, the overhead may outweigh the benefits.</li>\n                <li><strong>Limited Partition Keys:</strong> Choosing the right partition key is crucial. An inappropriate key can lead to uneven data distribution and poor performance.</li>\n            </ul>\n        </li>\n        <li><strong>Performance Overhead</strong>\n            <ul>\n                <li><strong>DML Operations:</strong> While SELECT queries can benefit from partitioning, DML operations (INSERT, UPDATE, DELETE) can sometimes be slower due to the need to manage partitions and their metadata.</li>\n            </ul>\n        </li>\n        <li><strong>Backup and Recovery</strong>\n            <ul>\n                <li><strong>Complexity in Backup:</strong> While partition-level backups can be faster, they add complexity to the backup and recovery strategy, especially in ensuring consistency across partitions.</li>\n            </ul>\n        </li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 202,
    "Question": "What is the CONNECT BY clause used for in SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        h4 {\n            color: #B61326;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n<p>The \"CONNECT BY\" clause in Oracle SQL is used for hierarchical queries. It allows retrieval of data that has a hierarchical relationship, such as organizational charts, bill of materials, or directory structures. This clause works in conjunction with \"START WITH\" to specify the root of the hierarchy and \"CONNECT BY\" to define the relationship between parent and child rows.</p>\n<h4 class=\"bold-maroon\">Syntax</h4>\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    column1<span class=\"SQLOperator\">,</span>\n    column2<span class=\"SQLOperator\">,</span> <span class=\"SQLOperator\">...</span>\n<span class=\"SQLKeyword\">FROM</span> table\n<span class=\"SQLKeyword\">START WITH</span>\n    condition\n<span class=\"SQLKeyword\">CONNECT BY</span>\n    <span class=\"SQLKeyword\">PRIOR</span>\n        parent_column = child_column<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Key Components</h4>\n<ul>\n    <li><strong>\"START WITH condition\"</strong>: Specifies the root row(s) of the hierarchy.</li>\n    <li><strong>\"CONNECT BY PRIOR parent_column = child_column\"</strong>: Defines the hierarchical relationship. \"PRIOR\" refers to the parent row in the hierarchy.</li>\n</ul>\n<h4 class=\"bold-maroon\">Example Scenario</h4>\nConsider an \"EMPLOYEES\" table with the following structure:\n<div class=\"scrollable-container\">\n    <table class=\"tg\">\n    <thead>\n        <tr>\n            <th>EMPLOYEE_ID</th>\n            <th>NAME</th>\n            <th>MANAGER_ID</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr class=\"input-row-even\">\n            <td>1</td>\n            <td>Albert</td>\n            <td></td>\n        </tr>\n        <tr class=\"input-row-odd\">\n            <td>2</td>\n            <td>Tesla</td>\n            <td>1</td>\n        </tr>\n        <tr class=\"input-row-even\">\n            <td>3</td>\n            <td>Curie</td>\n            <td>1</td>\n        </tr>\n        <tr class=\"input-row-odd\">\n            <td>4</td>\n            <td>Shakuntala</td>\n            <td>2</td>\n        </tr>\n        <tr class=\"input-row-even\">\n            <td>5</td>\n            <td>Tracy</td>\n            <td>2</td>\n        </tr>\n        <tr class=\"input-row-odd\">\n            <td>6</td>\n            <td>Ramanujan</td>\n            <td>3</td>\n        </tr>\n    </tbody>\n        </table>\n    </div>\n<h4 class=\"bold-blue\">Example Query</h4>\nTo retrieve the hierarchical relationship from this table, the \"CONNECT BY\" clause can be used:\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    employee_id<span class=\"SQLOperator\">,</span>\n    name<span class=\"SQLOperator\">,</span>\n    manager_id<span class=\"SQLOperator\">,</span>\n    level\n<span class=\"SQLKeyword\">FROM</span>\n    employees\n<span class=\"SQLKeyword\">START WITH</span>\n    manager_id <span class=\"SQLKeyword\">IS NULL</span>\n<span class=\"SQLKeyword\">CONNECT BY</span>\n    <span class=\"SQLKeyword\">PRIOR</span> employee_id = manager_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Explanation:</h4>\n<ul>\n    <li><strong>\"START WITH manager_id IS NULL\":</strong> Identifies the root of the hierarchy, which is Albert (the top-level manager with no manager).</li>\n    <li><strong>\"CONNECT BY PRIOR employee_id = manager_id\":</strong> Establishes the hierarchical relationship, connecting employees to their managers.</li>\n</ul>\n<h4 class=\"bold-maroon\">Output:</h4>\nThe query will return a result set that shows the hierarchical structure, including the level of each employee in the hierarchy:\n<div class=\"scrollable-container\">\n    <table class=\"tg\">\n    <thead>\n        <tr>\n            <th>EMPLOYEE_ID</th>\n            <th>NAME</th>\n            <th>MANAGER_ID</th>\n            <th>LEVEL</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr class=\"input-row-even\">\n            <td>1</td>\n            <td>Albert</td>\n            <td></td>\n            <td>1</td>\n        </tr>\n        <tr class=\"input-row-odd\">\n            <td>2</td>\n            <td>Tesla</td>\n            <td>1</td>\n            <td>2</td>\n        </tr>\n        <tr class=\"input-row-even\">\n            <td>3</td>\n            <td>Curie</td>\n            <td>1</td>\n            <td>2</td>\n        </tr>\n        <tr class=\"input-row-odd\">\n            <td>4</td>\n            <td>Shakuntala</td>\n            <td>2</td>\n            <td>3</td>\n        </tr>\n        <tr class=\"input-row-even\">\n            <td>5</td>\n            <td>Tracy</td>\n            <td>2</td>\n            <td>3</td>\n        </tr>\n        <tr class=\"input-row-odd\">\n            <td>6</td>\n            <td>Ramanujan</td>\n            <td>3</td>\n            <td>3</td>\n        </tr>\n    </tbody>\n        </table>\n    </div>\n<h4 class=\"bold-maroon\">Additional Features</h4>\n<ul>\n    <li><strong>\"LEVEL\" Pseudocolumn:</strong> Indicates the level in the hierarchy (starting with 1 for the root row).</li>\n    <li><strong>\"SYS_CONNECT_BY_PATH\" Function:</strong> Returns the path from the root to the current row.</li>\n</ul>\n<h4 class=\"bold-blue\">Example Using \"SYS_CONNECT_BY_PATH\":</h4>\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    employee_id<span class=\"SQLOperator\">,</span>\n    name<span class=\"SQLOperator\">,</span>\n    manager_id<span class=\"SQLOperator\">,</span>\n    level<span class=\"SQLOperator\">,</span>\n    sys_connect_by_path<span class=\"SQLKeyword\">(</span>name<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">' -&gt; '</span><span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> path\n<span class=\"SQLKeyword\">FROM</span>\n    employees\n<span class=\"SQLKeyword\">START WITH</span>\n    manager_id <span class=\"SQLKeyword\">IS NULL</span>\n<span class=\"SQLKeyword\">CONNECT BY</span>\n    <span class=\"SQLKeyword\">PRIOR</span> employee_id = manager_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Output with Path:</h4>\n<div class=\"scrollable-container\">\n    <table class=\"tg\">\n    <thead>\n        <tr>\n            <th>EMPLOYEE_ID</th>\n            <th>NAME</th>\n            <th>MANAGER_ID</th>\n            <th>LEVEL</th>\n            <th>PATH</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr class=\"input-row-even\">\n            <td>1</td>\n            <td>Albert</td>\n            <td></td>\n            <td>1</td>\n            <td>-> Albert</td>\n        </tr>\n        <tr class=\"input-row-odd\">\n            <td>2</td>\n            <td>Tesla</td>\n            <td>1</td>\n            <td>2</td>\n            <td>-> Albert -> Tesla</td>\n        </tr>\n        <tr class=\"input-row-even\">\n            <td>3</td>\n            <td>Curie</td>\n            <td>1</td>\n            <td>2</td>\n            <td>-> Albert -> Curie</td>\n        </tr>\n        <tr class=\"input-row-odd\">\n            <td>4</td>\n            <td>Shakuntala</td>\n            <td>2</td>\n            <td>3</td>\n            <td>-> Albert -> Tesla -> Shakuntala</td>\n        </tr>\n        <tr class=\"input-row-even\">\n            <td>5</td>\n            <td>Tracy</td>\n            <td>2</td>\n            <td>3</td>\n            <td>-> Albert -> Tesla -> Tracy</td>\n        </tr>\n        <tr class=\"input-row-odd\">\n            <td>6</td>\n            <td>Ramanujan</td>\n            <td>3</td>\n            <td>3</td>\n            <td>-> Albert -> Curie -> Ramanujan</td>\n        </tr>\n    </tbody>\n        </table>\n    </div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 203,
    "Question": "How do you check the impact of a specific index on query performance?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        h4 {\n            color: #B61326;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n<p>Checking the impact of a specific index on query performance in Oracle involves several steps. These steps include creating the index, capturing the execution plan before and after creating the index, and analyzing the performance metrics. Here's a detailed approach:</p>\n<h4 class=\"bold-maroon\">Steps to Check the Impact of a Specific Index on Query Performance</h4>\n<ol>\n    <li><strong>Capture the Execution Plan Before Creating the Index</strong></li>\n    <li><strong>Create the Index</strong></li>\n    <li><strong>Capture the Execution Plan After Creating the Index</strong></li>\n    <li><strong>Compare the Execution Plans</strong></li>\n    <li><strong>Run Performance Tests</strong></li>\n    <li><strong>Analyze Performance Metrics</strong></li>\n</ol>\n<h4 class=\"bold-maroon\">Step-by-Step Guide</h4>\n<h4 class=\"bold-blue\">1. Capture the Execution Plan Before Creating the Index</h4>\nBefore creating the index, capture the execution plan of the query to understand its current performance.\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">EXPLAIN PLAN</span>\n    <span class=\"SQLKeyword\">FOR</span>\n<span class=\"SQLKeyword\">SELECT</span>\n    <span class=\"SQLOperator\">*</span>\n<span class=\"SQLKeyword\">FROM</span>\n    employees\n<span class=\"SQLKeyword\">WHERE</span>\n    last_name = <span class=\"SQLString\">'Ramanujan'</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">SELECT</span>\n    <span class=\"SQLOperator\">*</span>\n<span class=\"SQLKeyword\">FROM</span>\n    TABLE <span class=\"SQLKeyword\">(</span> dbms_xplan.display <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\nThis command generates and displays the execution plan for the query.\n<h4 class=\"bold-blue\">2. Create the Index</h4>\nCreate the index on the column that is frequently used in the WHERE clause or join conditions.\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE INDEX</span> idx_employees_last_name <span class=\"SQLKeyword\">ON</span>\n    employees <span class=\"SQLKeyword\">(</span>\n        last_name\n    <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-blue\">3. Capture the Execution Plan After Creating the Index</h4>\nAfter creating the index, capture the execution plan of the same query to see if the index is being used and how it affects the plan.\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\n\">EXPLAIN PLAN</span>\n    <span class=\"SQLKeyword\">FOR</span>\n<span class=\"SQLKeyword\">SELECT</span>\n    <span class=\"SQLOperator\">*</span>\n<span class=\"SQLKeyword\">FROM</span>\n    employees\n<span class=\"SQLKeyword\">WHERE</span>\n    last_name = <span class=\"SQLString\">'Ramanujan'</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">SELECT</span>\n    <span class=\"SQLOperator\">*</span>\n<span class=\"SQLKeyword\">FROM</span>\n    TABLE <span class=\"SQLKeyword\">(</span> dbms_xplan.display <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">4. Compare the Execution Plans</h4>\nCompare the execution plans captured before and after creating the index to see if the new index is being used and if the cost of the query has improved.\n<ul>\n    <li><strong>Check for Index Usage:</strong> Look for the presence of an INDEX SCAN operation in the new execution plan.</li>\n    <li><strong>Compare Cost:</strong> Compare the cost of the query before and after the index creation. A lower cost typically indicates better performance.</li>\n</ul>\n<h4 class=\"bold-blue\">5. Run Performance Tests</h4>\nExecute the query multiple times and measure the execution time before and after creating the index.\n<h4 class=\"bold-maroon\">Before Creating the Index:</h4>\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SET TIMING ON</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLOperator\">*</span>\n<span class=\"SQLKeyword\">FROM</span> employees\n<span class=\"SQLKeyword\">WHERE</span> last_name = <span class=\"SQLString\">'Ramanujan'</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">SET TIMING OFF</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">After Creating the Index:</h4>\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SET TIMING ON</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLOperator\">*</span>\n<span class=\"SQLKeyword\">FROM</span> employees\n<span class=\"SQLKeyword\">WHERE</span> last_name = <span class=\"SQLString\">'Ramanujan'</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">SET TIMING OFF</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Conclusion:</h4>\n</p>By following these steps, the impact of a specific index on query performance in Oracle can be systematically evaluated, ensuring that the index creation leads to the desired performance improvements.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 204,
    "Question": "What is a nested table in Oracle?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        h4 {\n            color: #B61326;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n<p>A nested table in Oracle SQL is a table within a table. It allows storing a collection of items within a single column in a database table, making it a form of multi-valued attribute. This can be useful for scenarios where multiple values need to be stored in a single field, which can then be treated as a collection.</p>\n<h4 class=\"bold-maroon\">Key Concepts</h4>\n<ul>\n    <li><strong>Nested Table Type:</strong> A user-defined type that describes the structure of the nested table.</li>\n    <li><strong>Column of Nested Table Type:</strong> A column in a table that is defined to hold a nested table.</li>\n</ul>\n<h4 class=\"bold-blue\">Example Scenario</h4>\nConsider a database with an \"ORDERS\" table. Each order can have multiple items. Instead of having a separate \"ORDER_ITEMS\" table, a nested table can be used to store the items within the \"ORDERS\" table.\n<h4 class=\"bold-maroon\">Step-by-Step Example</h4>\n<h4 class=\"bold-blue\">1. Create a Nested Table Type</h4>\nFirst, create a nested table type to describe the structure of the items.\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE OR REPLACE TYPE</span> item_type <span class=\"SQLKeyword\">AS OBJECT</span> <span class=\"SQLKeyword\">(</span>\n        item_id   NUMBER<span class=\"SQLOperator\">,</span>\n        item_name VARCHAR2<span class=\"SQLKeyword\">(</span>100<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">,</span>\n        quantity  NUMBER<span class=\"SQLOperator\">,</span>\n        price     NUMBER\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">/</span>\n<span class=\"SQLKeyword\">CREATE OR REPLACE TYPE</span> item_table <span class=\"SQLKeyword\">AS</span>\n    <span class=\"SQLKeyword\">TABLE OF</span> item_type<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">/</span>\n</pre>\n</div>\n<h4 class=\"bold-blue\">2. Create the Orders Table with a Nested Table Column</h4>\nCreate the \"ORDERS\" table with a column that uses the nested table type.\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> orders <span class=\"SQLKeyword\">(</span>\norder_id NUMBER <span class=\"SQLKeyword\">PRIMARY KEY</span><span class=\"SQLOperator\">,</span>\ncustomer_id NUMBER<span class=\"SQLOperator\">,</span>\norder_date DATE<span class=\"SQLOperator\">,</span>\nitems item_table\n<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">NESTED TABLE</span> items <span class=\"SQLKeyword\">STORE AS</span> items_store<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-blue\">3. Insert Data into the ORDERS Table</h4>\nInsert data into the \"ORDERS\" table,\n including nested items.\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">INSERT INTO</span> orders <span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>\n    1<span class=\"SQLOperator\">,</span>\n    101<span class=\"SQLOperator\">,</span>\n    sysdate<span class=\"SQLOperator\">,</span>\n    item_table<span class=\"SQLKeyword\">(</span>item_type<span class=\"SQLKeyword\">(</span>1<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'Laptop'</span><span class=\"SQLOperator\">,</span> 1<span class=\"SQLOperator\">,</span> 1200<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">,</span>\n               item_type<span class=\"SQLKeyword\">(</span>2<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'Mouse'</span><span class=\"SQLOperator\">,</span> 2<span class=\"SQLOperator\">,</span> 40<span class=\"SQLKeyword\">)</span><span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">INSERT INTO</span> orders <span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>\n    2<span class=\"SQLOperator\">,</span>\n    102<span class=\"SQLOperator\">,</span>\n    sysdate<span class=\"SQLOperator\">,</span>\n    item_table<span class=\"SQLKeyword\">(</span>item_type<span class=\"SQLKeyword\">(</span>3<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'Monitor'</span><span class=\"SQLOperator\">,</span> 1<span class=\"SQLOperator\">,</span> 300<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">,</span>\n               item_type<span class=\"SQLKeyword\">(</span>4<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'Keyboard'</span><span class=\"SQLOperator\">,</span> 1<span class=\"SQLOperator\">,</span> 50<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">,</span>\n               item_type<span class=\"SQLKeyword\">(</span>5<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'USB Drive'</span><span class=\"SQLOperator\">,</span> 5<span class=\"SQLOperator\">,</span> 20<span class=\"SQLKeyword\">)</span><span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-blue\">4. Extract Data from the Orders Table</h4>\nQuery the orders and their nested items.\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    o.order_id<span class=\"SQLOperator\">,</span>\n    o.customer_id<span class=\"SQLOperator\">,</span>\n    o.order_date<span class=\"SQLOperator\">,</span>\n    i.item_id<span class=\"SQLOperator\">,</span>\n    i.item_name<span class=\"SQLOperator\">,</span>\n    i.quantity<span class=\"SQLOperator\">,</span>\n    i.price\n<span class=\"SQLKeyword\">FROM</span>\n    orders            o<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLKeyword\">TABLE (</span> o.items <span class=\"SQLKeyword\">)</span> i<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Output:</h4>\n<div class=\"scrollable-container\">\n    <table class=\"tg\">\n    <thead>\n        <tr>\n            <th>ORDER_ID</th>\n            <th>CUSTOMER_ID</th>\n            <th>ORDER_DATE</th>\n            <th>ITEM_ID</th>\n            <th>ITEM_NAME</th>\n            <th>QUANTITY</th>\n            <th>PRICE</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr class=\"input-row-even\">\n            <td>1</td>\n            <td>101</td>\n            <td>07-24-2024 19:11:59</td>\n            <td>1</td>\n            <td>Laptop</td>\n            <td>1</td>\n            <td>1200</td>\n        </tr>\n        <tr class=\"input-row-odd\">\n            <td>1</td>\n            <td>101</td>\n            <td>07-24-2024 19:11:59</td>\n            <td>2</td>\n            <td>Mouse</td>\n            <td>2</td>\n            <td>40</td>\n        </tr>\n        <tr class=\"input-row-even\">\n            <td>2</td>\n            <td>102</td>\n            <td>07-24-2024 19:11:59</td>\n            <td>3</td>\n            <td>Monitor</td>\n            <td>1</td>\n            <td>300</td>\n        </tr>\n        <tr class=\"input-row-odd\">\n            <td>2</td>\n            <td>102</td>\n            <td>07-24-2024 19:11:59</td>\n            <td>4</td>\n            <td>Keyboard</td>\n            <td>1</td>\n            <td>50</td>\n        </tr>\n        <tr class=\"input-row-even\">\n            <td>2</td>\n            <td>102</td>\n            <td>07-24-2024 19:11:59</td>\n            <td>5</td>\n            <td>USB Drive</td>\n            <td>5</td>\n            <td>20</td>\n        </tr>\n    </tbody>\n        </table>\n    </div>\n<h4 class=\"bold-blue\">5. Updating Nested Table</h4>\nIt is possible to update the nested table within a row.\n<h4 class=\"bold-maroon\">Adding a new item to an existing order</h4>\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">UPDATE</span> orders o\n<span class=\"SQLKeyword\">SET</span> o.items = o.items MULTISET UNION item_table\n<span class=\"SQLKeyword\">(</span>item_type<span class=\"SQLKeyword\">(</span>6<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'Headphones'</span><span class=\"SQLOperator\">,</span> 1<span class=\"SQLOperator\">,</span> 100<span class=\"SQLKeyword\">)</span><span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">WHERE</span> o.order_id = 1<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Output:</h4>\n<div class=\"scrollable-container\">\n    <table class=\"tg\">\n    <thead>\n        <tr>\n            <th>ORDER_ID</th>\n            <th>CUSTOMER_ID</th>\n            <th>ORDER_DATE</th>\n            <th>ITEM_ID</th>\n            <th>ITEM_NAME</th>\n            <th>QUANTITY</th>\n            <th>PRICE</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr class=\"input-row-even\">\n            <td>1</td>\n            <td>101</td>\n            <td>07-24-2024 19:19:49</td>\n            <td>1</td>\n            <td>Laptop</td>\n            <td>1</td>\n            <td>1200</td>\n        </tr>\n        <tr class=\"input-row-odd\">\n            <td>1</td>\n            <td>101</td>\n            <td>07-24-2024 19:19:49</td>\n            <td>6</td>\n            <td>Headphones</td>\n            <td>1</td>\n            <td>100</td>\n        </tr>\n        <tr class=\"input-row-even\">\n            <td>2</td>\n            <td>102</td>\n            <td>07-24-2024 19:19:49</td>\n            <td>3</td>\n            <td>Monitor</td>\n            <td>1</td>\n            <td>300</td>\n        </tr>\n        <tr class=\"input-row-odd\">\n            <td>2</td>\n            <td>102</td>\n            <td>07-24-2024 19:19:49</td>\n            <td>4</td>\n            <td>Keyboard</td>\n            <td>1</td>\n            <td>50</td>\n        </tr>\n        <tr class=\"input-row-even\">\n            <td>2</td>\n            <td>102</td>\n            <td>07-24-2024 19:19:49</td>\n            <td>5</td>\n            <td>USB Drive</td>\n            <td>5</td>\n            <td>20</td>\n        </tr>\n    </tbody>\n        </table>\n    </div>\n<h4 class=\"bold-maroon\">Deleting an item from an existing order</h4>\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">UPDATE</span> orders o\n<span class=\"SQLKeyword\">SET</span> o.items = <span class=\"SQLKeyword\">(</span>\n<span class=\"SQLKeyword\">SELECT</span> CAST<span class=\"SQLKeyword\">(</span>COLLECT<span class=\"SQLKeyword\">(</span>value<span class=\"SQLKeyword\">(</span>item<span class=\"SQLKeyword\">)</span><span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> item_table<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">FROM TABLE (</span>o.items<span class=\"SQLKeyword\">)</span> item\n<span class=\"SQLKeyword\">WHERE</span> item.item_id <span class=\"SQLOperator\">!=</span> 2\n<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">WHERE</span> o.order_id = 1<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Output:</h4>\n<div class=\"scrollable-container\">\n    <table class=\"tg\">\n    <thead>\n        <tr>\n            <th>ORDER_ID</th>\n            <th>CUSTOMER_ID</th>\n            <th>ORDER_DATE</th>\n            <th>ITEM_ID</th>\n            <th>ITEM_NAME</th>\n            <th>QUANTITY</th>\n            <th>PRICE</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr class=\"input-row-even\">\n            <td>1</td>\n            <td>101</td>\n            <td>07-24-2024 19:19:49</td>\n            <td>1</td>\n            <td>Laptop</td>\n            <td>1</td>\n            <td>1200</td>\n        </tr>\n        <tr class=\"input-row-odd\">\n            <td>1</td>\n            <td>101</td>\n            <td>07-24-2024 19:19:49</td>\n            <td>6</td>\n            <td>Headphones</td>\n            <td>1</td>\n            <td>100</td>\n        </tr>\n        <tr class=\"input-row-even\">\n            <td>2</td>\n            <td>102</td>\n            <td>07-24-2024 19:19:49</td>\n            <td>3</td>\n            <td>Monitor</td>\n            <td>1</td>\n            <td>300</td>\n        </tr>\n        <tr class=\"input-row-odd\">\n            <td>2</td>\n            <td>102</td>\n            <td>07-24-2024 19:19:49</td>\n            <td>4</td>\n            <td>Keyboard</td>\n            <td>1</td>\n            <td>50</td>\n        </tr>\n        <tr class=\"input-row-even\">\n            <td>2</td>\n            <td>102</td>\n            <td>07-24-2024 19:19:49</td>\n            <td>5</td>\n            <td>USB Drive</td>\n            <td>5</td>\n            <td>20</td>\n        </tr>\n    </tbody>\n        </table>\n    </div>\n<h4 class=\"bold-maroon\">Benefits of Using Nested Tables</h4>\n<ul>\n    <li><strong>Encapsulation:</strong> Encapsulates related data within a single column.</li>\n    <li><strong>Convenience:</strong> Easier to manage and query complex hierarchical data.</li>\n    <li><strong>Performance:</strong> Can offer performance benefits for certain types of queries and operations.</li>\n</ul>\n<h4 class=\"bold-blue\">Considerations</h4>\n<ul>\n    <li><strong>Complexity:</strong> Can make the schema more complex and harder to maintain.</li>\n    <li><strong>Storage:</strong> Requires careful consideration of storage and indexing strategies.</li>\n</ul>\n<h4 class=\"bold-maroon\">Conclusion:</h4>\n<p>Nested tables are a useful feature in Oracle SQL, allowing for flexible and efficient storage of hierarchical data within a relational database.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 205,
    "Question": "How can you add comments to SQL code?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        h4 {\n            color: #B61326;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 12px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode {\n                font-size: 11px;\n            }\n        }\n    </style>\n</head>\n<body>\n<p>In SQL, comments can be added using two different syntaxes: single-line comments and multi-line comments.</p>\n<h4 class=\"bold-maroon\">Single-line Comments</h4>\nSingle-line comments start with two dashes (\"--\"). Everything after the \"--\" on that line will be considered a comment and will not be executed.\n<h4 class=\"bold-maroon\">Example</h4>\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- This is a single-line comment</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLOperator\">*</span> <span class=\"SQLKeyword\">FROM</span> orders<span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- This comment explains that all columns</span>\n<span class=\"SQLComment\">-- from the orders table are being selected</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Multi-line Comments</h4>\nMulti-line comments start with \"/*\" and end with \"*/\". Anything between these delimiters will be considered a comment, regardless of how many lines it spans.\n<h4 class=\"bold-maroon\">Example</h4>\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">/*\nEverything between /* and */ is treated as a comment and \nwill not be executed by Oracle.\nThis is a multi-line comment that can span multiple lines, \nmaking it useful for explaining complex logic or \nproviding detailed documentation.\nExample:\nThe following SQL query has been decommissioned as part \nof Change Request (CR) 10.1.7:\n    SELECT order_id, customer_id, order_date\n    FROM orders\n    WHERE order_date > SYSDATE - 60;\n    \nNote: The above query is no longer in use and has been \nretained here for historical reference.\n*/\n    </span>\n<span class=\"SQLKeyword\">SELECT</span> order_id<span class=\"SQLOperator\">,</span> customer_id<span class=\"SQLOperator\">,</span> order_date\n<span class=\"SQLKeyword\">FROM</span> orders\n<span class=\"SQLKeyword\">WHERE</span> order_date <span class=\"SQLOperator\">&gt;</span> SYSDATE - 30<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 206,
    "Question": "How do you use the DBMS_JOB package in Oracle?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        h4 {\n            color: #B61326;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 12px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode {\n                font-size: 11px;\n            }\n        }\n    </style>\n</head>\n<body>\n<h4 class=\"bold-blue\">The \"DBMS_JOB\" package in Oracle is used to schedule and manage jobs (tasks) that can be executed at specified times or intervals. This package is useful for automating routine tasks such as batch processing, data cleanup, or regular reporting.</h4>\n<h4 class=\"bold-maroon\">Key Functions and Procedures in DBMS_JOB</h4>\n<ul>\n    <li><strong>SUBMIT:</strong> Schedules a new job.</li>\n    <li><strong>REMOVE:</strong> Removes a job from the job queue.</li>\n    <li><strong>CHANGE:</strong> Changes the parameters of a job.</li>\n    <li><strong>WHAT:</strong> Modifies the PL/SQL code to be executed by a job.</li>\n    <li><strong>NEXT_DATE:</strong> Changes the next execution date of a job.</li>\n    <li><strong>INTERVAL:</strong> Modifies the interval between job executions.</li>\n    <li><strong>RUN:</strong> Forces a job to run immediately.</li>\n    <li><strong>BROKEN:</strong> Disables or enables a job.</li>\n</ul>\n<h4 class=\"bold-maroon\">Step-by-Step Example</h4>\n<h4 class=\"bold-blue\">1. Submitting a Job</h4>\nThe \"SUBMIT\" procedure schedules a new job. The basic syntax is:\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DECLARE</span>\n   job_number NUMBER<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">BEGIN</span>\n   DBMS_JOB.SUBMIT<span class=\"SQLKeyword\">(</span>\n      job       <span class=\"SQLOperator\">=&gt;</span> job_number<span class=\"SQLOperator\">,</span>\n      what      <span class=\"SQLOperator\">=&gt;</span> <span class=\"SQLString\">'BEGIN proc_procedure_name; END;'</span><span class=\"SQLOperator\">,</span>\n      next_date <span class=\"SQLOperator\">=&gt;</span> SYSDATE<span class=\"SQLOperator\">,</span>\n      interval  <span class=\"SQLOperator\">=&gt;</span> <span class=\"SQLString\">'SYSDATE + 1'</span>  <span class=\"SQLComment\">-- Job runs every day</span>\n   <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n   <span class=\"SQLKeyword\">COMMIT</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">END</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">/</span>\n</pre>\n</div>\n<h4 class=\"bold-blue\">2. Running a Job Immediately</h4>\nTo force a job to run immediately, use the \"RUN\" procedure.\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">BEGIN</span>\n   DBMS_JOB.RUN<span class=\"SQLKeyword\">(</span>job <span class=\"SQLOperator\">=&gt;</span> 123<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n   <span class=\"SQLComment\">-- Replace 123 with the job number</span>\n<span class=\"SQLKeyword\">END</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">/</span>\n</pre>\n</div>\n<h4 class=\"bold-blue\">3. Disabling or Enabling a Job</h4>\nTo disable (break) or enable (unbreak) a job, use the \"BROKEN\" procedure.\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Disable a job</span>\n<span class=\"SQLKeyword\">BEGIN</span>\n   DBMS_JOB.BROKEN<span class=\"SQLKeyword\">(</span>\n      job    <span class=\"SQLOperator\">=&gt;</span> 123<span class=\"SQLOperator\">,</span>  <span class=\"SQLComment\">-- Replace 123 with the job number</span>\n      broken <span class=\"SQLOperator\">=&gt;</span> <span class=\"SQLKeyword\">TRUE</span>\n   <span class=\"SQLComment\">-- broken =&gt; FALSE -- Enable a job</span>\n   <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n   <span class=\"SQLKeyword\">COMMIT</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">END</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">/</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Viewing Job Information</h4>\nTo view information about jobs, query the \"DBA_JOBS\", \"USER_JOBS\", or \"ALL_JOBS\" view.\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> job<span class=\"SQLOperator\">,</span>\nwhat<span class=\"SQLOperator\">,</span>\nnext_date<span class=\"SQLOperator\">,</span>\ninterval<span class=\"SQLOperator\">,</span>\nbroken\n<span class=\"SQLKeyword\">FROM</span> user_jobs<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Conclusion:</h4>\n<p>Using the \"DBMS_JOB\" package allows for efficient scheduling and management of routine database tasks in Oracle.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 207,
    "Question": "Why might the first query return no rows while the second and third queries return two rows?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        h4 {\n            color: #B61326;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 12px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode {\n                font-size: 11px;\n            }\n        }\n    </style>\n</head>\n<body>\n<p>In Oracle SQL, the \"ROWNUM\" pseudocolumn is used to assign a unique number to each row returned by a query.</p>\n<h4 class=\"bold-maroon\">Example Queries:</h4>\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\">Query 1 -\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLOperator\">*</span>\n<span class=\"SQLKeyword\">FROM</span> employees\n<span class=\"SQLKeyword\">WHERE</span> rownum = <span class=\"SQLKeyword\">2</span><span class=\"SQLOperator\">;</span>\nQuery 2 -\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLOperator\">*</span>\n<span class=\"SQLKeyword\">FROM</span> employees\n<span class=\"SQLKeyword\">WHERE</span> rownum <= <span class=\"SQLKeyword\">2</span><span class=\"SQLOperator\">;</span>\nQuery 3 -\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLOperator\">*</span>\n<span class=\"SQLKeyword\">FROM</span> employees\n<span class=\"SQLKeyword\">WHERE</span> rownum = <span class=\"SQLKeyword\">1</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Explanation:</h4>\n<h4 class=\"bold-blue\">1. \"ROWNUM=2\" Condition:</h4>\n<ul>\n    <li>The \"ROWNUM\" pseudocolumn starts with 1 and increments sequentially for each row returned by the query.</li>\n    <li>When a condition like \"ROWNUM=2\" is used, Oracle looks for rows with \"ROWNUM=2\". However, a row can only be assigned \"ROWNUM=2\" if there is already a row with \"ROWNUM=1\". But since the first row satisfies \"ROWNUM=1\", there is no opportunity for any row to satisfy \"ROWNUM=2\" directly.</li>\n    <li>As a result, \"SELECT * FROM employees WHERE rownum=2;\" returns no rows because no row will ever be assigned \"ROWNUM=2\" under these conditions.</li>\n</ul>\n<h4 class=\"bold-blue\">2. \"ROWNUM<=2\" Condition:</h4>\n<ul>\n    <li>When using a condition like \"ROWNUM<=2\", Oracle will fetch the first row and assign it \"ROWNUM=1\". It will then fetch the second row and assign it \"ROWNUM=2\".</li>\n    <li>Therefore, \"SELECT * FROM employees WHERE rownum<=2;\" will return the first two rows because both satisfy the \"ROWNUM<=2\" condition.</li>\n</ul>\n<h4 class=\"bold-blue\">3. \"ROWNUM=1\" Condition:</h4>\n<ul>\n    <li>When using \"ROWNUM=1\", Oracle fetches the first row and assigns it \"ROWNUM=1\", which satisfies the condition.</li>\n    <li>Thus, \"SELECT * FROM employees WHERE rownum=1;\" will always return the first row of the result set.</li>\n</ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 208,
    "Question": "What are the drawbacks of the BLOB datatype, and why do most organizations avoid it?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        h4 {\n            color: #B61326;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 12px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode {\n                font-size: 11px;\n            }\n        }\n    </style>\n</head>\n<body>\n<p>The BLOB (Binary Large Object) datatype in Oracle is used to store large binary data such as documents, images, audio, and video files. While BLOBs offer the capability to store vast amounts of unstructured data within the database, several drawbacks can make organizations hesitant to use them. Here are some key drawbacks and reasons for avoiding the BLOB datatype:</p>\n<h4 class=\"bold-maroon\">Drawbacks of the BLOB Datatype</h4>\n<h4 class=\"bold-blue\">1. Performance Issues:</h4>\n<ul>\n    <li><strong>Storage and Retrieval Speed:</strong> BLOBs can significantly slow down both storage and retrieval operations due to their large size. Query performance can degrade, especially when dealing with large datasets or high concurrency.</li>\n    <li><strong>Increased I/O Operations:</strong> Manipulating large BLOBs requires substantial input/output operations, which can strain the database server and impact overall performance.</li>\n</ul>\n<h4 class=\"bold-blue\">2. Resource Consumption:</h4>\n<ul>\n    <li><strong>Memory and Disk Space:</strong> BLOBs consume a considerable amount of memory and disk space. This can lead to higher storage costs and the need for frequent hardware upgrades.</li>\n    <li><strong>Backup and Restore Times:</strong> Large BLOBs can increase the time required for database backup and restore operations, leading to longer downtime during maintenance or recovery.</li>\n</ul>\n<h4 class=\"bold-blue\">3. Complexity in Management:</h4>\n<ul>\n    <li><strong>Database Size:</strong> The inclusion of large BLOBs can cause the database size to grow rapidly, making database management more complex.</li>\n    <li><strong>Fragmentation:</strong> Storing and deleting BLOBs can lead to fragmentation within the tablespace, further impacting performance and necessitating regular maintenance.</li>\n</ul>\n<h4 class=\"bold-blue\">4. Scalability Issues:</h4>\n<ul>\n    <li><strong>Handling Growth:</strong> As the volume of BLOB data grows, scaling the database to accommodate increased storage and performance requirements can become challenging.</li>\n    <li><strong>Limited Scalability:</strong> BLOBs can limit the scalability of applications, especially those requiring distributed databases or cloud-based solutions.</li>\n</ul>\n<h4 class=\"bold-blue\">5. Data Corruption and Integrity:</h4>\n<ul>\n    <li><strong>Corruption Risk:</strong> Large BLOB data is more susceptible to corruption, and recovering corrupted BLOBs can be difficult.</li>\n    <li><strong>Integrity Constraints:</strong> Ensuring data integrity and consistency with BLOBs can be more complex compared to other datatypes.</li>\n</ul>\n<h4 class=\"bold-blue\">6. Alternative Storage Solutions:</h4>\n<ul>\n    <li><strong>File Systems:</strong> Storing large binary data in a file system and referencing it from the database is often more efficient. File systems are optimized for handling large files and can offer better performance and scalability.</li>\n    <li><strong>Cloud Storage:</strong> Cloud storage solutions (e.g., Amazon S3, Google Cloud Storage) provide robust, scalable, and cost-effective alternatives for storing large binary objects, with better performance and easier integration.</li>\n</ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 209,
    "Question": "What are the top 10 errors you encounter while developing SQL code?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        h4 {\n            color: #B61326;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 12px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode {\n                font-size: 11px;\n            }\n        }\n    </style>\n</head>\n<body>\n<p>Here are the top 10 Oracle errors that developers frequently encounter:</p>\n<h4 class=\"bold-maroon\">1. ORA-00904: Invalid Identifier</h4>\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> balancee <span class=\"SQLKeyword\">FROM</span> customers\n<span class=\"SQLKeyword\">WHERE</span> customer_id = <span class=\"SQLKeyword\">1</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Error: ORA-00904: \"BALANCEE\": invalid identifier</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">2. ORA-00933: SQL Command Not Properly Ended</h4>\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLOperator\">*</span> <span class=\"SQLKeyword\">FROM</span> customers\n<span class=\"SQLKeyword\">WHERE</span> balance <span class=\"SQLOperator\">&gt;</span> 2000\n<span class=\"SQLComment\">-- Error: ORA-00933: SQL command not properly ended</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">3. ORA-00942: Table or View Does Not Exist</h4>\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLOperator\">*</span> <span class=\"SQLKeyword\">FROM</span> non_existing_table<span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Error: ORA-00942: table or view does not exist</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">4. ORA-01722: Invalid Number</h4>\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLOperator\">*</span> <span class=\"SQLKeyword\">FROM</span> customers\n<span class=\"SQLKeyword\">WHERE</span> balance = <span class=\"SQLString\">'five thousand'</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Error: ORA-01722: invalid number</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">5. ORA-00001: Unique Constraint Violated</h4>\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">INSERT INTO</span> customers <span class=\"SQLKeyword\">(</span>\ncustomer_id<span class=\"SQLOperator\">,</span>\nname<span class=\"SQLOperator\">,</span>\nbalance\n<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>\n<span class=\"SQLKeyword\">1</span><span class=\"SQLOperator\">,</span>\n<span class=\"SQLString\">'John Cena'</span><span class=\"SQLOperator\">,</span>\n3000\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Error: ORA-00001: unique constraint \n    (schema.CUSTOMER_ID_PK) violated</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">6. ORA-02292: Integrity Constraint Violated</h4>\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DELETE FROM</span> customers\n<span class=\"SQLKeyword\">WHERE</span> customer_id = <span class=\"SQLKeyword\">1</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Error: ORA-02292: integrity constraint</span>\n<span class=\"SQLComment\">-- (schema.CUSTOMERS_FK) violated - child record found</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">7. ORA-00936: Missing Expression</h4>\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">FROM</span> customers<span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Error: ORA-00936: missing expression</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">8. ORA-00907: Missing Right Parenthesis</h4>\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLOperator\">*</span> <span class=\"SQLKeyword\">FROM</span> customers <span class=\"SQLKeyword\">WHERE</span> <span class=\"SQLKeyword\">(</span>balance <span class=\"SQLOperator\">&gt;</span> 2000<span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Error: ORA-00907: missing right parenthesis</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">9. ORA-01861: Literal Does Not Match Format String</h4>\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLOperator\">*</span> <span class=\"SQLKeyword\">FROM</span> customers\n<span class=\"SQLKeyword\">WHERE</span> created_date = <span class=\"SQLString\">'2023-24-07'</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Error: ORA-01861: literal does not match format string</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">10. ORA-06512: Error at Line</h4>\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">BEGIN</span>\n      my_procedure<span class=\"SQLOperator\">;</span>\n    <span class=\"SQLKeyword\">EXCEPTION</span>\n      <span class=\"SQLKeyword\">WHEN OTHERS THEN</span>\n        DBMS_OUTPUT.PUT_LINE<span class=\"SQLKeyword\">(</span>SQLERRM<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">END</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Error: ORA-06512: at line X</span>\n</pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 210,
    "Question": "What are your favorite SQL commands?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        h4 {\n            color: #B61326;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 12px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode {\n                font-size: 11px;\n            }\n        }\n    </style>\n</head>\n<body>\n<p>Here is a list of favorite SQL commands that are commonly used by Oracle developers:</p>\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\">1. <span class=\"SQLKeyword\">SELECT</span>\n2. <span class=\"SQLKeyword\">INSERT</span>\n3. <span class=\"SQLKeyword\">UPDATE</span>\n4. <span class=\"SQLKeyword\">DELETE</span>\n5. <span class=\"SQLKeyword\">MERGE</span>\n6. <span class=\"SQLKeyword\">CREATE TABLE</span>\n7. <span class=\"SQLKeyword\">ALTER TABLE</span>\n8. <span class=\"SQLKeyword\">DROP TABLE</span>\n9. <span class=\"SQLKeyword\">TRUNCATE TABLE</span>\n10. <span class=\"SQLKeyword\">CREATE INDEX</span>\n11. <span class=\"SQLKeyword\">DROP INDEX</span>\n12. <span class=\"SQLKeyword\">CREATE VIEW</span>\n13. <span class=\"SQLKeyword\">DROP VIEW</span>\n14. <span class=\"SQLKeyword\">CREATE SEQUENCE</span>\n15. <span class=\"SQLKeyword\">NEXTVAL</span> <span class=\"SQLKeyword\">and</span> <span class=\"SQLKeyword\">CURRVAL (for sequences)</span>\n16. <span class=\"SQLKeyword\">CREATE SYNONYM</span>\n17. <span class=\"SQLKeyword\">GRANT</span>\n18. <span class=\"SQLKeyword\">REVOKE</span>\n19. <span class=\"SQLKeyword\">COMMIT</span>\n20. <span class=\"SQLKeyword\">ROLLBACK</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Conclusion:</h4>\n<p>These commands are essential for various database operations, including data manipulation, schema changes, performance tuning, and control of transactions.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 211,
    "Question": "How can you extract only the usernames from email addresses in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>To extract only the usernames from email addresses in Oracle, use string functions such as <code>SUBSTR</code> and <code>INSTR</code>. The <code>SUBSTR</code> function extracts a substring from a string, and the <code>INSTR</code> function finds the position of a substring within a string.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLComment\">-- Query to extract usernames from email addresses.</span>\n<span class=\"SQLKeyword\">SELECT</span> user_id<span class=\"SQLOperator\">,</span> email<span class=\"SQLOperator\">,</span>\n       SUBSTR(email<span class=\"SQLOperator\">,</span> 1<span class=\"SQLOperator\">,</span> INSTR(email<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'@'</span><span class=\"SQLOperator\">)</span> <span class=\"SQLOperator\">-</span> 1) <span class=\"SQLKeyword\">AS</span> username\n<span class=\"SQLKeyword\">FROM</span> users<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Input Data - Table \"users\"</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>USER_ID</th>\n                <th>EMAIL</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>isaac.newton@aityl.com</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>alber_einstein@aityl.com</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>charles.darwin@aityl.com</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>USER_ID</th>\n                <th>EMAIL</th>\n                <th>USERNAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>isaac.newton@aityl.com</td>\n                <td>isaac.newton</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>alber_einstein@aityl.com</td>\n                <td>alber_einstein</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>charles.darwin@aityl.com</td>\n                <td>charles.darwin</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <p>The query uses the <code>SUBSTR</code> function to extract the portion of the email address before the <code>@</code> symbol, effectively retrieving the username.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 212,
    "Question": "Can you perform decision-making using the DECODE() function?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>The <code>DECODE()</code> function in Oracle can be used for decision-making by providing conditional logic within SQL statements. The <code>DECODE()</code> function compares an expression to each search value one by one and returns the result corresponding to the first match. If no match is found, it returns a default value (if provided).</p>\n    <h4 class=\"bold-maroon\">Syntax of <code>DECODE()</code></h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\">DECODE<span class=\"SQLKeyword\">(</span>expression<span class=\"SQLOperator\">,</span> search1<span class=\"SQLOperator\">,</span> result1<span class=\"SQLOperator\">,</span> search2<span class=\"SQLOperator\">,</span> result2<span class=\"SQLOperator\">,</span> <span class=\"SQLOperator\">...</span><span class=\"SQLOperator\">,</span> default<span class=\"SQLKeyword\">)</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">Example Scenario</h4>\n    <p>Consider a table \"employees\" with columns \"employee_id\", \"name\", and \"department_id\". The goal is to categorize employees based on their department.</p>\n    <h4 class=\"bold-maroon\">Input Data - Table \"employees\"</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>NAME</th>\n                <th>DEPARTMENT_ID</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Marie Curie</td>\n                <td>10</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Stephen Hawking</td>\n                <td>20</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Galileo Galilei</td>\n                <td>30</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>Charles Darwin</td>\n                <td>40</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Query to Categorize Employees Using <code>DECODE()</code></h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> employee_id<span class=\"SQLOperator\">,</span>\n       name<span class=\"SQLOperator\">,</span>\n       DECODE<span class=\"SQLKeyword\">(</span>department_id<span class=\"SQLOperator\">,</span>\n              10<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'HR'</span><span class=\"SQLOperator\">,</span>\n              20<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'Finance'</span><span class=\"SQLOperator\">,</span>\n              30<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'IT'</span><span class=\"SQLOperator\">,</span>\n              40<span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'Sales'</span><span class=\"SQLOperator\">,</span>\n              <span class=\"SQLString\">'Unknown'</span><span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> department_name\n<span class=\"SQLKeyword\">FROM</span> employees<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <p>The \"DECODE()\" function checks the value of \"department_id\" for each row.</p>\n    <ul>\n        <li>If <code>department_id</code> is 10, it returns <strong>HR</strong>.</li>\n        <li>If <code>department_id</code> is 20, it returns <strong>Finance</strong>.</li>\n        <li>If <code>department_id</code> is 30, it returns <strong>IT</strong>.</li>\n        <li>If <code>department_id</code> is 40, it returns <strong>Sales</strong>.</li>\n        <li>If <code>department_id</code> does not match any of the specified values, it returns <strong>Unknown</strong>.</li>\n    </ul>\n    \n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>NAME</th>\n                <th>DEPARTMENT_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Marie Curie</td>\n                <td>HR</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Stephen Hawking</td>\n                <td>Finance</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Galileo Galilei</td>\n                <td>IT</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>Charles Darwin</td>\n                <td>Sales</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <p\">Using the \"DECODE()\" function in this way allows for conditional decision-making within SQL queries, providing a flexible method for transforming and categorizing data directly in the database.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 213,
    "Question": "How do you use escape characters in SQL search queries?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\"\n content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In Oracle SQL, escape characters are used in search queries to handle special characters that are part of the search pattern. This is especially useful when working with the \"LIKE\" operator and pattern matching.</p>\n    <h4 class=\"bold-maroon\">Using Escape Characters</h4>\n    <p>The \"ESCAPE\" keyword is used to specify a single character that will be used to escape any special characters within the search pattern.</p>\n    <h4 class=\"bold-maroon\">Special Characters in SQL Patterns:</h4>\n    <h4 class=\"bold-blue\">\n    <ul>\n        <li><strong>\"%\"</strong> Represents zero or more characters.</li>\n        <li><strong>\"_\"</strong> Represents a single character.</li>\n    </ul></h4>\n    \n    <h4 class=\"bold-maroon\">Syntax</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    column_name\n<span class=\"SQLKeyword\">FROM</span>\n    table_name\n<span class=\"SQLKeyword\">WHERE</span>\n    column_name <span class=\"SQLKeyword\">LIKE</span> <span class=\"SQLString\">'pattern'</span> <span class=\"SQLKeyword\">ESCAPE</span> <span class=\"SQLString\">'escape_character'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Example Scenario</h4>\n    <p>Consider a table \"DOCUMENTS\" with a column \"title\" that contains special characters.</p>\n    <h4 class=\"bold-maroon\">Input Data - Table DOCUMENTS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>DOC_ID</th>\n                <th>TITLE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>100% Achievement</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>C_Sharp Programming</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Example Queries</h4>\n    <h4 class=\"bold-blue\">Searching for Titles with a Literal Percent Sign (\"%\")</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLOperator\">*</span> <span class=\"SQLKeyword\">FROM</span> documents\n<span class=\"SQLKeyword\">WHERE</span> title <span class=\"SQLKeyword\">LIKE</span> <span class=\"SQLString\">'%\\%%'</span> <span class=\"SQLKeyword\">ESCAPE</span> <span class=\"SQLString\">'\\'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>DOC_ID</th>\n                <th>TITLE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>100% Achievement</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">Searching for Titles with a Literal Underscore (\"_\")</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLOperator\">*</span> <span class=\"SQLKeyword\">FROM</span> documents\n<span class=\"SQLKeyword\">WHERE</span> title <span class=\"SQLKeyword\">LIKE</span> <span class=\"SQLString\">'%\\_%'</span> <span class=\"SQLKeyword\">ESCAPE</span> <span class=\"SQLString\">'\\'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>DOC_ID</th>\n                <th>TITLE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>2</td>\n                <td>C_Sharp Programming</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">Explanation:</h4>\n    <p>&bull; (LIKE '%\\%%' ESCAPE '\\') The pattern '%\\%%' searches for any string that contains a percentage sign (%). The backslash (\"\\\\\") is specified as the escape character, so \"\\%\" is interpreted as a literal percentage sign.</p>\n    <p\">&bull; \"LIKE '%\\_%' ESCAPE '\\'\": The pattern \"'%\\_%'\" searches for any string that contains an underscore (_). The backslash (\\\\) is specified as the escape character, so \"\\_\" is interpreted as a literal underscore.</p>\n    <p>&bull; By using escape characters in SQL search queries, special characters can be correctly interpreted as literals, allowing for accurate pattern matching.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 214,
    "Question": "What is a candidate key, and how many candidate keys can a table have?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>A candidate key is a column or a set of columns in a table that can uniquely identify any database record without referring to any other data. A table can have multiple candidate keys, but only one primary key can be designated from these candidate keys. Candidate keys are essential for ensuring the integrity and uniqueness of data within the database.</p>\n    <h4 class=\"bold-maroon\">Number of Candidate Keys</h4>\n    <p>A table can have multiple candidate keys. However, each candidate key must be able to uniquely identify each row in the table.<p>\n    <h4 class=\"bold-maroon\">Example</h4>\n    <p>Let's consider a scenario with a \"CUSTOMER\" table. In this table, we consider multiple candidate keys such as \"customer_id\", \"account_number\", and \"email\" because each of these fields can uniquely identify a customer.</p>\n    <h4 class=\"bold-maroon\">Table Structure</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> Customer <span class=\"SQLKeyword\">(</span>\n    customer_id NUMBER <span class=\"SQLKeyword\">PRIMARY KEY</span><span class=\"SQLOperator\">,</span>\n    account_number VARCHAR2(20) <span class=\"SQLKeyword\">UNIQUE</span><span class=\"SQLOperator\">,</span>\n    email VARCHAR2(50) <span class=\"SQLKeyword\">UNIQUE</span><span class=\"SQLOperator\">,</span>\n    name VARCHAR2(100)\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Sample Insert Statements</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">INSERT INTO</span> customer <span class=\"SQLKeyword\">(</span>\n    customer_id<span class=\"SQLOperator\">,</span>\n    account_number<span class=\"SQLOperator\">,</span>\n    email<span class=\"SQLOperator\">,</span>\n    name\n<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>\n    1<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLString\">'ACC12345'</span><span class=\"SQLOperator\">,</span>\n    <span class=\"SQLString\">'charles.darwin@aityl.com'</span><span class=\"SQLOperator\">,</span>\n    <span class=\"SQLString\">'Charles Darwin'</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">INSERT INTO</span> customer <span class=\"SQLKeyword\">(</span>\n    customer_id<span class=\"SQLOperator\">,</span>\n    account_number<span class=\"SQLOperator\">,</span>\n    email<span class=\"SQLOperator\">,</span>\n    name\n<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>\n    2<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLString\">'ACC67890'</span><span class=\"SQLOperator\">,</span>\n    <span class=\"SQLString\">'rachel.carson@aityl.com'</span><span class=\"SQLOperator\">,</span>\n    <span class=\"SQLString\">'Rachel Carson'</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li>\"customer_id\", \"account_number\", and \"email\" are candidate keys because each of them can uniquely identify a customer.</li>\n        <li>We have chosen \"customer_id\" as the primary key, but \"account_number\" and \"email\" are still candidate keys.</li>\n    </ul>\n    \n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_ID</th>\n                <th>ACCOUNT_NUMBER</th>\n                <th>EMAIL</th>\n                <th>NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>ACC12345</td>\n                <td>charles.darwin@aityl.com</td>\n                <td>Charles Darwin</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>ACC67890</td>\n                <td>rachel.carson@aityl.com</td>\n                <td>Rachel Carson</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <ul>\n        <li>In this scenario, \"customer_id\", \"account_number\", and \"email\" are all candidate keys for the \"CUSTOMER\" table.</li>\n        <li>Each of them can uniquely identify a row in the table, ensuring data integrity and enabling efficient data retrieval.</li>\n    </ul>    \n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 215,
    "Question": "If there is no primary key, how will you self-join a table with the same row?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>It is achievable to perform a join or subquery on a table without a primary key using \"ROWID\" in Oracle. \"ROWID\" is a unique identifier for each row in a database table, which can be used to distinguish rows even in the absence of a primary key.</p>\n    <h4 class=\"bold-maroon\">Example Scenario</h4>\n    <p>Let's assume a \"CUSTOMER\" table as before, but this time, without a primary key defined and with no uniqueness applicable to the table.</p>\n    <h4 class=\"bold-maroon\">Input Data - Table \"CUSTOMER\"</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_ID</th>\n                <th>ACCOUNT_NUMBER</th>\n                <th>EMAIL</th>\n                <th>NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>ACC12345</td>\n                <td>albert.einstein@aityl.com</td>\n                <td>Albert Einstein</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>1</td>\n                <td>ACC12345</td>\n                <td>albert.einstein@aityl.com</td>\n                <td>Albert Einstein</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>ACC54321</td>\n                <td>nikola.tesla@aityl.com</td>\n                <td>Nikola Tesla</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Self-Join Using \"ROWID\"</h4>\n    <p>\"ROWID\" can be used to perform a self-join on the \"Customer\" table to find pairs of rows that match on a specific condition. For example, to find pairs of customers with the same \"ROWID\":</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> c2.rowid<span class=\"SQLOperator\">,</span>\nc1.<span class=\"SQLOperator\">*</span>\n<span class=\"SQLKeyword\">FROM</span> customer c1\n   <span class=\"SQLKeyword\">JOIN</span> customer c2\n      <span class=\"SQLKeyword\">ON</span> c1.rowid = c2.rowid<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ROWID</th>\n                <th>CUSTOMER_ID</th>\n                <th>ACCOUNT_NUMBER</th>\n                <th>EMAIL</th>\n                <th>NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>AAATZ/AAHAAAAGUAAD</td>\n                <td>1</td>\n                <td>ACC12345</td>\n                <td>albert.einstein@aityl.com</td>\n                <td>Albert Einstein</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>AAATZ/AAHAAAAGUAAE</td>\n                <td>1</td>\n                <td>ACC12345</td>\n                <td>albert.einstein@aityl.com</td>\n                <td>Albert Einstein</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>AAATZ/AAHAAAAGUAAF</td>\n                <td>3</td>\n                <td>ACC54321</td>\n                <td>nikola.tesla@aityl.com</td>\n                <td>Nikola Tesla</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-blue\">Explanation:</h4>\n    <ul>\n        <li><code>c1</code> and <code>c2</code> are aliases for the same <strong>Customer</strong> table.</li>\n        <li>The condition <code>c1.rowid = c2.rowid</code> ensures that each row is matched with itself.</li>\n    </ul>\n    \n    <h4 class=\"bold-maroon\">Conclusion:</h4>\n    <p>Using \"ROWID\" is an effective way to perform self-joins on tables without primary keys in Oracle. This method ensures that each row can still be uniquely identified and manipulated, facilitating complex queries like self-joins.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 216,
    "Question": "What is the difference between CASE and DECODE functions?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n    </style>\n</head>\n<body>\n    <p>Both the <code>CASE</code> and <code>DECODE</code> functions in Oracle are used for conditional logic in SQL statements, allowing the implementation of IF-THEN-ELSE logic within queries. However, there are several differences between them in terms of syntax, functionality, and flexibility.</p>\n    <h4 class=\"bold-maroon\">1. Syntax:</h4>\n    <p class=\"bold-blue\">CASE Statement:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\">CASE\n      <span class=\"SQLKeyword\">WHEN</span> condition1 <span class=\"SQLKeyword\">THEN</span> result1\n      <span class=\"SQLKeyword\">WHEN</span> condition2 <span class=\"SQLKeyword\">THEN</span> result2\n      <span class=\"SQLOperator\">...</span>\n      <span class=\"SQLKeyword\">ELSE</span> default_result\n<span class=\"SQLKeyword\">END</span></pre>\n</div>\n    <p class=\"bold-blue\">DECODE Function:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\">DECODE<span class=\"SQLKeyword\">(</span>expression<span class=\"SQLOperator\">,</span> search1<span class=\"SQLOperator\">,</span> result1<span class=\"SQLOperator\">,</span> search2<span class=\"SQLOperator\">,</span> result2<span class=\"SQLOperator\">,</span> <span class=\"SQLOperator\">...</span><span class=\"SQLOperator\">,</span> default_result<span class=\"SQLKeyword\">)</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">2. Flexibility:</h4>\n    <ul>\n        <li><strong>CASE:</strong> More flexible, supports complex logical conditions, boolean expressions, and is available in both SQL and PL/SQL.</li>\n        <li><strong>DECODE:</strong> Limited to simple equality checks and only available in SQL.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">3. Return Data Types:</h4>\n    <ul>\n        <li><strong>CASE:</strong> Can return different data types based on the condition.</li>\n        <li><strong>DECODE:</strong> All result expressions must have the same data type.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">4. NULL Handling:</h4>\n    <ul>\n        <li><strong>CASE:</strong> Handles NULL values intuitively, allowing explicit handling within the WHEN clauses.</li>\n        <li><strong>DECODE:</strong> Requires additional logic to handle NULLs, treating NULL as equal to NULL.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Summary:</h4>\n    <p>In most cases, <code>CASE</code> is preferred over <code>DECODE</code> due to its flexibility, ability to handle complex conditions, and availability in both SQL and PL/SQL.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 217,
    "Question": "What is the fastest query method to fetch data from a table?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n    </style>\n</head>\n<body>\n    <p>The fastest query method to fetch data from a table in Oracle depends on factors like table structure, data size, indexes, and query requirements. However, the following tips and methods can optimize data retrieval:</p>\n    <h4 class=\"bold-maroon\">1. Indexing:</h4>\n    <p>Properly designed indexes, like B-tree, Bitmap, or Composite Indexes, can drastically reduce data scan times.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE INDEX</span> idx_customer_name\n   <span class=\"SQLKeyword\">ON</span> customers(name)<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">2. Use of Primary Keys and Unique Constraints:</h4>\n    <p>Primary keys and unique constraints create unique indexes that speed up data retrieval.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">ALTER TABLE</span> customers\n  <span class=\"SQLKeyword\">ADD CONSTRAINT</span> pk_customer_id <span class=\"SQLKeyword\">PRIMARY KEY</span> <span class=\"SQLKeyword\">(</span> customer_id <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span> </pre>\n</div>\n    <h4 class=\"bold-maroon\">3. Query Optimization:</h4>\n    <p>Optimize queries by selecting only necessary columns, using appropriate joins, and avoiding functions on indexed columns.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> name<span class=\"SQLOperator\">,</span>\n    email\n<span class=\"SQLKeyword\">FROM</span> customers\n<span class=\"SQLKeyword\">WHERE</span> customer_id <span class=\"SQLOperator\">=</span> <span class=\"SQLString\">:customer_id</span><span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">4. Partitioning:</h4>\n    <p>Partitioning large tables reduces the amount of data scanned, improving query performance.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> sales <span class=\"SQLKeyword\">(</span>\n    sale_id   NUMBER<span class=\"SQLOperator\">,</span>\n    sale_date DATE<span class=\"SQLOperator\">,</span>\n    amount    NUMBER\n<span class=\"SQLKeyword\">)</span>\n    <span class=\"SQLKeyword\">PARTITION BY RANGE</span> <span class=\"SQLKeyword\">(</span>\n        sale_date\n    <span class=\"SQLKeyword\">)</span>\n    <span class=\"SQLKeyword\">(\n</span> <span class=\"SQLKeyword\">PARTITION</span> sales_q1\n        <span class=\"SQLKeyword\">VALUES LESS THAN</span> <span class=\"SQLKeyword\">(</span> <span class=\"SQLKeyword\">TO_DATE</span><span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'2022-04-01'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span><span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">,</span>\n    <span class=\"SQLKeyword\">PARTITION</span> sales_q2\n        <span class=\"SQLKeyword\">VALUES LESS THAN</span> <span class=\"SQLKeyword\">(</span> <span class=\"SQLKeyword\">TO_DATE</span><span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'2022-07-01'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span><span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">,</span>\n    <span class=\"SQLKeyword\">PARTITION</span> sales_q3\n        <span class=\"SQLKeyword\">VALUES LESS THAN</span> <span class=\"SQLKeyword\">(</span> <span class=\"SQLKeyword\">TO_DATE</span><span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'2022-10-01'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span><span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">,</span>\n    <span class=\"SQLKeyword\">PARTITION</span> sales_q4\n        <span class=\"SQLKeyword\">VALUES LESS THAN</span> <span class=\"SQLKeyword\">(</span> <span class=\"SQLKeyword\">TO_DATE</span><span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'2023-01-01'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span><span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">)</span>\n    <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">5. Materialized Views:</h4>\n    <p>Materialized views store the result of a query and can be refreshed periodically for better performance.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE MATERIALIZED VIEW</span> mv_customers <span class=\"SQLKeyword\">AS</span>\n    <span class=\"SQLKeyword\">SELECT</span>\n        customer_id<span class=\"SQLOperator\">,</span>\n        name<span class=\"SQLOperator\">,</span>\n        email\n    <span class=\"SQLKeyword\">FROM</span>\n        customers<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">6. Optimizer Hints:</h4>\n    <p>Oracle provides hints to influence the optimizer's choice of execution plan.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLComment\">/*+</span> <span class=\"SQLKeyword\">INDEX</span><span class=\"SQLComment\">(</span>customers idx_customer_name<span class=\"SQLComment\">) */</span>\n    name<span class=\"SQLOperator\">,</span>\n    email\n<span class=\"SQLKeyword\">FROM</span>\n    customers\n<span class=\"SQLKeyword\">WHERE</span>\n    name <span class=\"SQLOperator\">=</span> <span class=\"SQLString\">'John Cena'</span><span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">7. Parallel Query:</h4>\n    <p>For large data sets, parallel execution can be enabled to utilize multiple CPUs.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">ALTER SESSION ENABLE PARALLEL DML</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLComment\">/*+</span> <span class=\"SQLKeyword\">PARALLEL</span><span class=\"SQLComment\">(</span>customers<span class=\"SQLOperator\">,</span> 4<span class=\"SQLComment\">) */</span> <span class=\"SQLOperator\">*</span>\n   <span class=\"SQLKeyword\">FROM</span> customers<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">8. Caching:</h4>\n    <p>Utilize Oracle's caching mechanisms, like Result Cache and Database Buffer Cache, to speed up data retrieval.</p>\n    <h4 class=\"bold-maroon\">9. Statistics Collection:</h4>\n    <p>Regularly collect and update table and index statistics to help the optimizer make better decisions.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">EXEC DBMS_STATS.GATHER_TABLE_STATS</span><span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'schema_name'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'table_name'</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">Conclusion:</h4>\n    <p>The fastest query method depends on the specific scenario and requires a combination of these techniques. Regular monitoring and tuning based on workload and data patterns are essential for optimal performance.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 218,
    "Question": "Sum up the total working hours for each employee in January 2023.",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n    </style>\n</head>\n<body>\n    <p>To sum up the total working hours for each employee in January 2023, use the following SQL query:</p>\n    <h4 class=\"bold-maroon\">Example Data:</h4>\n    <p>Assuming the <code>EMPLOYEE_WORK_HOURS</code> table contains the following data:</p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>WORK_DATE</th>\n                <th>HOURS_WORKED</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>2023-01-02</td>\n                <td>8</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>1</td>\n                <td>2023-01-03</td>\n                <td>7</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>2</td>\n                <td>2023-01-02</td>\n                <td>6</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>2023-01-04</td>\n                <td>8</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>2023-01-05</td>\n                <td>8</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>2023-01-06</td>\n                <td>5</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">SQL Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    employee_id<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLFunction\">SUM</span><span class=\"SQLKeyword\">(</span>hours_worked<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> total_hours_worked\n<span class=\"SQLKeyword\">FROM</span>\n    employee_work_hours\n<span class=\"SQLKeyword\">WHERE</span>\n        work_date <span class=\"SQLOperator\">>=</span> <span class=\"SQLFunction\">TO_DATE</span><span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'2023-01-01'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span><span class=\"SQLKeyword\">)</span>\n    <span class=\"SQLKeyword\">AND</span> work_date <span class=\"SQLOperator\"><</span> <span class=\"SQLFunction\">TO_DATE</span><span class=\"SQLKeyword\">(</span><span class=\"SQLString\">'2023-02-01'</span><span class=\"SQLOperator\">,</span> <span class=\"SQLString\">'YYYY-MM-DD'</span><span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">GROUP BY</span>\n    employee_id<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>TOTAL_HOURS_WORKED</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>23</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>19</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <p>This query calculates the total hours worked by each employee in January 2023 by summing the <code>hours_worked</code> column and grouping the results by <code>employee_id</code>.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 219,
    "Question": "Calculate the percentage of orders delivered on or before the expected date.",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Example Data:</h4>\n    <p>Assuming the <code>ORDERS</code> table contains the following data:</p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORDER_ID</th>\n                <th>EXPECTED_DATE</th>\n                <th>DELIVERY_DATE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>2023-07-10</td>\n                <td>2023-07-09</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>2023-07-11</td>\n                <td>2023-07-12</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>2023-07-12</td>\n                <td>2023-07-12</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>2023-07-13</td>\n                <td>2023-07-11</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>2023-07-14</td>\n                <td>2023-07-15</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Step-by-Step Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">WITH</span> total_orders <span class=\"SQLKeyword\">AS</span> <span class=\"SQLKeyword\">(</span>\n    <span class=\"SQLKeyword\">SELECT</span>\n        <span class=\"SQLFunction\">COUNT</span><span class=\"SQLKeyword\">(</span><span class=\"SQLOperator\">*</span><span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> total\n    <span class=\"SQLKeyword\">FROM</span>\n        orders\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">,</span> on_time_orders <span class=\"SQLKeyword\">AS</span> <span class=\"SQLKeyword\">(</span>\n    <span class=\"SQLKeyword\">SELECT</span>\n        <span class=\"SQLFunction\">COUNT</span><span class=\"SQLKeyword\">(</span><span class=\"SQLOperator\">*</span><span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> on_time\n    <span class=\"SQLKeyword\">FROM</span>\n        orders\n    <span class=\"SQLKeyword\">WHERE</span>\n        delivery_date <span class=\"SQLOperator\"><=</span> expected_date\n<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">SELECT</span>\n    <span class=\"SQLKeyword\">(</span> on_time_orders.on_time / total_orders.total <span class=\"\nSQLKeyword\">)</span> <span class=\"SQLOperator\">*</span> 100 \n        <span class=\"SQLKeyword\">AS</span> percentage_on_time\n<span class=\"SQLKeyword\">FROM</span>\n    total_orders<span class=\"SQLOperator\">,</span>\n    on_time_orders<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PERCENTAGE_ON_TIME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>60</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n<ul>\n    <li>\n        <strong>Common Table Expression (CTE) for Total Orders:</strong>\n        <ul>\n            <li>The query defines a CTE named <code>total_orders</code> that calculates the total number of orders using the <code>COUNT(*)</code> function.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>Common Table Expression (CTE) for On-Time Orders:</strong>\n        <ul>\n            <li>A second CTE named <code>on_time_orders</code> calculates the number of orders that were delivered on or before the expected date, using the condition <code>delivery_date <= expected_date</code>.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>Percentage Calculation:</strong>\n        <ul>\n            <li>The main query calculates the percentage of on-time orders by dividing the count of on-time orders by the total number of orders and multiplying by 100.</li>\n            <li>The result is labeled as <code>percentage_on_time</code>.</li>\n        </ul>\n    </li>\n    <li>\n        <strong>Final Select Statement:</strong>\n        <ul>\n            <li>The main query selects the calculated percentage from the <code>total_orders</code> and <code>on_time_orders</code> CTEs.</li>\n            <li>In this example, 3 out of 5 orders were delivered on or before the expected date, which is 60%.</li>\n        </ul>\n    </li>\n</ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 220,
    "Question": "Identify products that have been returned more than once.",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - ORDERS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORDER_ID</th>\n                <th>PRODUCT_ID</th>\n                <th>CUSTOMER_ID</th>\n                <th>ORDER_DATE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>101</td>\n                <td>1001</td>\n                <td>01-10-2024 00:00:00</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>102</td>\n                <td>1002</td>\n                <td>01-15-2024 00:00:00</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>103</td>\n                <td>1003</td>\n                <td>01-20-2024 00:00:00</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>101</td>\n                <td>1004</td>\n                <td>01-25-2024 00:00:00</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>104</td>\n                <td>1001</td>\n                <td>01-30-2024 00:00:00</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Input Data: Table - RETURNS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>RETURN_ID</th>\n                <th>ORDER_ID</th>\n                <th>RETURN_DATE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>5</td>\n                <td>02-10-2024 00:00:00</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>2</td>\n                <td>02-15-2024 00:00:00</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>1</td>\n                <td>03-10-2024 00:00:00</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>4</td>\n                <td>03-20-2024 00:00:00</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PRODUCT_ID</th>\n                <th>RETURN_COUNT</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>101</td>\n                <td>2</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Method 1 - SQL Query Using Aggregated Functions:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    o.product_id<span class=\"SQLOperator\">,</span>\n    <span class=\"SQLFunction\">count</span><span class=\"SQLKeyword\">(</span>r.order_id<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> return_count\n<span class=\"SQLKeyword\">FROM</span>\n    returns r\n<span class=\"SQLKeyword\">JOIN</span>\n    orders o <span class=\"SQLKeyword\">ON</span> r.order_id <span class=\"SQLOperator\">=</span> o.order_id\n<span class=\"SQLKeyword\">GROUP BY</span>\n    o.product_id\n<span class=\"SQLKeyword\">HAVING</span>\n    <span class=\"SQLFunction\">count</span><span class=\"SQLKeyword\">(</span>r.order_id<span class=\"SQLKeyword\">)</span> <span class=\"SQLOperator\">&gt;</span> 1<span class=\"SQLOperator\">;</span></pre>\n</div>\n<h4 class=\"bold-maroon\">Explanation:</h4>\n<ul>\n    <li>\n        <strong>Method 1: SQL Query Using Aggregated Functions</strong>\n        <ul>\n            <li>The query identifies products that have been returned more than once by counting the number of returns for each product.</li>\n            <li>The <code>JOIN</code> operation links the <code>returns</code> table with the <code>orders</code> table based on the <code>order_id</code>.</li>\n            <li>The <code>GROUP BY</code> clause groups the results by <code>product_id</code>.</li>\n            <li>The <code>HAVING</code> clause filters the results to include only those products where the return count is greater than 1.</li>\n        </ul>\n    </li>\n</ul>\n    <h4 class=\"bold-maroon\">Method 2 - SQL Query Using Analytical Functions:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">WITH</span> returncounts <span class=\"SQLKeyword\">AS</span> <span class=\"SQLKeyword\">(</span>\n    <span class=\"SQLKeyword\">SELECT</span>\n        o.product_id<span class=\"SQLOperator\">,</span>\n        <span class=\"SQLFunction\">COUNT</span><span class=\"SQLKeyword\">(</span>r.return_id<span class=\"SQLKeyword\">)</span>\n        <span class=\"SQLKeyword\">OVER</span><span class=\"SQLKeyword\">(</span><span class=\"SQLKeyword\">PARTITION BY</span> o.product_id<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> return_count\n    <span class=\"SQLKeyword\">FROM</span>\n             returns r\n        <span class=\"SQLKeyword\">JOIN</span> orders o <span class=\"SQLKeyword\">ON</span> r.order_id <span class=\"SQLOperator\">=</span> o.order_id\n<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">SELECT DISTINCT</span>\n    product_id<span class=\"SQLOperator\">,</span>\n    return_count\n<span class=\"SQLKeyword\">FROM</span>\n    returncounts\n<span class=\"SQLKeyword\">WHERE</span>\n    return_count <span class=\"SQLOperator\">&gt;</span> 1<span class=\"SQLOperator\">;</span></pre>\n</div>\n<h4 class=\"bold-maroon\">Explanation:</h4>\n<ul>\n    <li>\n        <strong>Method 2: SQL Query Using Analytical Functions</strong>\n        <ul>\n            <li>The query defines a Common Table Expression (CTE) named <code>returncounts</code> to calculate the return count for each product using the <code>COUNT()</code> function as an analytical function.</li>\n            <li>The <code>PARTITION BY</code> clause in the <code>COUNT()</code> function ensures that the count is calculated separately for each <code>product_id</code>.</li>\n            <li>The main query selects distinct products with a return count greater than 1, filtering out products that have been returned only once or not at all.</li>\n        </ul>\n    </li>\n</ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 221,
    "Question": "Determine which product generated the highest revenue.",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n    </style>\n</head>\n<body>\n    <p>To determine which product generated the highest revenue, you can use the following SQL queries:</p>\n    <h4 class=\"bold-maroon\">Input Data: Table - PRODUCTS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PRODUCT_ID</th>\n                <th>PRODUCT_NAME</th>\n                <th>PRICE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Speakers</td>\n                <td>1000</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Smartphone</td>\n                <td>800</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Tablet</td>\n                <td>600</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Input Data: Table - ORDER_ITEMS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORDER_ITEM_ID</th>\n                <th>ORDER_ID</th>\n                <th>PRODUCT_ID</th>\n                <th>QUANTITY</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>1</td>\n                <td>1</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>1</td>\n                <td>2</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>2</td>\n                <td>2</td>\n                <td>3</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>3</td>\n                <td>3</td>\n                <td>4</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PRODUCT_ID</th>\n                <th>PRODUCT_NAME</th>\n                <th>TOTAL_REVENUE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>2</td>\n                <td>Smartphone</td>\n                <td>3200</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Method 1: Using Aggregated Functions:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> *\n<span class=\"SQLKeyword\">FROM</span> (\n<span class=\"SQLKeyword\">SELECT</span> p.product_id,\np.product_name,\n<span class=\"SQLFunction\">SUM</span>(oi.quantity * p.price) <span class=\"SQLKeyword\">AS</span> total_revenue\n<span class=\"SQLKeyword\">FROM</span> Products p\n<span class=\"SQLKeyword\">JOIN</span> Order_Items oi <span class=\"SQLKeyword\">ON</span> p.product_id = oi.product_id\n<span class=\"SQLKeyword\">GROUP BY</span> p.product_id,\np.product_name\n<span class=\"SQLKeyword\">ORDER BY</span> total_revenue <span class=\"SQLKeyword\">DESC</span>\n)\n<span class=\"SQLKeyword\">WHERE</span> rownum = 1<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">Method 2: Using Analytical Functions:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> product_id,\nproduct_name,\ntotal_revenue\n<span class=\"SQLKeyword\">FROM</span> (\n<span class=\"SQLKeyword\">SELECT</span> p.product_id,\np.product_name,\n<span class=\"SQLFunction\">SUM</span>(oi.quantity * p.price) <span class=\"SQLKeyword\">AS</span> total_revenue,\n<span class=\"SQLFunction\">RANK</span>() <span class=\"SQLKeyword\">OVER</span> (\n<span class=\"SQLKeyword\">ORDER BY</span> <span class=\"SQLFunction\">SUM</span>(oi.quantity * p.price) <span class=\"SQLKeyword\">DESC</span>\n) <span class=\"SQLKeyword\">AS</span> revenue_rank\n<span class=\"SQLKeyword\">FROM</span> Products p\n<span class=\"SQLKeyword\">JOIN</span> Order_Items oi <span class=\"SQLKeyword\">ON</span> p.product_id = oi.product_id\n<span class=\"SQLKeyword\">GROUP BY</span> p.product_id,\np.product_name\n)\n<span class=\"SQLKeyword\">WHERE</span> revenue_rank = 1<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><strong>Aggregated Functions:</strong> Calculate the total revenue for each product by multiplying the quantity by the price and summing it up. Use <code>ORDER BY</code> to sort the results in descending order and select the product with the highest revenue using <code>rownum = 1</code>.</li>\n        <li><strong>Analytical Functions:</strong> Calculate the total revenue and use the <code>RANK</code> function to rank products based on revenue. Select the product with the highest rank (i.e., rank 1).</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 222,
    "Question": "Identify the two bank officers who most recently sold credit cards?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n    </style>\n</head>\n<body>\n    <p>To identify the two bank officers who most recently sold credit cards, you can use the following SQL queries:</p>\n    <h4 class=\"bold-maroon\">Input Data: Table - BANK_OFFICERS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>OFFICER_ID</th>\n                <th>OFFICER_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Arjun Rathod</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Sakshi Kaul</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Manisha Dixit</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Input Data: Table - CREDIT_CARD_SALES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>SALE_ID</th>\n                <th>OFFICER_ID</th>\n                <th>SALE_DATE</th>\n                <th>CREDIT_CARD_ID</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>1</td>\n                <td>2024-07-20 14:30:00</td>\n                <td>101</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>2</td>\n                <td>2024-07-22 10:45:00</td>\n                <td>102</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>3</td>\n                <td>2024-07-18 09:15:00</td>\n                <td>103</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>1</td>\n                <td>2024-07-25 16:00:00</td>\n                <td>104</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>2</td>\n                <td>2024-07-26 11:30:00</td>\n                <td>105</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Method 1: Using Aggregated Functions:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> officer_id,\nofficer_name,\nsale_date\n<span class=\"SQLKeyword\">FROM</span> (\n<span class=\"SQLKeyword\">SELECT</span> bo.officer_id,\nbo.officer_name,\n<span class=\"SQLFunction\">MAX</span>(<span class=\"SQLFunction\">TO_CHAR</span>((sale_date), <span class=\"SQLString\">'dd-Mon-yyyy hh24:mi:ss'</span>)) <span class=\"SQLKeyword\">AS</span> sale_date\n    <span class=\"SQLKeyword\">FROM</span> Bank_Officers bo\n    <span class=\"SQLKeyword\">JOIN</span> Credit_Card_Sales ccs <span class=\"SQLKeyword\">ON</span> bo.officer_id = ccs.officer_id\n<span class=\"SQLKeyword\">GROUP BY</span> bo.officer_id,\nbo.officer_name\n<span class=\"SQLKeyword\">ORDER BY</span> 3 <span class=\"SQLKeyword\">DESC</span>\n)\n<span class=\"SQLKeyword\">WHERE</span> <span class=\"SQLKeyword\">ROWNUM <=</span> 2<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">Method 2: Using Analytical Functions:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> officer_id,\nofficer_name,\n<span class=\"SQLFunction\">TO_CHAR</span>((sale_date), <span class=\"SQLString\">'dd-Mon-yyyy hh24:mi:ss'</span>) <span class=\"SQLKeyword\">AS</span> sale_date\n<span class=\"SQLKeyword\">FROM</span> (\n<span class=\"SQLKeyword\">SELECT</span> bo.officer_id,\nbo.officer_name,\nccs.sale_date,\n<span class=\"SQLFunction\">RANK</span>() <span class=\"SQLKeyword\">OVER</span> (\n<span class=\"SQLKeyword\">ORDER BY</span> ccs.sale_date <span class=\"SQLKeyword\">DESC</span>\n) <span class=\"SQLKeyword\">AS</span> sale_rank\n<span class=\"SQLKeyword\">FROM</span> Bank_Officers bo\n<span class=\"SQLKeyword\">JOIN</span> Credit_Card_Sales ccs <span class=\"SQLKeyword\">ON</span> bo.officer_id = ccs.officer_id\n)\n<span class=\"SQLKeyword\">WHERE</span> sale_rank <= 2<span class=\"SQLOperator\">;</span></pre>\n</div>\n<h4 class=\"bold-maroon\">Output:</h4>\n<div class=\"scrollable-container\">\n<table class=\"tg\">\n    <thead>\n        <tr>\n            <th>OFFICER_ID</th>\n            <th>OFFICER_NAME</th>\n            <th>SALE_DATE</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr class=\"input-row-even\">\n            <td>2</td>\n            <td>Sakshi Kaul</td>\n            <td>26-Jul-2024 11:30:00</td>\n        </tr>\n        <tr class=\"input-row-odd\">\n            <td>1</td>\n            <td>Arjun Rathod</td>\n            <td>25-Jul-2024 16:00:00</td>\n        </tr>\n    </tbody>\n        </table>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><strong>Aggregated Functions:</strong> This query calculates the most recent sale date (<code>MAX(TO_CHAR((sale_date), 'dd-Mon-yyyy hh24:mi:ss'))</code>) for each officer, orders the results by the most recent sale date in descending order, and selects the top two rows with <code>ROWNUM <= 2</code>.</li>\n        <li><strong>Analytical Functions:</strong> The <code>RANK</code> function assigns a rank to each row based on the sale date in descending order, and the query selects the top two ranks.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 223,
    "Question": "Identify two officers with the highest total credit card sales in the first quarter of 2024.",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n    </style>\n</head>\n<body>\n    <p>To identify two officers with the highest total credit card sales in the first quarter of 2024, use the following SQL queries:</p>\n    <h4 class=\"bold-maroon\">Input Data: Table - BANK_OFFICERS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>OFFICER_ID</th>\n                <th>OFFICER_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Arjun Rathod</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Sakshi Kaul</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Manisha Dixit</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Input Data: Table - CREDIT_CARD_SALES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>SALE_ID</th>\n                <th>OFFICER_ID</th>\n                <th>SALE_DATE</th>\n                <th>CREDIT_CARD_ID</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>1</td>\n                <td>2024-01-15 14:30:00</td>\n                <td>101</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>2</td>\n                <td>2024-02-22 10:45:00</td>\n                <td>102</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>3</td>\n                <td>2024-03-18 09:15:00</td>\n                <td>103</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>1</td>\n                <td>2024-01-25 16:00:00</td>\n                <td>104</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>2</td>\n                <td>2024-03-26 11:30:00</td>\n                <td>105</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Method 1: Using Aggregated Functions:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> officer_id,\nofficer_name,\ntotal_sales\n<span class=\"SQLKeyword\">FROM</span> (\n<span class=\"SQLKeyword\">SELECT</span> bo.officer_id,\nbo.officer_name,\n<span class=\"SQLFunction\">COUNT</span>(ccs.credit_card_id) <span class=\"SQLKeyword\">AS</span> total_sales\n<span class=\"SQLKeyword\">FROM</span> Bank_Officers bo\n<span class=\"SQLKeyword\">JOIN</span> Credit_Card_Sales ccs <span class=\"SQLKeyword\">ON</span> bo.officer_id = ccs.officer_id\n<span class=\"SQLKeyword\">WHERE</span> <span class=\"SQLFunction\">EXTRACT</span>(<span class=\"SQLKeyword\">YEAR FROM</span> ccs.sale_date) = 2024\n<span class=\"SQLKeyword\">AND</span> <span class=\"SQLFunction\">TO_CHAR</span>(ccs.sale_date, <span class=\"SQLString\">'Q'</span>) = 1\n<span class=\"SQLKeyword\">GROUP BY</span> bo.officer_id,\nbo.officer_name\n<span class=\"SQLKeyword\">ORDER BY</span> total_sales <span class=\"SQLKeyword\">DESC</span>\n)\n<span class=\"SQLKeyword\">WHERE</span> <span class=\"SQLKeyword\">ROWNUM <=</span> 2<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">Method 2: Using Analytical Functions:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> officer_id,\nofficer_name,\ntotal_sales\n<span class=\"SQLKeyword\">FROM</span> (\n<span class=\"SQLKeyword\">SELECT</span> bo.officer_id,\nbo.officer_name,\n<span class=\"SQLFunction\">SUM</span>(ccs.credit_card_id) <span class=\"SQLKeyword\">AS</span> total_sales,\n<span class=\"SQLFunction\">COUNT</span>() <span class=\"SQLKeyword\">OVER</span> (\n<span class=\"SQLKeyword\">ORDER BY</span> <span class=\"SQLFunction\">SUM</span>(ccs.credit_card_id) <span class=\"SQLKeyword\">DESC</span>\n) <span class=\"SQLKeyword\">AS</span> sales_rank\n<span class=\"SQLKeyword\">FROM</span> Bank_Officers bo\n<span class=\"SQLKeyword\">JOIN</span> Credit_Card_Sales ccs <span class=\"SQLKeyword\">ON</span> bo.officer_id = ccs.officer_id\n<span class=\"SQLKeyword\">WHERE</span> <span class=\"SQLFunction\">EXTRACT</span>(<span class=\"SQLKeyword\">YEAR FROM</span> ccs.sale_date) = 2024\n<span class=\"SQLKeyword\">AND</span> <span class=\"SQLFunction\">TO_CHAR</span>(ccs.sale_date, <span class=\"SQLString\">'Q'</span>) = 1\n<span class=\"SQLKeyword\">GROUP BY</span> bo.officer_id,\nbo.officer_name\n)\n<span class=\"SQLKeyword\">WHERE</span> sales_rank <= 2<span class=\"SQLOperator\">;</span></pre>\n</div>\n<h4 class=\"bold-maroon\">Output:</h4>\n<div class=\"scrollable-container\">\n<table class=\"tg\">\n    <thead>\n        <tr>\n            <th>OFFICER_ID</th>\n            <th>OFFICER_NAME</th>\n            <th>TOTAL_SALES</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr class=\"input-row-even\">\n            <td>2</td>\n            <td>Sakshi Kaul</td>\n            <td>2</td>\n        </tr>\n        <tr class=\"input-row-odd\">\n            <td>1</td>\n            <td>Arjun Rathod</td>\n            <td>2</td>\n        </tr>\n    </tbody>\n        </table>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><strong>Aggregated Functions:</strong> Calculates the total credit card count for each bank officer during the first quarter of 2024. Joins the <code>Bank_Officers</code> and <code>Credit_Card_Sales</code> tables, filters the sales to Q1 2024 using the <code>EXTRACT</code> and <code>TO_CHAR</code> functions, and limits the results to the top two officers by total sales.</li>\n        <li><strong>Analytical Functions:</strong> Calculates the total credit card count, ranks them by sales, and retrieves the top two officers with the highest sales using the <code>RANK</code> function.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 224,
    "Question": "Calculate the average number of days taken to deliver an order.",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n    </style>\n</head>\n<body>\n    <p>To calculate the average number of days taken to deliver an order, use the following SQL queries:</p>\n    <h4 class=\"bold-maroon\">Input Data: Table - ORDERS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORDERID</th>\n                <th>ORDERDATE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>2024-07-01</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>2024-07-03</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>2024-07-05</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Input Data: Table - DELIVERIES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>DELIVERYID</th>\n                <th>ORDERID</th>\n                <th>DELIVERYDATE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>1</td>\n                <td>2024-07-05</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>2</td>\n                <td>2024-07-08</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>3</td>\n                <td>2024-07-07</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Calculating Delivery Times and Average:</h4>\n    <h4 class=\"bold-maroon\">Using Aggregate Function:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    <span class=\"SQLFunction\">AVG</span>(d.deliverydate - o.orderdate) <span class=\"SQLKeyword\">AS</span> avgdeliverydays_aggregate\n<span class=\"SQLKeyword\">FROM</span>\n         orders o\n    <span class=\"SQLKeyword\">JOIN</span> deliveries d <span class=\"SQLKeyword\">ON</span> o.orderid = d.orderid<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">Output for the Aggregate Function Query:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>AVGDELIVERYDAYS_AGGREGATE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>3.6667</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Using Analytical Function:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> o.OrderID,\no.OrderDate,\nd.DeliveryDate,\n(d.DeliveryDate - o.OrderDate) <span class=\"SQLKeyword\">AS</span> DeliveryDays,\n<span class=\"SQLFunction\">AVG</span>(d.DeliveryDate - o.OrderDate) <span class=\"SQLKeyword\">OVER</span> () \n            <span class=\"SQLKeyword\">AS</span> AvgDeliveryDays_Analytical\n<span class=\"SQLKeyword\">FROM</span> Orders o\n<span class=\"SQLKeyword\">JOIN</span> Deliveries d <span class=\"SQLKeyword\">ON</span> o.OrderID = d.OrderID<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">Output for the Analytical Function Query:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORDERID</th>\n                <th>ORDERDATE</th>\n                <th>DELIVERYDATE</th>\n                <th>DELIVERYDAYS</th>\n                <th>AVGDELIVERYDAYS_ANALYTICAL</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>2024-07-01</td>\n                <td>2024-07-05</td>\n                <td>4</td>\n                <td>3.6667</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>2024-07-03</td>\n                <td>2024-07-08</td>\n                <td>5</td>\n                <td>3.6667</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>2024-07-05</td>\n                <td>2024-07-07</td>\n                <td>2</td>\n                <td>3.6667</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Summary:</h4>\n    <ul>\n        <li><strong>ORDERS Table:</strong> Contains information about the orders.</li>\n        <li><strong>DELIVERIES Table:</strong> Contains information about the deliveries.</li>\n        <li><strong>Aggregate Function:</strong> Used to calculate the overall average delivery time.</li>\n        <li><strong>Analytical Function:</strong> Used to calculate the average delivery time and include it in each row of the result set.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 225,
    "Question": "Determine which day of the week generates the highest total sales amount.",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n    </style>\n</head>\n<body>\n    <p>To determine which day of the week generates the highest total sales amount, use the following SQL queries:</p>\n    <h4 class=\"bold-maroon\">Input Data: Table - ORDERS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORDER_ID</th>\n                <th>ORDER_DATE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>2024-07-01</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>2024-07-03</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>2024-07-05</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>2024-07-07</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>2024-07-08</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Input Data: Table - ORDER_ITEMS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORDER_ITEM_ID</th>\n                <th>ORDER_ID</th>\n                <th>SALES_AMOUNT</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>1</td>\n                <td>100</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>1</td>\n                <td>150</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>2</td>\n                <td>200</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>3</td>\n                <td>50</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>4</td>\n                <td>300</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>6</td>\n                <td>5</td>\n                <td>250</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Calculating Total Sales and Determining the Day with the Highest Sales:</h4>\n    <h4 class=\"bold-maroon\">Using Aggregate Function:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> *\n<span class=\"SQLKeyword\">FROM</span> (\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">TO_CHAR</span>(o.order_date, <span class=\"SQLString\">'DD'</span>) <span class=\"SQLKeyword\">AS</span> order_date,\n<span class=\"SQLFunction\">TO_CHAR</span>(o.order_date, <span class=\"SQLString\">'Day'</span>) <span class=\"SQLKeyword\">AS</span> day_of_week,\n<span class=\"SQLFunction\">SUM</span>(oi.sales_amount) <span class=\"SQLKeyword\">AS</span> total_sales\n<span class=\"SQLKeyword\">FROM</span> orders o\n<span class=\"SQLKeyword\">JOIN</span> order_items oi <span class=\"SQLKeyword\">ON</span> o.order_id = oi.order_id\n<span class=\"SQLKeyword\">GROUP BY</span> <span class=\"SQLFunction\">TO_CHAR</span>(o.order_date, <span class=\"SQLString\">'DD'</span>),\n<span class=\"SQLFunction\">TO_CHAR</span>(o.order_date, <span class=\"SQLString\">'Day'</span>)\n<span class=\"SQLKeyword\">ORDER BY</span> total_sales <span class=\"SQLKeyword\">DESC</span>\n)\n<span class=\"SQLKeyword\">WHERE</span> <span class=\"SQLKeyword\">ROWNUM =</span> 1<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">Output for the Aggregate Function Query:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORDER_DATE</th>\n                <th>DAY_OF_WEEK</th>\n                <th>TOTAL_SALES</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>07</td>\n                <td>Sunday</td>\n                <td>300</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <p>This query retrieves the date, day of the week, and total sales for orders, groups by date and day, and orders the results by total sales in descending order. It then selects only the top row (highest sales) from this ordered list.</p>\n    <h4 class=\"bold-maroon\">Using Analytical Function to Identify the Day with the Highest Sales:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> order_date,\nday_of_week,\ntotal_sales,\nsales_rank\n<span class=\"SQLKeyword\">FROM</span> (\n<span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">TO_CHAR</span>(o.order_date, <span class=\"SQLString\">'DD'</span>) <span class=\"SQLKeyword\">AS</span> order_date,\n<span class=\"SQLFunction\">TO_CHAR</span>(o.order_date, <span class=\"SQLString\">'Day'</span>) <span class=\"SQLKeyword\">AS</span> day_of_week,\n<span class=\"SQLFunction\">SUM</span>(oi.sales_amount) <span class=\"SQLKeyword\">AS</span> total_sales,\n<span class=\"SQLFunction\">RANK</span>() <span class=\"SQLKeyword\">OVER</span> (\n<span class=\"SQLKeyword\">ORDER BY</span> <span class=\"SQLFunction\">SUM</span>(oi.sales_amount) <span class=\"SQLKeyword\">DESC</span>\n) <span class=\"SQLKeyword\">AS</span> sales_rank\n<span class=\"SQLKeyword\">FROM</span> orders o\n<span class=\"SQLKeyword\">JOIN</span> order_items oi <span class=\"SQLKeyword\">ON</span> o.order_id = oi.order_id\n<span class=\"SQLKeyword\">GROUP BY</span> <span class=\"SQLFunction\">TO_CHAR</span>(o.order_date, <span class=\"SQLString\">'DD'</span>),\n<span class=\"SQLFunction\">TO_CHAR</span>(o.order_date, <span class=\"SQLString\">'Day'</span>)\n)\n<span class=\"SQLKeyword\">WHERE</span> sales_rank = 1<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">Output for the Analytical Function Query:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORDER_DATE</th>\n                <th>DAY_OF_WEEK</th>\n                <th>TOTAL_SALES</th>\n                <th>SALES_RANK</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>07</td>\n                <td>Sunday</td>\n                <td>300</td>\n                <td>1</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <p>This query calculates the total sales for each day, ranks the days by total sales in descending order, and retrieves the date, day of the week, total sales, and rank for the day with the highest total sales.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 226,
    "Question": "Determine the percentage of customers who have made more than one purchase.",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - CUSTOMERS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_ID</th>\n                <th>CUSTOMER_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Marie Curie</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Rachel Carson</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Galileo Galilei</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <p  class=\"bold-maroon\">Input Data: Table - ORDERS</p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORDER_ID</th>\n                <th>ORDER_DATE</th>\n                <th>CUSTOMER_ID</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>2024-07-01</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>2024-07-03</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>2024-07-05</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>2024-07-07</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>2024-07-08</td>\n                <td>3</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>6</td>\n                <td>2024-07-10</td>\n                <td>1</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">SQL Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">WITH</span> customer_order_counts <span class=\"SQLKeyword\">AS</span> (\n    <span class=\"SQLKeyword\">SELECT</span>\n        customer_id,\n        <span class=\"SQLFunction\">COUNT</span>(order_id) <span class=\"SQLKeyword\">AS</span> order_count\n    <span class=\"SQLKeyword\">FROM</span>\n        orders\n    <span class=\"SQLKeyword\">GROUP BY</span>\n        customer_id\n), total_customers <span class=\"SQLKeyword\">AS</span> (\n    <span class=\"SQLKeyword\">SELECT</span>\n        <span class=\"SQLFunction\">COUNT</span>(*) <span class=\"SQLKeyword\">AS</span> total_count\n    <span class=\"SQLKeyword\">FROM</span>\n        customers\n), customers_with_multiple_orders <span class=\"SQLKeyword\">AS</span> (\n    <span class=\"SQLKeyword\">SELECT</span>\n        <span class=\"SQLFunction\">COUNT</span>(*) <span class=\"SQLKeyword\">AS</span> multiple_order_count\n    <span class=\"SQLKeyword\">FROM</span>\n        customer_order_counts\n    <span class=\"SQLKeyword\">WHERE</span>\n        order_count > 1\n)\n<span class=\"SQLKeyword\">SELECT</span>\n    <span class=\"SQLFunction\">ROUND</span>((customers_with_multiple_orders.multiple_order_count\n        / total_customers.total_count) * 100, 2) \n                <span class=\"SQLKeyword\">AS</span> percentage_multiple_orders\n<span class=\"SQLKeyword\">FROM</span>\n    total_customers,\n    customers_with_multiple_orders<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PERCENTAGE_MULTIPLE_ORDERS</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>66.67</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><strong>customer_order_counts CTE:</strong> This Common Table Expression (CTE) calculates the number of orders for each customer by grouping the orders by <code>customer_id</code> and counting the <code>order_id</code> for each customer.</li>\n        <li><strong>total_customers CTE and customers_with_multiple_orders CTE:</strong> The <code>total_customers</code> CTE calculates the total number of customers from the customers table, while the <code>customers_with_multiple_orders</code> CTE counts the number of customers who have made more than one order by filtering the <code>customer_order_counts</code> CTE for those with an order count greater than one.</li>\n        <li><strong>Final SELECT Statement:</strong> This part of the query calculates the percentage of customers who have made more than one purchase by dividing the count of customers with multiple orders by the total number of customers and multiplying by 100, outputting the result as <code>percentage_multiple_orders</code>.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 227,
    "Question": "Identify the month with the highest number of new customer registrations.",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - CUSTOMERS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_ID</th>\n                <th>CUSTOMER_NAME</th>\n                <th>REGISTRATION_DATE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Marie Curie</td>\n                <td>2024-07-01</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Rachel Carson</td>\n                <td>2024-07-15</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Galileo Galilei</td>\n                <td>2024-06-20</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>Isaac Newton</td>\n                <td>2024-07-20</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Ada Lovelace</td>\n                <td>2024-06-25</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">SQL Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">WITH</span> customer_registrations\n<span class=\"SQLKeyword\">AS</span> <span class=\"SQLKeyword\">(</span>\n<span class=\"SQLKeyword\">SELECT</span> TO_CHAR<span class=\"SQLFunction\">(</span>registration_date, <span class=\"SQLString\">'Mon-YYYY'</span><span class=\"SQLFunction\">)</span> \n            <span class=\"SQLKeyword\">AS</span> registration_month,\nCOUNT<span class=\"SQLFunction\">(</span><span class=\"SQLFunction\">*)</span> <span class=\"SQLKeyword\">AS</span> registration_count\n<span class=\"SQLKeyword\">FROM</span> customers\n<span class=\"SQLKeyword\">GROUP BY</span> TO_CHAR<span class=\"SQLFunction\">(</span>registration_date, <span class=\"SQLString\">'Mon-YYYY'</span><span class=\"SQLFunction\">)</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">,</span>\nmax_registrations\n<span class=\"SQLKeyword\">AS</span> <span class=\"SQLKeyword\">(</span>\n<span class=\"SQLKeyword\">SELECT</span> MAX<span class=\"SQLFunction\">(</span>registration_count<span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> max_count\n<span class=\"SQLKeyword\">FROM</span> customer_registrations\n<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">SELECT</span> registration_month,\nregistration_count\n<span class=\"SQLKeyword\">FROM</span> customer_registrations\n<span class=\"SQLKeyword\">WHERE</span> registration_count = <span class=\"SQLKeyword\">(</span>\n<span class=\"SQLKeyword\">SELECT</span> max_count\n<span class=\"SQLKeyword\">FROM</span> max_registrations\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>REGISTRATION_MONTH</th>\n                <th>REGISTRATION_COUNT</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>Jul-2024</td>\n                <td>3</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><strong>customer_registrations CTE:</strong> This Common Table Expression (CTE) calculates the number of customer registrations for each month by extracting the month and year from the \"registration_date\" and grouping the results.</li>\n        <li><strong>max_registrations CTE:</strong> Determines the maximum number of registrations in any single month.</li>\n        <li><strong>Final SELECT Statement:</strong> Retrieves the month(s) with the highest number of registrations by comparing each month's count to the maximum found.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 228,
    "Question": "Calculate the average time interval between consecutive purchases for each customer.",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - ORDERS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORDER_ID</th>\n                <th>ORDER_DATE</th>\n                <th>CUSTOMER_ID</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>07-01-2024 00:00:00</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>07-10-2024 00:00:00</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>07-15-2024 00:00:00</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>07-05-2024 00:00:00</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>07-20-2024 00:00:00</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>6</td>\n                <td>07-25-2024 00:00:00</td>\n                <td>3</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>7</td>\n                <td>07-27-2024 00:00:00</td>\n                <td>3</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">SQL Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">WITH</span> customer_orders\n<span class=\"SQLKeyword\">AS</span> <span class=\"SQLKeyword\">(</span>\n    <span class=\"SQLKeyword\">SELECT</span> customer_id,\n        order_date,\n        LAG<span class=\"SQLFunction\">(</span>order_date<span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">OVER</span> <span class=\"SQLKeyword\">(</span>\n            <span class=\"SQLKeyword\">PARTITION BY</span> customer_id <span class=\"SQLKeyword\">ORDER BY</span> order_date\n            <span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> prev_order_date\n    <span class=\"SQLKeyword\">FROM</span> orders\n    <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">,</span>\nintervals\n<span class=\"SQLKeyword\">AS</span> <span class=\"SQLKeyword\">(</span>\n    <span class=\"SQLKeyword\">SELECT</span> customer_id,\n        order_date,\n        prev_order_date,\n        <span class=\"SQLKeyword\">(</span>order_date - prev_order_date<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> interval_days\n    <span class=\"SQLKeyword\">FROM</span> customer_orders\n    <span class=\"SQLKeyword\">WHERE</span> prev_order_date <span class=\"SQLKeyword\">IS NOT NULL</span>\n    <span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">SELECT</span> customer_id,\n    AVG<span class=\"SQLFunction\">(</span>interval_days<span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> avg_interval_days\n<span class=\"SQLKeyword\">FROM</span> intervals\n<span class=\"SQLKeyword\">GROUP BY</span> customer_id<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CUSTOMER_ID</th>\n                <th>AVG_INTERVAL_DAYS</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>7</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>15</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>2</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><strong>customer_orders CTE:</strong> This Common Table Expression (CTE) uses the LAG function to find the previous order date for each customer's order, enabling calculation of the interval between orders.</li>\n        <li><strong>intervals CTE:</strong> Computes the days between consecutive orders for each customer.</li>\n        <li><strong>Final SELECT Statement:</strong> Calculates the average interval in days between consecutive purchases for each customer.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 229,
    "Question": "Calculate the percentage of orders that were canceled.",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - ORDERS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORDER_ID</th>\n                <th>ORDER_DATE</th>\n                <th>CUSTOMER_ID</th>\n                <th>ORDER_STATUS</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>07-01-2024 00:00:00</td>\n                <td>1</td>\n                <td>Completed</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>07-10-2024 00:00:00</td>\n                <td>1</td>\n                <td>Canceled</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>07-15-2024 00:00:00</td>\n                <td>1</td>\n                <td>Completed</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>07-05-2024 00:00:00</td>\n                <td>2</td>\n                <td>Completed</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>07-20-2024 00:00:00</td>\n                <td>2</td>\n                <td>Canceled</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>6</td>\n                <td>07-25-2024 00:00:00</td>\n                <td>3</td>\n                <td>Completed</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>7</td>\n                <td>07-27-2024 00:00:00</td>\n                <td>3</td>\n                <td>Canceled</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">SQL Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">Round</span><span class=\"SQLFunction\">(</span><span class=\"SQLKeyword\">(</span>\n        COUNT<span class=\"SQLFunction\">(</span>CASE\n            WHEN order_status = <span class=\"SQLString\">'Canceled'</span>\n                THEN 1\n            END<span class=\"SQLFunction\">)</span> / COUNT<span class=\"SQLFunction\">(</span>*<span class=\"SQLFunction\">)</span>\n        <span class=\"SQLKeyword\">)</span> * 100, 2<span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> percentage_canceled_orders\n<span class=\"SQLKeyword\">FROM</span> orders<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>PERCENTAGE_CANCELED_ORDERS</th>\n            </tr>\n        </head>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>42.86</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><strong>Total Orders:</strong> \"COUNT(*)\" returns the total number of orders.</li>\n        <li><strong>Canceled Orders:</strong> \"COUNT(CASE WHEN order_status = 'Canceled' THEN 1 END)\" counts the number of orders where \"order_status\" is 'Canceled'.</li>\n        <li><strong>Calculate Percentage:</strong> The count of canceled orders is divided by the total number of orders and multiplied by 100 to get the percentage.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 230,
    "Question": "Calculate the average response time for customer support tickets.",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - SUPPORT_TICKETS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>TICKET_ID</th>\n                <th>CREATED_AT</th>\n                <th>RESPONDED_AT</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>07-01-2024 08:00:00</td>\n                <td>07-01-2024 12:00:00</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>07-01-2024 09:00:00</td>\n                <td>07-01-2024 11:30:00</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>07-02-2024 10:00:00</td>\n                <td>07-02-2024 13:15:00</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>07-02-2024 11:00:00</td>\n                <td>07-02-2024 14:00:00</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>07-03-2024 08:30:00</td>\n                <td>NULL</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">SQL Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">WITH</span> response_times <span class=\"SQLKeyword\">AS</span> <span class=\"SQLKeyword\">(</span>\n    <span class=\"SQLKeyword\">SELECT</span>\nEXTRACT<span class=\"SQLFunction\">(</span>DAY <span class=\"SQLKeyword\">FROM</span> <span class=\"SQLKeyword\">(</span>responded_at - created_at<span class=\"SQLKeyword\">)</span><span class=\"SQLFunction\">)</span> * 24 * 60 +\nEXTRACT<span class=\"SQLFunction\">(</span>HOUR <span class=\"SQLKeyword\">FROM</span> <span class=\"SQLKeyword\">(</span>responded_at - created_at<span class=\"SQLKeyword\">)</span><span class=\"SQLFunction\">)</span> * 60 +\nEXTRACT<span class=\"SQLFunction\">(</span>MINUTE <span class=\"SQLKeyword\">FROM</span> <span class=\"SQLKeyword\">(</span>responded_at - created_at<span class=\"SQLKeyword\">)</span><span class=\"SQLFunction\">)</span> \n        <span class=\"SQLKeyword\">AS</span> response_time_minutes\n    <span class=\"SQLKeyword\">FROM</span> support_tickets\n    <span class=\"SQLKeyword\">WHERE</span> responded_at <span class=\"SQLKeyword\">IS NOT NULL</span>\n<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">SELECT</span> ROUND<span class=\"SQLFunction\">(</span>AVG<span class=\"SQLFunction\">(</span>response_time_minutes<span class=\"SQLFunction\">)</span>, 2<span class=\"SQLFunction\">)</span> \n        <span class=\"SQLKeyword\">AS</span> avg_response_time_minutes\n<span class=\"SQLKeyword\">FROM</span> response_times<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>AVG_RESPONSE_TIME_MINUTES</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>191.25</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><strong>response_times CTE:</strong> Calculates the response time in minutes by extracting the difference in days, hours, and minutes between \"responded_at\" and \"created_at\", converting the interval to minutes.</li>\n        <li><strong>Final SELECT Statement:</strong> Computes the average of the calculated response times in minutes.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 231,
    "Question": "Determine the conversion rate by calculating the percentage of website visitors who made a purchase.",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - WEBSITE_VISITORS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>VISITOR_ID</th>\n                <th>VISIT_DATE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>07-01-2024 08:00:00</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>07-01-2024 09:00:00</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>07-02-2024 10:00:00</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>07-02-2024 11:00:00</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>07-03-2024 08:30:00</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <p><strong>ORDERS Table</strong></p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORDER_ID</th>\n                <th>ORDER_DATE</th>\n                <th>VISITOR_ID</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>07-01-2024 12:00:00</td>\n                <td>1</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>07-01-2024 11:30:00</td>\n                <td>2</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>07-02-2024 13:15:00</td>\n                <td>3</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>07-02-2024 14:00:00</td>\n                <td>4</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>07-03-2024 15:30:00</td>\n                <td>1</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">SQL Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">WITH</span> total_visitors\n<span class=\"SQLKeyword\">AS</span> <span class=\"SQLKeyword\">(</span>\n    <span class=\"SQLKeyword\">SELECT</span> COUNT<span class=\"SQLFunction\">(</span><span class=\"SQLFunction\">*)</span> <span class=\"SQLKeyword\">AS</span> visitor_count\n    <span class=\"SQLKeyword\">FROM</span> website_visitors\n    <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">,</span>\npurchasers\n<span class=\"SQLKeyword\">AS</span> <span class=\"SQLKeyword\">(</span>\n    <span class=\"SQLKeyword\">SELECT</span> COUNT<span class=\"SQLFunction\">(</span>DISTINCT visitor_id<span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> purchaser_count\n    <span class=\"SQLKeyword\">FROM</span> orders\n    <span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">SELECT</span> ROUND<span class=\"SQLFunction\">(</span><span class=\"SQLKeyword\">(</span>purchasers.purchaser_count\n   / total_visitors.visitor_count<span class=\"SQLKeyword\">)</span> * 100, 2<span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> conversion_rate\n<span class=\"SQLKeyword\">FROM</span> total_visitors,\n    purchasers<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CONVERSION_RATE</th>\n            </tr>\n        </head>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>80.00</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><strong>total_visitors CTE:</strong> Counts the total number of website visitors.</li>\n        <li><strong>purchasers CTE:</strong> Counts the number of unique visitors who made a purchase.</li>\n        <li><strong>Final SELECT Statement:</strong> Calculates the conversion rate by dividing the number of purchasers by the total number of visitors and multiplying by 100 to get the percentage.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 232,
    "Question": "Find products that have been continuously available in the inventory for over six months.",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html>\n<head>\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - INVENTORY</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">PRODUCT_ID</th>\n                <th class=\"tg-th\">AVAILABLE_FROM</th>\n                <th class=\"tg-th\">AVAILABLE_TO</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">2023-01-01</td>\n                <td class=\"tg-td\">2024-07-01</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">2023-02-01</td>\n                <td class=\"tg-td\">2023-08-01</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">3</td>\n                <td class=\"tg-td\">2023-06-01</td>\n                <td class=\"tg-td\">2024-01-01</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">4</td>\n                <td class=\"tg-td\">2023-01-01</td>\n                <td class=\"tg-td\">2023-05-01</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">5</td>\n                <td class=\"tg-td\">2023-01-01</td>\n                <td class=\"tg-td\">2023-12-01</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">SQL Query</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    product_id\n<span class=\"SQLKeyword\">FROM</span>\n    inventory\n<span class=\"SQLKeyword\">WHERE</span>\n    months_between<span class=\"SQLFunction\">(</span>available_to, available_from<span class=\"SQLFunction\">)</span> > 6<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Output:</h4>\n<div class=\"scrollable-container\">\n<table class=\"tg\">\n    <thead>\n        <tr>\n            <th class=\"tg-th\">PRODUCT_ID</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td class=\"tg-td\">1</td>\n        </tr>\n        <tr>\n            <td class=\"tg-td\">3</td>\n        </tr>\n        <tr>\n            <td class=\"tg-td\">5</td>\n        </tr>\n    </tbody>\n        </table>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><b>Calculates Availability Duration:</b>\n            <ul>\n                <li>The <code>MONTHS_BETWEEN</code> function calculates the number of months between the <code>available_to</code> and <code>available_from</code> dates for each product in the <code>inventory</code> table.</li>\n            </ul>\n        </li>\n        <li><b>Filters Products by Duration:</b>\n            <ul>\n                <li>The <code>WHERE</code> clause filters and selects only those <code>product_id</code>s where the availability duration is greater than six months.</li>\n            </ul>\n        </li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 233,
    "Question": "Identify products that have never been returned by customers.",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html>\n<head>\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - PRODUCTS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">PRODUCT_ID</th>\n                <th class=\"tg-th\">PRODUCT_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">Laptop</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">Smartphone</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">3</td>\n                <td class=\"tg-td\">Tablet</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">4</td>\n                <td class=\"tg-td\">Headphones</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">5</td>\n                <td class=\"tg-td\">Smartwatch</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">ORDERS Table</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">ORDER_ID</th>\n                <th class=\"tg-th\">PRODUCT_ID</th>\n                <th class=\"tg-th\">STATUS</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">Completed</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">Completed</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">3</td>\n                <td class=\"tg-td\">3</td>\n                <td class=\"tg-td\">Completed</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">4</td>\n                <td class=\"tg-td\">4</td>\n                <td class=\"tg-td\">Completed</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">5</td>\n                <td class=\"tg-td\">5</td>\n                <td class=\"tg-td\">Completed</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">RETURNS Table</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">RETURN_ID</th>\n                <th class=\"tg-th\">ORDER_ID</th>\n                <th class=\"tg-th\">PRODUCT_ID</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">2</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">3</td>\n                <td class=\"tg-td\">3</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">PRODUCT_ID</th>\n                <th class=\"tg-th\">PRODUCT_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">Laptop</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">4</td>\n                <td class=\"tg-td\">Headphones</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">5</td>\n                <td class=\"tg-td\">Smartwatch</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Method 1 SQL Query using Joins</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> o.product_id,\n    p.product_name\n<span class=\"SQLKeyword\">FROM</span> orders o\n<span class=\"SQLKeyword\">LEFT JOIN</span>\nRETURNS r <span class=\"SQLKeyword\">ON</span> o.order_id = r.order_id\n<span class=\"SQLKeyword\">LEFT JOIN</span> products p <span class=\"SQLKeyword\">ON</span> o.product_id = p.product_id\n<span class=\"SQLKeyword\">WHERE</span> r.product_id <span class=\"SQLKeyword\">IS NULL</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><b>LEFT JOIN:</b>\n            <ul>\n                <li>Performs a left join between the <code>orders</code> and <code>returns</code> tables based on <code>order_id</code>.</li>\n                <li>Another left join with the <code>products</code> table to get product names.</li>\n            </ul>\n        </li>\n        <li><b>Filter with WHERE clause:</b>\n            <ul>\n                <li>The <code>WHERE</code> clause checks for <code>r.product_id IS NULL</code> to filter out any products that have return records, thus keeping only those products that have never been returned.</li>\n            </ul>\n        </li>\n    </ul>\n    <h4 class=\"bold-maroon\">Method 2 SQL Query using Subquery</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> p.product_id,\n    p.product_name\n<span class=\"SQLKeyword\">FROM</span> products p\n<span class=\"SQLKeyword\">WHERE</span> p.product_id <span class=\"SQLKeyword\">NOT IN</span> <span class=\"SQLKeyword\">(</span>\n        <span class=\"SQLKeyword\">SELECT DISTINCT</span> product_id\n        <span class=\"SQLKeyword\">FROM</span>\n        RETURNS\n        <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><b>Subquery:</b>\n            <ul>\n                <li>The subquery selects distinct <code>product_id</code> from the <code>returns</code> table, identifying products that have been returned.</li>\n            </ul>\n        </li>\n        <li><b>Main Query:</b>\n            <ul>\n                <li>The main query selects <code>product_id</code> and <code>product_name</code> from the <code>products</code> table where <code>product_id</code> is not in the list returned by the subquery, identifying products that have never been returned.</li>\n            </ul>\n        </li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 234,
    "Question": "Determine the proportion of total orders that have received a discount.",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html>\n<head>\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #594F4F;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - ORDERS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">ORDER_ID</th>\n                <th class=\"tg-th\">PRODUCT_ID</th>\n                <th class=\"tg-th\">STATUS</th>\n                <th class=\"tg-th\">DISCOUNT_APPLIED</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">Completed</td>\n                <td class=\"tg-td\">Y</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">Completed</td>\n                <td class=\"tg-td\">N</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">3</td>\n                <td class=\"tg-td\">3</td>\n                <td class=\"tg-td\">Completed</td>\n                <td class=\"tg-td\">Y</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">4</td>\n                <td class=\"tg-td\">4</td>\n                <td class=\"tg-td\">Completed</td>\n                <td class=\"tg-td\">N</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">5</td>\n                <td class=\"tg-td\">5</td>\n                <td class=\"tg-td\">Completed</td>\n                <td class=\"tg-td\">Y</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Method 1: SQL Query with CTE</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">WITH</span> total_orders <span class=\"SQLKeyword\">AS</span> <span class=\"SQLKeyword\">(</span>\n    <span class=\"SQLKeyword\">SELECT</span>\n        COUNT<span class=\"SQLFunction\">(</span><span class=\"SQLFunction\">*)</span> <span class=\"SQLKeyword\">AS</span> total_count\n    <span class=\"SQLKeyword\">FROM</span>\n        orders\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">,</span> discounted_orders <span class=\"SQLKeyword\">AS</span> <span class=\"SQLKeyword\">(</span>\n    <span class=\"SQLKeyword\">SELECT</span>\n        COUNT<span class=\"SQLFunction\">(</span><span class=\"SQLFunction\">*)</span> <span class=\"SQLKeyword\">AS</span> discounted_count\n    <span class=\"SQLKeyword\">FROM</span>\n        orders\n    <span class=\"SQLKeyword\">WHERE</span>\n        discount_applied = <span class=\"SQLString\">'Y'</span>\n<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">SELECT</span>\n    round<span class=\"SQLFunction\">(</span><span class=\"SQLKeyword\">(</span>discounted_orders.discounted_count\n        / total_orders.total_count<span class=\"SQLKeyword\">)</span> * 100, 2<span class=\"SQLFunction\">)</span> \n            <span class=\"SQLKeyword\">AS</span> discount_proportion_percentage\n<span class=\"SQLKeyword\">FROM</span>\n    total_orders,\n    discounted_orders<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Output:</h4>\n<div class=\"scrollable-container\">\n<table class=\"tg\">\n    <thead>\n        <tr>\n            <th class=\"tg-th\">DISCOUNT_PROPORTION_PERCENTAGE</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td class=\"tg-td\">60.00</td>\n        </tr>\n    </tbody>\n        </table>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><b>total_orders CTE:</b>\n            <ul>\n                <li>Calculates the total number of orders.</li>\n            </ul>\n        </li>\n        <li><b>discounted_orders CTE:</b>\n            <ul>\n                <li>Calculates the number of orders where a discount was applied by filtering on <code>discount_applied = 'Y'</code>.</li>\n            </ul>\n        </li>\n        <li><b>Final SELECT Statement:</b>\n            <ul>\n                <li>Calculates the proportion of discounted orders to the total number of orders.</li>\n                <li>Multiplies by 100 to convert the ratio to a percentage and rounds the result to two decimal places.</li>\n            </ul>\n        </li>\n    </ul>\n    <h4 class=\"bold-maroon\">Method 2: SQL Query with CASE Statement</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    COUNT<span class=\"SQLFunction\">(</span>\n        CASE\n            WHEN discount_applied = <span class=\"SQLString\">'Y'</span> <span class=\"SQLKeyword\">THEN</span>\n                1\n        END\n    <span class=\"SQLFunction\">)</span> * 100.0 / COUNT<span class=\"SQLFunction\">(</span><span class=\"SQLFunction\">*)</span> <span class=\"SQLKeyword\">AS</span> discount_proportion_percentage\n<span class=\"SQLKeyword\">FROM</span>\n    orders<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><b>Count Discounted Orders:</b>\n            <ul>\n                <li><code>COUNT(CASE WHEN discount_applied = 'Y' THEN 1 END)</code> counts the number of orders where a discount was applied (<code>discount_applied = 'Y'</code>).</li>\n            </ul>\n        </li>\n        <li><b>Calculate Proportion:</b>\n            <ul>\n                <li><code>COUNT(*)</code> counts the total number of orders.</li>\n                <li>The query then calculates the proportion of discounted orders to the total number of orders by dividing the count of discounted orders by the total count and multiplying by 100.0 to express it as a percentage (<code>* 100.0</code> ensures the result is in decimal format).</li>\n            </ul>\n        </li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 235,
    "Question": "Determine the percentage of customers who completed a purchase within thirty days of registering.",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html>\n<head>\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - CUSTOMERS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">CUSTOMER_ID</th>\n                <th class=\"tg-th\">REGISTRATION_DATE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">2023-01-01</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">2023-01-10</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">3</td>\n                <td class=\"tg-td\">2023-02-15</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">4</td>\n                <td class=\"tg-td\">2023-03-01</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">5</td>\n                <td class=\"tg-td\">2023-03-15</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Input Data: Table - ORDERS</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">ORDER_ID</th>\n                <th class=\"tg-th\">CUSTOMER_ID</th>\n                <th class=\"tg-th\">ORDER_DATE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">2023-01-15</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">2023-01-20</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">3</td>\n                <td class=\"tg-td\">3</td>\n                <td class=\"tg-td\">2023-03-20</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">4</td>\n                <td class=\"tg-td\">4</td>\n                <td class=\"tg-td\">2023-03-25</td>\n            </tr>\n            <tr>\n                <td class=\"tg-td\">5</td>\n                <td class=\"tg-td\">5</td>\n                <td class=\"tg-td\">2023-05-01</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">SQL Query</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">WITH</span> customers_with_purchase\n     <span class=\"SQLKeyword\">AS</span> <span class=\"SQLKeyword\">(</span><span class=\"SQLKeyword\">SELECT</span> c.customer_id\n         <span class=\"SQLKeyword\">FROM</span>   customers c\n                <span class=\"SQLKeyword\">JOIN</span> orders o\n                  <span class=\"SQLKeyword\">ON</span> c.customer_id = o.customer_id\n<span class=\"SQLKeyword\">WHERE</span>  o.order_date <= c.registration_date + <span class=\"SQLKeyword\">INTERVAL</span> <span class=\"SQLString\">'30'</span> DAY<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">,</span>\n     total_customers\n     <span class=\"SQLKeyword\">AS</span> <span class=\"SQLKeyword\">(</span><span class=\"SQLKeyword\">SELECT</span> COUNT<span class=\"SQLFunction\">(</span><span class=\"SQLFunction\">*)</span> <span class=\"SQLKeyword\">AS</span> total_count\n         <span class=\"SQLKeyword\">FROM</span>   customers<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">,</span>\n     customers_within_30_days\n     <span class=\"SQLKeyword\">AS</span> <span class=\"SQLKeyword\">(</span><span class=\"SQLKeyword\">SELECT</span> COUNT<span class=\"SQLFunction\">(</span>DISTINCT customer_id<span class=\"SQLFunction\">)</span> \n        <span class=\"SQLKeyword\">AS</span> purchase_within_30_days_count\n         <span class=\"SQLKeyword\">FROM</span>   customers_with_purchase<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">SELECT\n</span> ROUND<span class=\"SQLFunction\">(</span><span class=\"SQLKeyword\">(</span>customers_within_30_days.purchase_within_30_days_count /\n            total_customers.total_count<span class=\"SQLKeyword\">)</span> * 100, 2<span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span>\n       percentage_customers_with_purchase_within_30_days\n<span class=\"SQLKeyword\">FROM</span>   total_customers,\n       customers_within_30_days<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Output:</h4>\n<div class=\"scrollable-container\">\n<table class=\"tg\">\n    <thead>\n        <tr>\n            <th class=\"tg-th\">percentage_customers_with_purchase_within_30_days</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td class=\"tg-td\">60.00</td>\n        </tr>\n    </tbody>\n        </table>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><b>customers_with_purchase CTE:</b>\n            <ul>\n                <li>Identifies customers who made at least one purchase within thirty days of their registration date by joining the <code>customers</code> and <code>orders</code> tables and filtering the <code>order_date</code> to ensure it is within thirty days of the <code>registration_date</code>.</li>\n            </ul>\n        </li>\n        <li><b>total_customers CTE:</b>\n            <ul>\n                <li>Calculates the total number of registered customers.</li>\n            </ul>\n        </li>\n        <li><b>customers_within_30_days CTE:</b>\n            <ul>\n                <li>Counts the number of unique customers who made a purchase within thirty days of their registration.</li>\n            </ul>\n        </li>\n        <li><b>Final SELECT Statement:</b>\n            <ul>\n                <li>Calculates the percentage of customers who made a purchase within thirty days of registering by dividing the count from <code>customers_within_30_days</code> by the count from <code>total_customers</code>, multiplying the result by 100, and rounding it to two decimal places to obtain the percentage.</li>\n            </ul>\n        </li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 236,
    "Question": "Identify the first sale for each month.",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html>\n<head>\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - SALES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">SALE_ID</th>\n                <th class=\"tg-th\">SALE_DATE</th>\n                <th class=\"tg-th\">AMOUNT</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">2024-01-05 10:15:00</td>\n                <td class=\"tg-td\">100</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">2024-01-03 08:00:00</td>\n                <td class=\"tg-td\">200</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">3</td>\n                <td class=\"tg-td\">2024-02-10 14:30:00</td>\n                <td class=\"tg-td\">150</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">4</td>\n                <td class=\"tg-td\">2024-02-01 09:45:00</td>\n                <td class=\"tg-td\">250</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">5</td>\n                <td class=\"tg-td\">2024-03-15 11:00:00</td>\n                <td class=\"tg-td\">300</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">6</td>\n                <td class=\"tg-td\">2024-03-05 07:30:00</td>\n                <td class=\"tg-td\">50</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">SQL Query</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> sale_id,\nsale_date,\namount\n<span class=\"SQLKeyword\">FROM</span> <span class=\"SQLKeyword\">(</span>\n<span class=\"SQLKeyword\">SELECT</span> \n    sale_id,\n    sale_date,\n    amount,\n    ROW_NUMBER<span class=\"SQLFunction\">(</span><span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">OVER</span> <span class=\"SQLKeyword\">(</span>\n    <span class=\"SQLKeyword\">PARTITION BY</span> TO_CHAR<span class=\"SQLFunction\">(</span>sale_date, <span class=\"SQLString\">'YYYY-MM'</span><span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">ORDER BY</span> sale_date\n        <span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> rn\n<span class=\"SQLKeyword\">FROM</span> sales\n<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">WHERE</span> rn = 1<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Output:</h4>\n<div class=\"scrollable-container\">\n<table class=\"tg\">\n    <thead>\n        <tr>\n            <th class=\"tg-th\">SALE_ID</th>\n            <th class=\"tg-th\">SALE_DATE</th>\n            <th class=\"tg-th\">AMOUNT</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr class=\"input-row-even\">\n            <td class=\"tg-td\">2</td>\n            <td class=\"tg-td\">2024-01-03 08:00:00</td>\n            <td class=\"tg-td\">200</td>\n        </tr>\n        <tr class=\"input-row-odd\">\n            <td class=\"tg-td\">4</td>\n            <td class=\"tg-td\">2024-02-01 09:45:00</td>\n            <td class=\"tg-td\">250</td>\n        </tr>\n        <tr class=\"input-row-even\">\n            <td class=\"tg-td\">6</td>\n            <td class=\"tg-td\">2024-03-05 07:30:00</td>\n            <td class=\"tg-td\">50</td>\n        </tr>\n    </tbody>\n        </table>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><b>Inner Query:</b>\n            <ul>\n                <li>The inner query selects all columns from the <code>sales</code> table and adds a new column <code>rn</code>, which is generated by the <code>ROW_NUMBER()</code> function. The <code>ROW_NUMBER()</code> function partitions the data by the year and month of the <code>sale_date</code> and orders the rows within each partition by <code>sale_date</code> including the time component.</li>\n            </ul>\n        </li>\n        <li><b>Outer Query:</b>\n            <ul>\n                <li>The outer query filters the results to include only those rows where <code>rn = 1</code>, which corresponds to the first sale for each month, taking the time into account.</li>\n            </ul>\n        </li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 237,
    "Question": "Calculate the year-to-date (YTD) sales for each sale date.",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html>\n<head>\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - SALES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">SALE_ID</th>\n                <th class=\"tg-th\">SALE_DATE</th>\n                <th class=\"tg-th\">AMOUNT</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">2024-01-05 10:15:00</td>\n                <td class=\"tg-td\">100</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">2024-01-03 08:00:00</td>\n                <td class=\"tg-td\">200</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">3</td>\n                <td class=\"tg-td\">2024-02-10 14:30:00</td>\n                <td class=\"tg-td\">150</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">4</td>\n                <td class=\"tg-td\">2024-02-01 09:45:00</td>\n                <td class=\"tg-td\">250</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">5</td>\n                <td class=\"tg-td\">2024-03-15 11:00:00</td>\n                <td class=\"tg-td\">300</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">6</td>\n                <td class=\"tg-td\">2024-03-05 07:30:00</td>\n                <td class=\"tg-td\">50</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">SQL Query</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> sale_year,\nytd_sales\n<span class=\"SQLKeyword\">FROM</span> <span class=\"SQLKeyword\">(</span>\n<span class=\"SQLKeyword\">SELECT</span> TO_CHAR<span class=\"SQLFunction\">(</span>sale_date, <span class=\"SQLString\">'YYYY'</span><span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> sale_year,\nSUM<span class=\"SQLFunction\">(</span>amount<span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">OVER</span> <span class=\"SQLKeyword\">(</span><span class=\"SQLKeyword\">PARTITION BY</span> TO_CHAR<span class=\"SQLFunction\">(</span>sale_date, <span class=\"SQLString\">'YYYY'</span><span class=\"SQLFunction\">)</span><span class=\"SQLKeyword\">)</span> \n    <span class=\"SQLKeyword\">AS</span> ytd_sales,\nROW_NUMBER<span class=\"SQLFunction\">(</span><span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">OVER</span> <span class=\"SQLKeyword\">(</span>\n<span class=\"SQLKeyword\">PARTITION BY</span> TO_CHAR<span class=\"SQLFunction\">(</span>sale_date, <span class=\"SQLString\">'YYYY'</span><span class=\"SQLFunction\">)</span> \n    <span class=\"SQLKeyword\">ORDER BY</span> TO_CHAR<span class=\"SQLFunction\">(</span>sale_date, <span class=\"SQLString\">'YYYY'</span><span class=\"SQLFunction\">)</span>\n<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> rn\n<span class=\"SQLKeyword\">FROM</span> sales<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">WHERE</span> rn = 1<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Output:</h4>\n<div class=\"scrollable-container\">\n<table class=\"tg\">\n    <thead>\n        <tr>\n            <th class=\"tg-th\">SALE_YEAR</th>\n            <th class=\"tg-th\">YTD_SALES</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr class=\"input-row-even\">\n            <td class=\"tg-td\">2024</td>\n            <td class=\"tg-td\">1050</td>\n        </tr>\n    </tbody>\n        </table>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><b>Inner Query - Calculation of YTD Sales and Row Number:</b>\n            <ul>\n                <li>The inner query selects the <code>sale_date</code> and converts it to the year format (<code>YYYY</code>) to create the <code>sale_year</code>.</li>\n                <li>It calculates the year-to-date (YTD) sales for each year using the <code>SUM(amount) OVER (PARTITION BY TO_CHAR(sale_date, 'YYYY'))</code> clause. This computes the cumulative sum of the <code>amount</code> column for each year.</li>\n                <li>It assigns a row number (<code>rn</code>) to each row within the same year using the <code>ROW_NUMBER() OVER (PARTITION BY TO_CHAR(sale_date, 'YYYY') ORDER BY TO_CHAR(sale_date, 'YYYY'))</code> clause. This assigns a unique sequential integer to each row within the partition of each year.</li>\n            </ul>\n        </li>\n        <li><b>Filtering the First Row per Year:</b>\n            <ul>\n                <li>The outer query filters the results of the inner query to include only the first row (<code>rn = 1</code>) for each year. This ensures that only one row per year is returned.</li>\n            </ul>\n        </li>\n        <li><b>Final Output:</b>\n            <ul>\n                <li>The final <code>SELECT</code> statement retrieves the <code>sale_year</code> and the calculated <code>ytd_sales</code> from the filtered results of the inner query. This results in a table showing the YTD sales for each year, represented by a single row per year.</li>\n            </ul>\n        </li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 238,
    "Question": "What is Normalization and what are the advantages of it?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html>\n<head>\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Normalization in Database Design</h4>\n    <p>Normalization is a process in database design aimed at organizing data to minimize redundancy and dependency. This involves dividing a database into multiple related tables and defining relationships between them. The primary goal is to reduce data redundancy and enhance data integrity.</p>\n    <h4 class=\"bold-maroon\">Advantages of Normalization</h4>\n    <ul>\n        <li><b>Elimination of Redundancy:</b>\n            <ul>\n                <li><b>Reduction of Duplicate Data:</b> By structuring data into related tables, normalization ensures that each piece of data is stored only once, significantly reducing redundancy.</li>\n                <li><b>Efficient Data Management:</b> With minimized duplicate data, database storage is used more effectively, leading to cost savings and improved performance.</li>\n            </ul>\n        </li>\n        <li><b>Improved Data Integrity and Consistency:</b>\n            <ul>\n                <li><b>Ensuring Data Accuracy:</b> Normalization enforces data integrity through constraints and relationships, such as foreign keys and unique constraints, ensuring referenced data exists and entries are not duplicated.</li>\n                <li><b>Reduction of Update Anomalies:</b> Properly organized data prevents update anomalies, ensuring consistent changes throughout the database. Updates in one place do not lead to inconsistencies elsewhere.</li>\n            </ul>\n        </li>\n        <li><b>Easier Data Maintenance:</b>\n            <ul>\n                <li><b>Simpler Data Management:</b> Normalized databases are logically organized, making them easier to maintain and manage. This facilitates the addition, deletion, or updating of data without causing disruptions.</li>\n                <li><b>Improved Query Performance:</b> With data logically distributed and reduced redundancy, normalized tables can lead to more efficient queries, enhancing overall performance.</li>\n            </ul>\n        </li>\n    </ul>\n    <h4 class=\"bold-maroon\">Summary:</h4>\n    <p>Normalization is a key aspect of database design that organizes data to reduce redundancy and maintain integrity. Its main benefits include the elimination of redundant data, enhanced data integrity and consistency, and easier data maintenance. This leads to more efficient and reliable database systems.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 239,
    "Question": "How do you identify numeric values in a column?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html>\n<head>\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - DATA_TABLE</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">ID</th>\n                <th class=\"tg-th\">DATA_COLUMN</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">123</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">abc</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">3</td>\n                <td class=\"tg-td\">456def</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">4</td>\n                <td class=\"tg-td\">789</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">5</td>\n                <td class=\"tg-td\">12.34</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">6</td>\n                <td class=\"tg-td\">000123</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">7</td>\n                <td class=\"tg-td\">-123</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">ID</th>\n                <th class=\"tg-th\">DATA_COLUMN</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">123</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">4</td>\n                <td class=\"tg-td\">789</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">5</td>\n                <td class=\"tg-td\">12.34</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">6</td>\n                <td class=\"tg-td\">000123</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">7</td>\n                <td class=\"tg-td\">-123</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Method 1 using <code>REGEXP_LIKE</code> SQL Query</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    id,\n    data_column\n<span class=\"SQLKeyword\">FROM</span>\n    data_table\n<span class=\"SQLKeyword\">WHERE</span>\n    REGEXP_LIKE<span class=\"SQLFunction\">(</span>data_column, <span class=\"SQLString\">'^-?[0-9]+(\\.[0-9]+)?$'</span><span class=\"SQLFunction\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><code>^-?</code>: Matches an optional negative sign at the start.</li>\n        <li><code>[0-9]+</code>: Matches one or more digits.</li>\n        <li><code>(\\.[0-9]+)?</code>: Matches an optional group consisting of a decimal point followed by one or more digits.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Method 2 using Row-Level Functions</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> id,\ndata_column\n<span class=\"SQLKeyword\">FROM</span> data_table\n<span class=\"SQLKeyword\">WHERE</span> UPPER<span class=\"SQLFunction\">(</span>data_column<span class=\"SQLFunction\">)</span> = LOWER<span class=\"SQLFunction\">(</span>data_column<span class=\"SQLFunction\">)</span>\n<span class=\"SQLKeyword\">AND</span> TRANSLATE<span class=\"SQLFunction\">(</span>data_column, <span class=\"SQLString\">'0123456789.-'</span>, <span class=\"SQLString\">'0123456789.-'</span><span class=\"SQLFunction\">)</span> \n    <span class=\"SQLKeyword\">IS NOT NULL</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><code>upper(data_column) = lower(data_column)</code>: Ensures that the column does not contain any alphabetical characters by checking if the uppercase conversion is equal to the lowercase conversion.</li>\n        <li><code>TRANSLATE(data_column, '0123456789.-', '0123456789.-') IS NOT NULL</code>: Ensures the column contains only numeric characters, a decimal point, or a negative sign.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 240,
    "Question": "What is Hash Partitioning in Oracle?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html>\n<head>\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Hash Partitioning in Oracle</h4>\n    <p>Hash partitioning is a data distribution technique in Oracle databases designed to enhance performance and manageability by evenly distributing data across partitions. This method applies a hash function to a partitioning key (e.g., a column value) to determine the partition for each row.</p>\n    <h4 class=\"bold-maroon\">Key Features of Hash Partitioning</h4>\n    <ul>\n        <li><b>Uniform Data Distribution:</b>\n            <ul>\n                <li>Hash partitioning ensures that rows are evenly spread across all partitions. This results in each partition having a similar number of rows, reducing data skew and balancing the load.</li>\n            </ul>\n        </li>\n        <li><b>Partitioning Key:</b>\n            <ul>\n                <li>Typically, one or more columns that uniquely identify each row serve as the partitioning key. The hash function is applied to these columns to determine partition assignments.</li>\n            </ul>\n        </li>\n        <li><b>Improved Performance:</b>\n            <ul>\n                <li>By evenly distributing data, hash partitioning enhances query performance. It reduces contention and improves parallelism by allowing operations to be performed independently on different partitions.</li>\n            </ul>\n        </li>\n        <li><b>Simplicity and Manageability:</b>\n            <ul>\n                <li>Hash partitioning simplifies database management by distributing data uniformly without needing detailed knowledge of data distribution patterns, making it easier to manage and optimize large tables.</li>\n            </ul>\n        </li>\n    </ul>\n    <h4 class=\"bold-maroon\">Example of Hash Partitioning</h4>\n    <p>Consider a table named <code>orders</code> that needs to be partitioned based on the <code>order_id</code> column.</p>\n    <h4 class=\"bold-maroon\">Creating a Hash-Partitioned Table</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> orders <span class=\"SQLKeyword\">(</span>\n    order_id NUMBER,\n    customer_id NUMBER,\n    order_date DATE,\n    amount NUMBER\n<span class=\"SQLKeyword\">)</span>\nPARTITION <span class=\"SQLKeyword\">BY HASH</span> <span class=\"SQLKeyword\">(</span>order_id<span class=\"SQLKeyword\">)</span>\nPARTITIONS 4<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Benefits of Hash Partitioning</h4>\n    <ul>\n        <li><b>Load Balancing:</b>\n            <ul>\n                <li>Hash partitioning balances the load across partitions, preventing any single partition from becoming a performance bottleneck.</li>\n            </ul>\n        </li>\n        <li><b>Parallel Processing:</b>\n            <ul>\n                <li>It supports efficient parallel processing of queries and DML operations by distributing the workload evenly.</li>\n            </ul>\n        </li>\n        <li><b>Simplified Management:</b>\n            <ul>\n                <li>Database administrators do not need to manage data distribution manually, as the hash function ensures an even spread of data.</li>\n            </ul>\n        </li>\n        <li><b>Scalability:</b>\n            <ul>\n                <li>Hash partitioning facilitates scaling the database as data grows, without requiring extensive reorganization of data.</li>\n            </ul>\n        </li>\n    </ul>\n    <h4 class=\"bold-maroon\">Summary:</h4>\n    <p>Hash partitioning in Oracle effectively distributes data evenly across partitions, leading to improved performance and manageability. It automatically balances the load, supports parallel processing, and simplifies the management of large tables. This method is particularly useful when data distribution is unpredictable or skewed, ensuring an even distribution of data across all partitions.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 241,
    "Question": "How can images be stored in an Oracle database? Describe the process and provide an example.",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html>\n<head>\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">1. Create a table to store images:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> product_images <span class=\"SQLKeyword\">(</span>\n    product_id NUMBER <span class=\"SQLKeyword\">PRIMARY KEY</span>,\n    IMAGE BLOB\n    <span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">2. Insert an image:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">INSERT INTO</span> product_images <span class=\"SQLKeyword\">(</span>\n    product_id,\n    IMAGE\n    <span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>\n    1,\n    EMPTY_BLOB<span class=\"SQLFunction\">(</span><span class=\"SQLFunction\">)</span>\n    <span class=\"SQLKeyword\">)</span> RETURNING IMAGE\nINTO :image_blob<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>Note: Bind the <code>:image_blob</code> to the image data using a programming language like Python or Java.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 242,
    "Question": "Explain the difference between analytical functions and GROUP BY functions in Oracle SQL.",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html>\n<head>\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Analytical Functions:</h4>\n    <p>Perform calculations across a set of table rows related to the current row without collapsing the rows into a single result.</p>\n    <h4 class=\"bold-maroon\">Example of Analytical Function:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> employee_id,\nsalary,\nAVG<span class=\"SQLFunction\">(</span>salary<span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">OVER</span> <span class=\"SQLKeyword\">(</span>PARTITION <span class=\"SQLKeyword\">BY</span> department_id<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> avg_salary\n<span class=\"SQLKeyword\">FROM</span> employees<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">GROUP BY Functions:</h4>\n    <p>Aggregate data and collapse multiple rows into a single result row for each group.</p>\n    <h4 class=\"bold-maroon\">Example of GROUP BY Function:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> department_id, AVG<span class=\"SQLFunction\">(</span>salary<span class=\"SQLFunction\">)</span>\n<span class=\"SQLKeyword\">FROM</span> employees\n<span class=\"SQLKeyword\">GROUP BY</span> department_id<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 243,
    "Question": "Can functions selected in a query be used in the WHERE clause? Provide an example.",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html>\n<head>\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Example:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">*</span> <span class=\"SQLKeyword\">FROM</span> customers\n<span class=\"SQLKeyword\">WHERE</span> UPPER<span class=\"SQLFunction\">(</span>last_name<span class=\"SQLFunction\">)</span> = <span class=\"SQLString\">'RHONDA'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>The <code>UPPER</code> function is used in the <code>WHERE</code> clause to filter rows where the last name matches 'RHONDA' (case insensitive).</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 244,
    "Question": "Describe the different normal forms (1NF, 2NF, 3NF, BCNF, 4NF, 5NF) with examples.",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html>\n<head>\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">First Normal Form (1NF)</h4>\n    <p><b>Definition:</b> A table is in 1NF if it contains only atomic (indivisible) values and each column holds values of a single type.</p>\n    <h4 class=\"bold-maroon\">Example:</h4>\n    <p>Consider a table <code>STUDENTS</code> with a <code>courses</code> column that holds multiple course names for each student.</p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">STUDENT_ID</th>\n                <th class=\"tg-th\">STUDENT_NAME</th>\n                <th class=\"tg-th\">COURSES</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">Usain Bolt</td>\n                <td class=\"tg-td\">Math, Science</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">Simone Biles</td>\n                <td class=\"tg-td\">English, History</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <p>To convert it to 1NF, split the <code>courses</code> column into multiple rows:</p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">STUDENT_ID</th>\n                <th class=\"tg-th\">STUDENT_NAME</th>\n                <th class=\"tg-th\">COURSE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">Usain Bolt</td>\n                <td class=\"tg-td\">Math</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">Usain Bolt</td>\n                <td class=\"tg-td\">Science</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">Simone Biles</td>\n                <td class=\"tg-td\">English</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">Simone Biles</td>\n                <td class=\"tg-td\">History</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Second Normal Form (2NF)</h4>\n    <p><b>Definition:</b> A table is in 2NF if it is in 1NF and all non-key attributes are fully functionally dependent on the primary key. This means there should be no partial dependency of any column on the primary key.</p>\n    <h4 class=\"bold-maroon\">Example:</h4>\n    <p>Consider a table <code>ORDERS</code> with a composite primary key <code>(order_id, product_id)</code> and the following columns:</p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">ORDER_ID</th>\n                <th class=\"tg-th\">PRODUCT_ID</th>\n                <th class=\"tg-th\">PRODUCT_NAME</th>\n                <th class=\"tg-th\">ORDER_DATE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">Laptop</td>\n                <td class=\"tg-td\">2023-01-01</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">Mouse</td>\n                <td class=\"tg-td\">2023-01-01</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">Laptop</td>\n                <td class=\"tg-td\">2023-02-01</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <p>The <code>product_name</code> is dependent only on <code>product_id</code>, not on the full primary key <code>(order_id, product_id)</code>. To convert this to 2NF:</p>\n    <p>Create two tables:</p>\n    <ul>\n        <li><code>ORDERS</code>: with columns <code>order_id</code>, <code>order_date</code></li>\n        <li><code>ORDER_PRODUCTS</code>: with columns <code>order_id</code>, <code>product_id</code>, <code>product_name</code></li>\n    </ul>\n    <h4 class=\"bold-maroon\">\"ORDERS\" Table:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">ORDER_ID</th>\n                <th class=\"tg-th\">ORDER_DATE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">2023-01-01</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">2023-02-01</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">\"ORDER_PRODUCTS\" Table:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">ORDER_ID</th>\n                <th class=\"tg-th\">PRODUCT_ID</th>\n                <th class=\"tg-th\">PRODUCT_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">Laptop</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">Mouse</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">Laptop</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Third Normal Form (3NF)</h4>\n    <p><b>Definition:</b> A table is in 3NF if it is in 2NF and all the columns are transitively dependent on the primary key, i.e., non-key attributes should not depend on other non-key attributes.</p>\n    <h4 class=\"bold-maroon\">Example:</h4>\n    <p>Consider a table <code>EMPLOYEES</code>:</p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">EMP_ID</th>\n                <th class=\"tg-th\">EMP_NAME</th>\n                <th class=\"tg-th\">DEPT_ID</th>\n                <th class=\"tg-th\">DEPT_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">Rhonda</td>\n                <td class=\"tg-td\">10</td>\n                <td class=\"tg-td\">HR</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">Shyam</td>\n                <td class=\"tg-td\">20</td>\n                <td class=\"tg-td\">IT</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <p>Here, <code>dept_name</code> is dependent on <code>dept_id</code>, not directly on <code>emp_id</code>. To convert this to 3NF:</p>\n    <p>Create two tables:</p>\n    <ul>\n        <li><code>EMPLOYEES</code>: with columns <code>emp_id</code>, <code>emp_name</code>, <code>dept_id</code></li>\n        <li><code>DEPARTMENTS</code>: with columns <code>dept_id</code>, <code>dept_name</code></li>\n    </ul>\n    <h4 class=\"bold-maroon\">\"EMPLOYEES\" Table:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">EMP_ID</th>\n                <th class=\"tg-th\">EMP_NAME</th>\n                <th class=\"tg-th\">DEPT_ID</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">Rhonda</td>\n                <td class=\"tg-td\">10</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">Shyam</td>\n                <td class=\"tg-td\">20</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">\"DEPARTMENTS\" Table:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">DEPT_ID</th>\n                <th class=\"tg-th\">DEPT_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">10</td>\n                <td class=\"tg-td\">HR</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">20</td>\n                <td class=\"tg-td\">IT</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Boyce-Codd Normal Form (BCNF)</h4>\n    <p><b>Definition:</b> A table is in BCNF if it is in 3NF and every determinant is a candidate key. A determinant is an attribute on which some other attribute is fully functionally dependent.</p>\n    <h4 class=\"bold-maroon\">Example:</h4>\n    <p>Consider a table <code>COURSE_ALLOCATIONS</code>:</p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">COURSE_ID</th>\n                <th class=\"tg-th\">PROFESSOR_ID</th>\n                <th class=\"tg-th\">PROFESSOR_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">Dr. Albert</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">Dr. Isaac</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">3</td>\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">Dr. Albert</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <p>Here, <code>professor_id</code> determines <code>professor_name</code>, but <code>professor_id</code> is not a candidate key. To convert this to BCNF:</p>\n    <p>Create two tables:</p>\n    <ul>\n        <li><code>COURSES</code>: with columns <code>course_id</code>, <code>professor_id</code></li>\n        <li><code>PROFESSORS</code>: with columns <code>professor_id</code>, <code>professor_name</code></li>\n    </ul>\n    <h4 class=\"bold-maroon\">\"COURSES\" Table:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">COURSE_ID</th>\n                <th class=\"tg-th\">PROFESSOR_ID</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">1</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">2</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">3</td>\n                <td class=\"tg-td\">1</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">\"PROFESSORS\" Table:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">PROFESSOR_ID</th>\n                <th class=\"tg-th\">PROFESSOR_NAME</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">Dr. Albert</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">Dr. Isaac</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Fourth Normal Form (4NF)</h4>\n    <p><b>Definition:</b> A table is in 4NF if it is in BCNF and has no multi-valued dependencies. A multi-valued dependency occurs when one attribute in a table uniquely determines another attribute, independently of all other attributes.</p>\n    <h4 class=\"bold-maroon\">Example:</h4>\n    <p>Consider a table <code>STUDENTS_COURSES_HOBBIES</code>:</p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">STUDENT_ID</th>\n                <th class=\"tg-th\">COURSE</th>\n                <th class=\"tg-th\">HOBBY</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">Math</td>\n                <td class=\"tg-td\">Soccer</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">Science</td>\n                <td class=\"tg-td\">Painting</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">English</td>\n                <td class=\"tg-td\">Soccer</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">History</td>\n                <td class=\"tg-td\">Painting</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <p>Here, <code>student_id</code> determines both <code>course</code> and <code>hobby</code>, but independently. To convert this to 4NF:</p>\n    <p>Create two tables:</p>\n    <ul>\n        <li><code>STUDENTS_COURSES</code>: with columns <code>student_id</code>, <code>course</code></li>\n        <li><code>STUDENTS_HOBBIES</code>: with columns <code>student_id</code>, <code>hobby</code></li>\n    </ul>\n    <h4 class=\"bold-maroon\">\"STUDENTS_COURSES\" Table:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">STUDENT_ID</th>\n                <th class=\"tg-th\">COURSE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">Math</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">Science</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">English</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">History</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">\"STUDENTS_HOBBIES\" Table:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">STUDENT_ID</th>\n                <th class=\"tg-th\">HOBBY</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">Soccer</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">Painting</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">Soccer</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">Painting</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Fifth Normal Form (5NF)</h4>\n    <p><b>Definition:</b> A table is in 5NF if it is in 4NF and every join dependency in the table is implied by the candidate keys. This means that the table cannot be decomposed into smaller tables without losing information.</p>\n    <h4 class=\"bold-maroon\">Example:</h4>\n    <p>Consider a table <code>PROJECT_ASSIGNMENTS</code>:</p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">EMP_ID</th>\n                <th class=\"tg-th\">PROJECT_ID</th>\n                <th class=\"tg-th\">ROLE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">Manager</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">Developer</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">Developer</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">Tester</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <p>If we assume that <code>emp_id</code> is associated with <code>role</code> and <code>project_id</code> independently, then the table can be decomposed to:</p>\n    <p>\"EMP_ROLES\" Table:</p>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">EMP_ID</th>\n                <th class=\"tg-th\">ROLE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">Manager</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">Developer</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">Developer</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">Tester</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">\"PROJECT_ROLES\" Table:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">PROJECT_ID</th>\n                <th class=\"tg-th\">ROLE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">Manager</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">Developer</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">Developer</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">Tester</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <p><code>PROJECT_ASSIGNMENTS</code> table can be reconstructed from <code>emp_roles</code> and <code>project_roles</code> through a join, preserving the original information.</p>\n    <h4 class=\"bold-maroon\">Summary:</h4>\n    <p>Normalization is a step-by-step process of organizing data in a database to reduce redundancy and improve data integrity. Each normal form (1NF, 2NF, 3NF, BCNF, 4NF, 5NF) builds on the previous one by addressing specific types of anomalies and dependencies, leading to a more efficient and reliable database design.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 245,
    "Question": "How can you determine if a string is numeric, alphanumeric, or hexadecimal in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html>\n<head>\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Input Data: Table - TEST_DATA</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">ID</th>\n                <th class=\"tg-th\">DATA_VALUE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">1</td>\n                <td class=\"tg-td\">12345</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">2</td>\n                <td class=\"tg-td\">ABC123</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">3</td>\n                <td class=\"tg-td\">12AB34</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">4</td>\n                <td class=\"tg-td\">ZZZ</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">5</td>\n                <td class=\"tg-td\">0x1A2B</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td class=\"tg-td\">6</td>\n                <td class=\"tg-td\">098765</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">7</td>\n                <td class=\"tg-td\">0 98765</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">SQL Query:</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> id,\ndata_value,\nCASE\nWHEN REGEXP_LIKE<span class=\"SQLFunction\">(</span>data_value, <span class=\"SQLString\">'^[0-9]+$'</span><span class=\"SQLFunction\">)</span>\n<span class=\"SQLKeyword\">THEN</span> <span class=\"SQLString\">'Numeric'</span>\nWHEN REGEXP_LIKE<span class=\"SQLFunction\">(</span>data_value, <span class=\"SQLString\">'^[0-9A-Fa-f]+$'</span><span class=\"SQLFunction\">)</span>\n<span class=\"SQLKeyword\">THEN</span> <span class=\"SQLString\">'Hexadecimal'</span>\nWHEN REGEXP_LIKE<span class=\"SQLFunction\">(</span>data_value, <span class=\"SQLString\">'^[0-9A-Za-z]+$'</span><span class=\"SQLFunction\">)</span>\n<span class=\"SQLKeyword\">THEN</span> <span class=\"SQLString\">'Alphanumeric'</span>\n<span class=\"SQLKeyword\">ELSE</span> <span class=\"SQLString\">'Other'</span>\n<span class=\"SQLKeyword\">END AS</span> value_type\n<span class=\"SQLKeyword\">FROM</span> test_data<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n<h4 class=\"bold-maroon\">Output:</h4>\n<div class=\"scrollable-container\">\n<table class=\"tg\">\n    <thead>\n        <tr>\n            <th class=\"tg-th\">ID</th>\n            <th class=\"tg-th\">DATA_VALUE</th>\n            <th class=\"tg-th\">VALUE_TYPE</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr class=\"input-row-even\">\n            <td class=\"tg-td\">1</td>\n            <td class=\"tg-td\">12345</td>\n            <td class=\"tg-td\">Numeric</td>\n        </tr>\n        <tr class=\"input-row-odd\">\n            <td class=\"tg-td\">2</td>\n            <td class=\"tg-td\">ABC123</td>\n            <td class=\"tg-td\">Hexadecimal</td>\n        </tr>\n        <tr class=\"input-row-even\">\n            <td class=\"tg-td\">3</td>\n            <td class=\"tg-td\">12AB34</td>\n            <td class=\"tg-td\">Hexadecimal</td>\n        </tr>\n        <tr class=\"input-row-odd\">\n            <td class=\"tg-td\">4</td>\n            <td class=\"tg-td\">ZZZ</td>\n            <td class=\"tg-td\">Alphanumeric</td>\n        </tr>\n        <tr class=\"input-row-even\">\n            <td class=\"tg-td\">5</td>\n            <td class=\"tg-td\">0x1A2B</td>\n            <td class=\"tg-td\">Alphanumeric</td>\n        </tr>\n        <tr class=\"input-row-odd\">\n            <td class=\"tg-td\">6</td>\n            <td class=\"tg-td\">098765</td>\n            <td class=\"tg-td\">Numeric</td>\n        </tr>\n        <tr class=\"input-row-even\">\n            <td class=\"tg-td\">7</td>\n            <td class=\"tg-td\">0 98765</td>\n            <td class=\"tg-td\">Other</td>\n        </tr>\n    </tbody>\n        </table>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><code>REGEXP_LIKE(data_value, '^[0-9]+$') THEN 'Numeric'</code>:\n            <ul>\n                <li><b>REGEXP_LIKE(data_value, '^[0-9]+$')</b>: Checks if the <code>data_value</code> contains only numeric digits (0-9).</li>\n                <li><b>^</b>: Asserts the position at the start of the string.</li>\n                <li><b>[0-9]+</b>: Matches one or more digits.</li>\n                <li><b>$</b>: Asserts the position at the end of the string.</li>\n                <li>If <code>data_value</code> matches this pattern, it is classified as 'Numeric'.</li>\n            </ul>\n        </li>\n        <li><code>REGEXP_LIKE(data_value, '^[0-9A-Fa-f]+$') THEN 'Hexadecimal'</code>:\n            <ul>\n                <li><b>REGEXP_LIKE(data_value, '^[0-9A-Fa-f]+$')</b>: Checks if the <code>data_value</code> contains only hexadecimal characters (0-9, A-F, a-f).</li>\n                <li><b>^</b>: Asserts the position at the start of the string.</li>\n                <li><b>[0-9A-Fa-f]+</b>: Matches one or more hexadecimal characters.</li>\n                <li><b>$</b>: Asserts the position at the end of the string.</li>\n                <li>If <code>data_value</code> matches this pattern, it is classified as 'Hexadecimal'.</li>\n            </ul>\n        </li>\n        <li><code>REGEXP_LIKE(data_value, '^[0-9A-Za-z]+$') THEN 'Alphanumeric'</code>:\n            <ul>\n                <li><b>REGEXP_LIKE(data_value, '^[0-9A-Za-z]+$')</b>: Checks if the <code>data_value</code> contains only alphanumeric characters (0-9, A-Z, a-z).</li>\n                <li><b>^</b>: Asserts the position at the start of the string.</li>\n                <li><b>[0-9A-Za-z]+</b>: Matches one or more alphanumeric characters.</li>\n                <li><b>$</b>: Asserts the position at the end of the string.</li>\n                <li>If <code>data_value</code> matches this pattern, it is classified as 'Alphanumeric'.</li>\n            </ul>\n        </li>\n        <li><code>ELSE 'Other'</code>:\n            <ul>\n                <li>If <code>data_value</code> does not match any of the above patterns, it is classified as 'Other'.</li>\n            </ul>\n        </li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 246,
    "Question": "How can you identify and terminate long-running or deadlocked SQL statements in Oracle?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html>\n<head>\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Identifying Long-Running SQL Statements:</h4>\n    <p>To identify long-running SQL statements, you can use the following SQL query:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> s.sid,\ns.serial#,\ns.username,\ns.osuser,\ns.program,\ns.machine,\ns.<span class=\"SQLKeyword\">STATUS</span>,\ns.sql_id,\nq.sql_text\n<span class=\"SQLKeyword\">FROM</span> v$session s\n<span class=\"SQLKeyword\">JOIN</span> v$sql q <span class=\"SQLKeyword\">ON</span> s.sql_id = q.sql_id\n<span class=\"SQLKeyword\">WHERE</span> s.<span class=\"SQLKeyword\">STATUS</span> = <span class=\"SQLString\">'ACTIVE'</span>\n<span class=\"SQLKeyword\">AND</span> s.last_call_et > 300 \n        -- More than 5 minutes (300 seconds)\n<span class=\"SQLKeyword\">ORDER BY</span> s.last_call_et <span class=\"SQLKeyword\">DESC</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Terminating Long-Running SQL Statements:</h4>\n    <p>To terminate a long-running SQL statement, use the following SQL command:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">ALTER SYSTEM KILL SESSION</span> <span class=\"SQLString\">'sid,serial#'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>Example:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">ALTER SYSTEM KILL SESSION</span> <span class=\"SQLString\">'123,456'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Identifying Deadlocked SQL Statements:</h4>\n    <p>To identify deadlocked SQL statements, you can use the following SQL query:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> DECODE<span class=\"SQLFunction\">(</span>request, 0, <span class=\"SQLString\">'Holder: '</span>,\n                            <span class=\"SQLString\">'Waiter: '</span><span class=\"SQLFunction\">)</span>\n       <span class=\"SQLOperator\">||</span> sid <span class=\"SQLKeyword\">AS</span> sess,\n       id1,\n       id2,\n       lmode,\n       request,\n       <span class=\"SQLKeyword\">type</span>\n<span class=\"SQLKeyword\">FROM</span>   v$lock\n<span class=\"SQLKeyword\">WHERE</span>  <span class=\"SQLKeyword\">(</span> id1, id2 <span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">IN</span> <span class=\"SQLKeyword\">(SELECT</span> id1,\n                               id2\n                        <span class=\"SQLKeyword\">FROM</span>   v$lock\n                        <span class=\"SQLKeyword\">WHERE</span>  request > 0<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">ORDER BY</span> id1,\n          request<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Terminating Deadlocked SQL Statements:</h4>\n    <p>To terminate a deadlocked SQL statement, use the following SQL command:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">ALTER SYSTEM KILL SESSION</span> <span class=\"SQLString\">'sid,serial#'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Notes:</h4>\n    <ul>\n        <li>Ensure you have the necessary privileges to query the <code>v$</code> views and execute the <code>ALTER SYSTEM KILL SESSION</code> command.</li>\n        <li>Use caution when terminating sessions, as this can lead to the loss of unsaved work and could affect application stability.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 247,
    "Question": "Which operation is generally more time-consuming in Oracle: creating a table with data or updating a table? Explain why.",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html>\n<head>\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Creating a Table with Data:</h4>\n    <p>Creating a table with a large amount of data generally involves more time-consuming operations compared to updating a table. Here's why:</p>\n    <ul>\n        <li><strong>DDL Operation:</strong> Involves creating a new structure in the database.</li>\n        <li><strong>Data Retrieval:</strong> Data is fetched from source tables.</li>\n        <li><strong>Data Insertion:</strong> The retrieved data is inserted into the new table.</li>\n        <li><strong>Index Creation:</strong> If indexes are defined, they need to be created and populated.</li>\n        <li><strong>Constraint Application:</strong> Constraints like primary keys are applied.</li>\n        <li><strong>Logging:</strong> Extensive logging to the redo log files, especially without direct path load.</li>\n    </ul>\n    <p><strong>Example:</strong></p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> new_employees <span class=\"SQLKeyword\">AS</span>\n<span class=\"SQLKeyword\">SELECT *</span> <span class=\"SQLKeyword\">FROM</span> employees<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Updating a Table:</h4>\n    <p>Updating a table involves modifying existing rows, which generally requires less overhead than creating a new table\n:</p>\n    <ul>\n        <li><strong>DML Operation:</strong> Updates existing data.</li>\n        <li><strong>Data Retrieval:</strong> Identifies rows to be updated.</li>\n        <li><strong>Data Modification:</strong> Modifies the identified rows.</li>\n        <li><strong>Logging:</strong> Logs the changes to redo logs.</li>\n        <li><strong>Constraints and Indexes:</strong> Oracle checks constraints and updates indexes related to the updated columns.</li>\n        <li><strong>Transaction Management:</strong> Ensures ACID properties during the update.</li>\n    </ul>\n    <p><strong>Example:</strong></p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">UPDATE</span> employees\n<span class=\"SQLKeyword\">SET</span> salary = salary * 1.1\n<span class=\"SQLKeyword\">WHERE</span> dept_id = 10<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Conclusion:</h4>\n    <p>Creating a table with data generally takes more time than updating a table due to the complexity of operations involved in data insertion, index creation, constraint application, and logging. However, if the update operation affects a large portion of the table or is particularly complex, it can also be time-consuming.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 248,
    "Question": "How can a carriage return be inserted into a string in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html>\n<head>\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n    </style>\n</head>\n<body>\n    <p>In Oracle SQL, you can insert a carriage return into a string by using the <code>CHR</code> function. The ASCII value for a carriage return is 13, and for a line feed (newline), it is 10.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    <span class=\"SQLString\">'First Line'</span>\n    <span class=\"SQLOperator\">||</span> CHR<span class=\"SQLFunction\">(</span>10<span class=\"SQLFunction\">)</span>\n    <span class=\"SQLOperator\">||</span> <span class=\"SQLString\">'Second Line'</span> <span class=\"SQLKeyword\">AS</span> result\n<span class=\"SQLKeyword\">FROM</span>\n    dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th class=\"tg-th\">RESULT</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td class=\"tg-td\">First Line<br/>Second Line</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><strong>CHR(13):</strong> Represents the carriage return character.</li>\n        <li><strong>CHR(10):</strong> Represents the line feed (newline) character.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 249,
    "Question": "How and why should indexes be rebuilt in Oracle?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html>\n<head>\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">Why Rebuild Indexes?</h4>\n    <ul>\n        <li><strong>Fragmentation:</strong> Indexes can become fragmented over time due to DML operations, leading to inefficient space usage and slower performance.</li>\n        <li><strong>Performance Degradation:</strong> Fragmented indexes can slow down queries as the database needs to perform additional I/O operations to read the fragmented blocks.</li>\n        <li><strong>Space Reclamation:</strong> Rebuilding indexes can reclaim space previously occupied by deleted or outdated index entries.</li>\n        <li><strong>Improved Statistics:</strong> Rebuilding indexes can update their statistics, helping the Oracle optimizer make better execution plan decisions.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">How to Rebuild Indexes</h4>\n    <p>Use the <code>ALTER INDEX ... REBUILD</code> command to rebuild an index.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">ALTER INDEX</span> index_name <span class=\"SQLKeyword\">REBUILD</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>To rebuild all indexes on a table, you can use a loop in PL/SQL:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">BEGIN</span>\n    <span class=\"SQLKeyword\">FOR</span> idx <span class=\"SQLKeyword\">IN</span> <span class=\"SQLKeyword\">(SELECT</span> index_name\n                <span class=\"SQLKeyword\">FROM</span>   user_indexes\n                <span class=\"SQLKeyword\">WHERE</span>  table_name = <span class=\"SQLString\">'TABLE_NAME'</span><span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">LOOP</span>\n    EXECUTE IMMEDIATE <span class=\"SQLString\">'ALTER INDEX '</span><span class=\"SQLOperator\">||</span> idx.index_name<span class=\"SQLOperator\">||</span> <span class=\"SQLString\">' REBUILD'</span><span class=\"SQLOperator\">;</span>\n    <span class=\"SQLKeyword\">END LOOP</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">END</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>To speed up the rebuild process, you can rebuild the indexes in parallel:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">ALTER INDEX</span> index_name <span class=\"SQLKeyword\">REBUILD PARALLEL</span> 4<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>If the index is partitioned, you can rebuild individual partitions:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">ALTER INDEX</span> index_name <span class=\"SQLKeyword\">REBUILD PARTITION</span> partition_name<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Monitoring Indexes</h4>\n    <p>Before and after rebuilding indexes, it is important to monitor their status and performance. You can check the index fragmentation status using the <code>DBA_INDEXES</code> view:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> index_name,\nblevel,\nleaf_blocks,\n<span class=\"SQLKeyword\">DISTINCT_KEYS</span>\n<span class=\"SQLKeyword\">FROM</span> dba_indexes\n<span class=\"SQLKeyword\">WHERE</span> table_name = <span class=\"SQLString\">'ORDERS'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <p>Gather statistics on the indexes to ensure the optimizer has up-to-date information:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\">EXEC DBMS_STATS.GATHER_INDEX_STATS<span class=\"SQLFunction\">(</span><span class=\"SQLString\">'SCHEMA_NAME'</span>, <span class=\"SQLString\">'INDEX_NAME'</span><span class=\"SQLFunction\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Conclusion:</h4>\n    <p>Rebuilding indexes in Oracle can improve query performance, reclaim space, and update index statistics. It is particularly important for tables with high DML activity or noticeable performance degradation. Use the <code>ALTER INDEX ... REBUILD</code> command to rebuild indexes, and consider rebuilding in parallel for large indexes. Regular monitoring and maintenance of indexes ensure optimal database performance.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 250,
    "Question": "Describe scenarios where indexes might not be used by the Oracle optimizer.",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html>\n<head>\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n            margin-left: 0;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        ul {\n            padding-left: 20px;\n            margin-bottom: 20px;\n        }\n    </style>\n</head>\n<body>\n    <ul>\n        <li><strong>High Selectivity of Columns:</strong></li>\n        <ul>\n            <li><b>Scenario:</b> The query retrieves a large proportion of rows from the table.</li>\n            <li><b>Explanation:</b> If the query selects a large percentage of rows, a full table scan may be more efficient than using an index. The optimizer will avoid the index if the cost of reading the index and the corresponding table rows is higher than a full table scan.</li>\n        </ul>\n        <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT *</span> <span class=\"SQLKeyword\">FROM</span> transactions\n<span class=\"SQLKeyword\">WHERE</span> account_id = 12345<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n        <li><strong>Small Tables:</strong></li>\n        <ul>\n            <li><b>Scenario:</b> The table is small.</li>\n            <li><b>Explanation:</b> For small tables, the overhead of reading an index may be greater than simply scanning the entire table. The optimizer often chooses a full table scan for small tables.</li>\n        </ul>\n        <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT *</span> <span class=\"SQLKeyword\">FROM</span> branch_details\n<span class=\"SQLKeyword\">WHERE</span> branch_id = <span class=\"SQLString\">'001'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n        <li><strong>Use of Functions or Expressions on Indexed Columns:</strong></li>\n        <ul>\n            <li><b>Scenario:</b> Functions or expressions are applied to the indexed column in the WHERE clause.</li>\n            <li><b>Explanation:</b> When functions or expressions are used on indexed columns, the index cannot be used unless a function-based index is created.</li>\n        </ul>\n            <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT *</span> <span class=\"SQLKeyword\">FROM</span> customers\n<span class=\"SQLKeyword\">WHERE</span> UPPER<span class=\"SQLFunction\">(</span>last_name<span class=\"SQLFunction\">)</span> = <span class=\"SQLString\">'CENA'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n        <li><strong>Null Values:</strong></li>\n        <ul>\n            <li><b>Scenario:</b> The query searches for \"NULL\" values.</li>\n            <li><b>Explanation:</b> Traditional B-tree indexes do not include entries where all the indexed columns are \"NULL\". Queries that search for \"NULL\" values will not use these indexes.</li>\n        </ul>\n            <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT *</span> <span class=\"SQLKeyword\">FROM</span> accounts\n<span class=\"SQLKeyword\">WHERE</span> closing_date <span class=\"SQLKeyword\">IS NULL</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n        <li><strong>Complex Join Conditions:</strong></li>\n        <ul>\n            <li><b>Scenario:</b> Complex join conditions are used.</li>\n            <li><b>Explanation:</b> In some cases, the optimizer might determine that a full table scan or a different join method (such as a hash join) is more efficient than using indexes.</li>\n        </ul>\n <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> c.<span class=\"SQLKeyword\">*</span>, t.<span class=\"SQLKeyword\">*</span>\n<span class=\"SQLKeyword\">FROM</span> customers c\n<span class=\"SQLKeyword\">JOIN</span> transactions t <span class=\"SQLKeyword\">ON</span> c.customer_id = t.customer_id\n<span class=\"SQLKeyword\">WHERE</span> t.amount > 10000<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n        <li><strong>Inequality Conditions:</strong></li>\n        <ul>\n            <li><b>Scenario:</b> The query uses inequality conditions (\"<\", \">\", \"!=\").</li>\n            <li><b>Explanation:</b> While indexes can be used for range scans, the optimizer may opt for a full table scan if it expects a large number of rows to be retrieved.</li>\n        </ul>\n        <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT *</span> <span class=\"SQLKeyword\">FROM</span> transactions\n<span class=\"SQLKeyword\">WHERE</span> amount > 50000<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n        <li><strong>Subqueries and Inline Views:</strong></li>\n        <ul>\n            <li><b>Scenario:</b> The query uses subqueries or inline views.</li>\n            <li><b>Explanation:</b> The optimizer may sometimes decide not to use an index if the subquery or inline view is more efficiently processed with a full table scan.</li>\n        </ul>\n<div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT *</span> <span class=\"SQLKeyword\">FROM</span> <span class=\"SQLKeyword\">(SELECT *</span> <span class=\"SQLKeyword\">FROM</span> accounts<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">WHERE</span> branch_id = <span class=\"SQLString\">'001'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n        <li><strong>Use of NOT EQUAL (\"!=\") or NOT IN:</strong></li>\n        <ul>\n            <li><b>Scenario:</b> The query uses \"!=\" or \"NOT IN\" conditions.</li>\n            <li><b>Explanation:</b> These conditions generally lead to full table scans as they are not efficient for indexed access.</li>\n        </ul>\n        <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT *</span> <span class=\"SQLKeyword\">FROM</span> customers\n<span class=\"SQLKeyword\">WHERE</span> branch_id != <span class=\"SQLString\">'001'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n        <li><strong>Use of Wildcards at the Beginning of LIKE Patterns:</strong></li>\n        <ul>\n            <li><b>Scenario:</b> The query uses \"LIKE\" with a leading wildcard.</li>\n            <li><b>Explanation:</b> Leading wildcards in \"LIKE\" conditions prevent the use of indexes.</li>\n        </ul>\n            <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT *</span> <span class=\"SQLKeyword\">FROM</span> customers\n<span class=\"SQLKeyword\">WHERE</span> last_name <span class=\"SQLKeyword\">LIKE</span> <span class=\"SQLString\">'%mith'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n        <li><strong>Outdated or Missing Statistics:</strong></li>\n        <ul>\n            <li><b>Scenario:</b> The statistics on the table or index are outdated or missing.</li>\n            <li><b>Explanation:</b> The optimizer relies on accurate statistics to make decisions. If statistics are outdated or missing, the optimizer might make suboptimal choices.</li>\n        </ul>\n            <div class=\"scrollable-container\">\n<pre class=\"SQLCode\">EXEC DBMS_STATS.GATHER_TABLE_STATS<span class=\"SQLFunction\">(</span><span class=\"SQLString\">'SCHEMA'</span>, <span class=\"SQLString\">'CUSTOMERS'</span><span class=\"SQLFunction\">)</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    </ul>\n    <h4 class=\"bold-maroon\">Conclusion:</h4>\n    <p>The Oracle optimizer may choose not to use indexes in various scenarios to achieve better query performance. Understanding these scenarios helps in diagnosing performance issues and optimizing queries effectively. Regularly updating statistics, avoiding functions on indexed columns, and being aware of the conditions that lead to full table scans can help in making better use of indexes.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 251,
    "Question": "What are external tables in Oracle, and how are they used? Provide an example.",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html>\n<head>\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n    </style>\n</head>\n<body>\n    <h4 class=\"bold-maroon\">What are External Tables?</h4>\n    <p>External tables in Oracle allow querying data stored outside the database as if it were within a regular table. These tables are useful for loading data from external sources without physically storing the data inside the database. Instead, Oracle reads the data directly from the external source.</p>\n    <h4 class=\"bold-maroon\">How are External Tables Used?</h4>\n    <p>External tables are commonly used for:</p>\n    <ul>\n        <li><strong>Loading data from flat files:</strong> Such as CSV or text files, into the database.</li>\n        <li><strong>Reading large data files:</strong> Without importing them into the database.</li>\n        <li><strong>Data exchange between different systems.</strong></li>\n    </ul>\n    <h4 class=\"bold-maroon\">Example:</h4>\n    <p>Consider a scenario where a bank needs to analyze transaction data stored in a CSV file. This data includes transaction details for customers.</p>\n    <h4 class=\"bold-maroon\">Step 1: Create Directory Object</h4>\n    <p>Create a directory object in Oracle that points to the location of the external file. This requires the necessary OS-level permissions.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE OR REPLACE DIRECTORY</span> ext_dir <span class=\"SQLKeyword\">AS</span> <span class=\"SQLString\">'/path/to/your/directory'</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Step 2: Grant Permissions</h4>\n    <p>Grant read and write permissions on the directory to the database user.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">GRANT READ</span>, <span class=\"SQLKeyword\">WRITE ON DIRECTORY</span> ext_dir <span class=\"SQLKeyword\">TO</span> your_username<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Step 3: Define the External Table</h4>\n    <p>Define the external table to map to the external CSV file.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> external_transactions <span class=\"SQLKeyword\">(</span>\n    transaction_id   <span class=\"SQLKeyword\">NUMBER</span>,\n    customer_name    <span class=\"SQLKeyword\">VARCHAR2</span><span class=\"SQLKeyword\">(</span>100<span class=\"SQLKeyword\">)</span>,\n    transaction_date <span class=\"SQLKeyword\">DATE</span>,\n    amount           <span class=\"SQLKeyword\">NUMBER</span>\n<span class=\"SQLKeyword\">)</span>\nORGANIZATION EXTERNAL <span class=\"SQLKeyword\">(</span>TYPE oracle_loader\nDEFAULT DIRECTORY ext_dir ACCESS PARAMETERS <span class=\"SQLKeyword\">(</span>\nRECORDS DELIMITED BY NEWLINE\nFIELDS TERMINATED BY <span class=\"SQLString\">','</span> MISSING FIELD VALUES <span class=\"SQLKeyword\">ARE NULL</span> <span class=\"SQLKeyword\">(</span>\ntransaction_id CHAR <span class=\"SQLKeyword\">(</span> 10 <span class=\"SQLKeyword\">)</span>,\ncustomer_name CHAR <span class=\"SQLKeyword\">(</span> 100 <span class=\"SQLKeyword\">)</span>,\ntransaction_date CHAR <span class=\"SQLKeyword\">(</span> 10 <span class=\"SQLKeyword\">)</span> DATE_FORMAT DATE MASK <span class=\"SQLString\">\"YYYY-MM-DD\"</span>,\namount CHAR <span class=\"SQLKeyword\">(</span> 10 <span class=\"SQLKeyword\">)</span>\n        <span class=\"SQLKeyword\">)</span>\n    <span class=\"SQLKeyword\">)</span> LOCATION <span class=\"SQLKeyword\">(</span> <span class=\"SQLString\">'transactions.csv'</span> <span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">) REJECT LIMIT UNLIMITED</span><span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Step 4: Query the External Table</h4>\n    <p>Query the external table as if it were a regular table.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT *</span> <span class=\"SQLKeyword\">FROM</span> external_transactions<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Example Data (transactions.csv):</h4>\n    <p>The contents of the CSV file might look like this:</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\">transaction_id,customer_name,transaction_date,amount\n1,Amitabh Bachchan,2024-01-01,5000\n2,Leonardo DiCaprio,2024-01-02,7500\n3,Shah Rukh Khan,2024-01-03,10000\n4,Meryl Streep,2024-01-04,12000\n5,Rajinikanth,2024-01-05,8500\n6,Scarlett Johansson,2024-01-06,9500\n</pre>\n</div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><strong>Directory Object:</strong> A directory object (<code>ext_dir</code>) is created to point to the file system directory containing the external data file.</li>\n        <li><strong>Permissions:</strong> Permissions are granted to the user to read and write to this directory.</li>\n        <li><strong>External Table Definition:</strong> An external table (<code>external_transactions</code>) is defined with columns that map to the fields in the CSV file. The <code>ACCESS PARAMETERS</code> clause specifies how the file is formatted and how to parse it.</li>\n        <li><strong>Querying Data:</strong> The external table can be queried just like any other table in the database, providing a seamless interface for working with external data.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Benefits of Using External Tables:</h4>\n    <ul>\n        <li><strong>Performance:</strong> Allows processing of large external files without the need to load them into the database.</li>\n        <li><strong>Flexibility:</strong> Facilitates integration with external data sources.</li>\n        <li><strong>Ease of Use:</strong> Simplifies the process of loading and querying external data.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Conclusion:</h4>\n    <p>External tables in Oracle provide an efficient way to work with data stored outside the database. By defining an external table, it is possible to query external data files directly as if they were regular database tables. This feature is particularly useful for loading and analyzing large datasets from external sources.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 252,
    "Question": "Describe various scalar (row-level) functions available in Oracle SQL with examples.",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Scalar (row-level) functions in Oracle SQL operate on individual rows and return a single value for each row. These functions can be classified into several categories:</p>\n    <h4 class=\"bold-maroon\">Character Functions</h4>\n    <h4 class=\"bold-maroon\">1. UPPER: Converts a string to uppercase.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    <span class=\"SQLString\">'newton'</span>        <span class=\"SQLKeyword\">AS</span> original,\n    upper<span class=\"SQLFunction\">(</span><span class=\"SQLString\">'newton'</span><span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> after_function\n<span class=\"SQLKeyword\">FROM</span>\n    dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORIGINAL</th>\n                <th>AFTER_FUNCTION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>newton</td>\n                <td>NEWTON</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">2. LOWER: Converts a string to lowercase.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    <span class=\"SQLString\">'NEWTON'</span>        <span class=\"SQLKeyword\">AS</span> original,\n    lower<span class=\"SQLFunction\">(</span><span class=\"SQLString\">'NEWTON'</span><span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> after_function\n<span class=\"SQLKeyword\">FROM</span>\n    dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORIGINAL</th>\n                <th>AFTER_FUNCTION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>NEWTON</td>\n                <td>newton</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">3. SUBSTR: Extracts a substring from a string.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    <span class=\"SQLString\">'newton'</span>               <span class=\"SQLKeyword\">AS</span> original,\n    substr<span class=\"SQLFunction\">(</span><span class=\"SQLString\">'newton'</span>, 1, 3<span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> after_function\n<span class=\"SQLKeyword\">FROM</span>\n    dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORIGINAL</th>\n                <th>AFTER_FUNCTION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>newton</td>\n                <td>new</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">4. LENGTH: Returns the length of a string.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    <span class=\"SQLString\">'newton'</span>         <span class=\"SQLKeyword\">AS</span> original,\n    length<span class=\"SQLFunction\">(</span><span class=\"SQLString\">'newton'</span><span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> after_function\n<span class=\"SQLKeyword\">FROM</span>\n    dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORIGINAL</th>\n                <th>AFTER_FUNCTION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>newton</td>\n                <td>6</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">5. TRIM: Removes leading and trailing spaces from a string.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    <span class=\"SQLString\">'  newton  '</span>                <span class=\"SQLKeyword\">AS</span> original,\n    TRIM<span class=\"SQLFunction\">(</span><span class=\"SQLString\">' '</span> <span class=\"SQLKeyword\">FROM</span> <span class=\"SQLString\">'  newton  '</span><span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> after_function\n<span class=\"SQLKeyword\">FROM</span>\n    dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORIGINAL</th>\n                <th>AFTER_FUNCTION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>\"  newton  \"</td>\n                <td>newton</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">6. RTRIM: Removes trailing characters from a string.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    <span class=\"SQLString\">'newton*'</span>             <span class=\"SQLKeyword\">AS</span> original,\n    rtrim<span class=\"SQLFunction\">(</span><span class=\"SQLString\">'newton*'</span>, <span class=\"SQLString\">'*'</span><span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> after_function\n<span class=\"SQLKeyword\">FROM</span>\n    dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORIGINAL</th>\n                <th>AFTER_FUNCTION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>newton*</td>\n                <td>newton</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">7. LTRIM: Removes leading characters from a string.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    <span class=\"SQLString\">'*newton'</span>             <span class=\"SQLKeyword\">AS</span> original,\n    ltrim<span class=\"SQLFunction\">(</span><span class=\"SQLString\">'*newton'</span>, <span class=\"SQLString\">'*'</span><span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> after_function\n<span class=\"SQLKeyword\">FROM</span>\n    dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORIGINAL</th>\n                <th>AFTER_FUNCTION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>*newton</td>\n                <td>newton</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">8. RPAD: Pads the right side of a string with a specified character to a certain length.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    <span class=\"SQLString\">'newton'</span>                <span class=\"SQLKeyword\">AS</span> original,\n    rpad<span class=\"SQLFunction\">(</span><span class=\"SQLString\">'newton'</span>, 10, <span class=\"SQLString\">'*'</span><span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> after_function\n<span class=\"SQLKeyword\">FROM</span>\n    dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORIGINAL</th>\n                <th>AFTER_FUNCTION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>newton</td>\n                <td>newton**</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">9. LPAD: Pads the left side of a string with a specified character to a certain length.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span>\n    <span class=\"SQLString\">'newton'</span>                <span class=\"SQLKeyword\">AS</span> original,\n    lpad<span class=\"SQLFunction\">(</span><span class=\"SQLString\">'newton'</span>, 10, <span class=\"SQLString\">'*'</span><span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> after_function\n<span class=\"SQLKeyword\">FROM</span>\n    dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORIGINAL</th>\n                <th>AFTER_FUNCTION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>newton</td>\n                <td>**newton</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">10. INITCAP: Capitalizes the first letter of each word in a string.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLString\">'oracle database'</span> <span class=\"SQLKeyword\">AS</span> original,\nINITCAP<span class=\"SQLFunction\">(</span><span class=\"SQLString\">'oracle database'</span><span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> after_function\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORIGINAL</th>\n                <th>AFTER_FUNCTION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>oracle database</td>\n                <td>Oracle Database</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Number Functions</h4>\n    <h4 class=\"bold-maroon\">1. CEIL: Rounds a number up to the nearest integer.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> 123.7 <span class=\"SQLKeyword\">AS</span> original,\nCEIL<span class=\"SQLFunction\">(</span>123.7<span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> after_function\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORIGINAL</th>\n                <th>AFTER_FUNCTION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>123.7</td>\n                <td>124</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">2. FLOOR: Rounds a number down to the nearest integer.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> 123.7 <span class=\"SQLKeyword\">AS</span> original,\nFLOOR<span class=\"SQLFunction\">(</span>123.7<span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> after_function\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORIGINAL</th>\n                <th>AFTER_FUNCTION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>123.7</td>\n                <td>123</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">3. ABS: Returns the absolute value of a number.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> - 123 <span class=\"SQLKeyword\">AS</span> original,\nABS<span class=\"SQLFunction\">(</span>&bull; 123<span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> after_function\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORIGINAL</th>\n                <th>AFTER_FUNCTION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>-123</td>\n                <td>123</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">4. SQRT: Returns the square root of a number.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> 144 <span class=\"SQLKeyword\">AS</span> original,\nSQRT<span class=\"SQLFunction\">(</span>144<span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> after_function\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORIGINAL</th>\n                <th>AFTER_FUNCTION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>144</td>\n                <td>12</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">5. POWER: Returns a number raised to the power of another number.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> 2 <span class=\"SQLKeyword\">AS</span> base,\n3 <span class=\"SQLKeyword\">AS</span> exponent,\nPOWER<span class=\"SQLFunction\">(</span>2, 3<span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> after_function\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>BASE</th>\n                <th>EXPONENT</th>\n                <th>AFTER_FUNCTION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>2</td>\n                <td>3</td>\n                <td>8</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">6. ROUND: Rounds a number to a specified number of decimal places.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> 123.456 <span class=\"SQLKeyword\">AS</span> original,\nROUND<span class=\"SQLFunction\">(</span>123.456, 2<span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> after_function\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORIGINAL</th>\n                <th>AFTER_FUNCTION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>123.456</td>\n                <td>123.46</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">7. TRUNC: Truncates a number to a specified number of decimal places.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> 123.456 <span class=\"SQLKeyword\">AS</span> original,\nTRUNC<span class=\"SQLFunction\">(</span>123.456, 2<span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> after_function\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORIGINAL</th>\n                <th>AFTER_FUNCTION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>123.456</td>\n                <td>123.45</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">8. LEAST: Returns the smallest value from a list of expressions.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> 10 <span class=\"SQLKeyword\">AS</span> value1,\n20 <span class=\"SQLKeyword\">AS</span> value2,\n30 <span class=\"SQLKeyword\">AS</span> value3,\nLEAST<span class=\"SQLFunction\">(</span>10, 20, 30<span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> after_function\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>VALUE1</th>\n                <th>VALUE2</th>\n                <th>VALUE3</th>\n                <th>AFTER_FUNCTION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>10</td>\n                <td>20</td>\n                <td>30</td>\n                <td>10</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Date Functions</h4>\n    <h4 class=\"bold-maroon\">1. SYSDATE: Returns the current date and time from the system.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> SYSDATE <span class=\"SQLKeyword\">AS</span> CURRENT_DATE\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CURRENT_DATE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>2024-07-31 21:32:45</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">2. SYSTIMESTAMP: Returns the current date and time, including fractional seconds and time zone.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> SYSTIMESTAMP <span class=\"SQLKeyword\">AS</span> current_timestamp\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CURRENT_TIMESTAMP</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>2024-07-31 21:32:45.123456 -07:00</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">3. NEXT_DAY: Returns the date of the next specified day of the week after a given date.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> SYSDATE <span class=\"SQLKeyword\">AS</span> CURRENT_DATE,\nNEXT_DAY<span class=\"SQLFunction\">(</span>SYSDATE, <span class=\"SQLString\">'MONDAY'</span><span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> next_monday\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CURRENT_DATE</th>\n                <th>NEXT_MONDAY</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>2024-07-31 21:32:45</td>\n                <td>2024-08-05 21:32:45</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">4. LAST_DAY: Returns the last day of the month for a given date.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> SYSDATE <span class=\"SQLKeyword\">AS</span> CURRENT_DATE,\nLAST_DAY<span class=\"SQLFunction\">(</span>SYSDATE<span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> last_day_of_month\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CURRENT_DATE</th>\n                <th>LAST_DAY_OF_MONTH</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>2024-07-31 21:32:45</td>\n                <td>2024-07-31 21:32:45</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">5. ADD_MONTHS: Adds a specified number of months to a date.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> SYSDATE <span class=\"SQLKeyword\">AS</span> CURRENT_DATE,\nADD_MONTHS<span class=\"SQLFunction\">(</span>SYSDATE, 6<span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> six_months_later\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>CURRENT_DATE</th>\n                <th>SIX_MONTHS_LATER</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>2024-07-31 21:32:45</td>\n                <td>2025-01-31 21:32:45</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Conversion Functions</h4>\n    <h4 class=\"bold-maroon\">1. TO_CHAR: Converts a date or number to a string.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> SYSDATE <span class=\"SQLKeyword\">AS</span> CURRENT_DATE,\nTO_CHAR<span class=\"SQLFunction\">(</span>SYSDATE, <span class=\"SQLString\">'YYYY-MM-DD'</span><span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> formatted_date\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n            <th>CURRENT_DATE</th>\n            <th>FORMATTED_DATE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>2024-07-31 21:32:45</td>\n                <td>2024-07-31</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">2. TO_DATE: Converts a string to a date.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLString\">'2024-06-19'</span> <span class=\"SQLKeyword\">AS</span> original_string,\nTO_DATE<span class=\"SQLFunction\">(</span><span class=\"SQLString\">'2024-06-19'</span>, <span class=\"SQLString\">'YYYY-MM-DD'</span><span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> date_value\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORIGINAL_STRING</th>\n                <th>DATE_VALUE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>2024-06-19</td>\n                <td>2024-06-19 00:00:00</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">3. TO_NUMBER: Converts a string to a number.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLString\">'1234'</span> <span class=\"SQLKeyword\">AS</span> original_string,\nTO_NUMBER<span class=\"SQLFunction\">(</span><span class=\"SQLString\">'1234'</span><span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> number_value\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORIGINAL_STRING</th>\n                <th>NUMBER_VALUE</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1234</td>\n                <td>1234</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Special Functions</h4>\n    <h4 class=\"bold-maroon\">1. TRANSLATE: Replaces characters in a string based on a character map.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLString\">'123-456'</span> <span class=\"SQLKeyword\">AS</span> original,\nTRANSLATE<span class=\"SQLFunction\">(</span><span class=\"SQLString\">'123-456-123'</span>, <span class=\"SQLString\">'123'</span>, <span class=\"SQLString\">'ABC'</span><span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> after_function\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORIGINAL</th>\n                <th>AFTER_FUNCTION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>123-456</td>\n                <td>ABC-456-ABC</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">2. CHR: Returns the character with the specified ASCII code.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> 65 <span class=\"SQLKeyword\">AS</span> original,\nCHR<span class=\"SQLFunction\">(</span>65<span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> after_function\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORIGINAL</th>\n                <th>AFTER_FUNCTION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>65</td>\n                <td>A</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">3. ASCII: Returns the ASCII code of a character.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLString\">'A'</span> <span class=\"SQLKeyword\">AS</span> original,\nASCII<span class=\"SQLFunction\">(</span><span class=\"SQLString\">'A'</span><span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> after_function\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORIGINAL</th>\n                <th>AFTER_FUNCTION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>A</td>\n                <td>65</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">4. REPLACE: Replaces occurrences of a substring in a string.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLString\">'Hello World'</span> <span class=\"SQLKeyword\">AS</span> original,\nREPLACE<span class=\"SQLFunction\">(</span><span class=\"SQLString\">'Hello World'</span>, <span class=\"SQLString\">'World'</span>, <span class=\"SQLString\">'Oracle'</span><span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> after_function\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORIGINAL</th>\n                <th>AFTER_FUNCTION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>Hello World</td>\n                <td>Hello Oracle</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">NULL Functions</h4>\n    <h4 class=\"bold-maroon\">1. NVL: Replaces \"NULL\" with a specified value.</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">NULL</span> <span class=\"SQLKeyword\">AS</span> original,\nNVL<span class=\"SQLFunction\">(</span><span class=\"SQLKeyword\">NULL</span>, 0<span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> after_function\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>ORIGINAL</th>\n                <th>AFTER_FUNCTION</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>NULL</td>\n                <td>0</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">2. NVL2: Returns a different value depending on whether an expression is \"NULL\".</h4>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLKeyword\">NULL</span> <span class=\"SQLKeyword\">AS</span> original,\nNVL2<span class=\"SQLFunction\">(</span><span class=\"SQLKeyword\">NULL</span>, <span class=\"SQLString\">'Has Commission'</span>, \n        <span class=\"SQLString\">'No Commission'</span><span class=\"SQLFunction\">)</span> <span class=\"SQLKeyword\">AS</span> after_function\n<span class=\"SQLKeyword\">FROM</span> dual<span class=\"SQLOperator\">;</span>\n</pre>\n</div>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n      "
  },
  {
    "SrNo": 253,
    "Question": "What are the key database objects in Oracle, and how are they used in managing data?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In Oracle Database, objects are schema-level entities that help in storing, organizing, and managing data. These objects are essential for the functionality of databases and are used for a variety of operations, including data storage, retrieval, and manipulation. Here is an overview of the key objects found in an Oracle Database:</p>\n    <h4 class=\"bold-maroon\">1. Tables</h4>\n    <p>Tables are the fundamental storage objects in an Oracle database, storing data in rows and columns, similar to a spreadsheet.</p>\n    <h4 class=\"bold-maroon\">2. Views</h4>\n    <p>Views are virtual tables that present data from one or more tables. They do not store data themselves but provide a way to simplify complex queries and encapsulate data access logic.</p>\n    <h4 class=\"bold-maroon\">3. Indexes</h4>\n    <p>Indexes are database objects that improve the speed of data retrieval operations on a table by providing a faster path to the data.</p>\n    <h4 class=\"bold-maroon\">4. Synonyms</h4>\n    <p>Synonyms are aliases for database objects, allowing users to refer to them with a different name, which can simplify SQL statements and provide location transparency.</p>\n    <h4 class=\"bold-maroon\">5. Sequences</h4>\n    <p>Sequences generate unique numeric values, often used for primary keys. They provide a mechanism for generating consecutive numbers.</p>\n    <h4 class=\"bold-maroon\">6. Constraints</h4>\n    <p>Constraints enforce rules at the table level for data integrity and validation.</p>\n    <h4 class=\"bold-maroon\">7. Triggers</h4>\n    <p>Triggers are procedural code that automatically executes in response to specific events on a table or view, such as INSERT, UPDATE, or DELETE operations.</p>\n    <h4 class=\"bold-maroon\">8. Procedures and Functions</h4>\n    <p>Procedures and functions are PL/SQL code blocks stored in the database that perform specific operations, allowing for code reusability.</p>\n    <h4 class=\"bold-maroon\">9. Packages</h4>\n    <p>Packages are collections of related procedures, functions, variables, and other PL/SQL types, grouped together as a single unit. They promote modular programming and encapsulation.</p>\n    <h4 class=\"bold-maroon\">10. Types</h4>\n    <p>User-defined data types allow customization of data types to suit application requirements. They can encapsulate data and operations.</p>\n    <h4 class=\"bold-maroon\">11. LOBs (Large Objects)</h4>\n    <p>LOBs are used to store large amounts of data such as text, images, or binary files.</p>\n    <h4 class=\"bold-maroon\">12. Clusters</h4>\n    <p>Clusters are storage structures that improve performance by storing related rows from different tables together physically.</p>\n    <h4 class=\"bold-maroon\">13. Database Links</h4>\n    <p>Database links establish a connection between different databases, allowing access to data in a remote database as if it were local.</p>\n    <h4 class=\"bold-maroon\">14. User-defined Libraries</h4>\n    <p>Libraries allow external procedures or functions written in languages like C or Java to be called from PL/SQL code.</p>\n    <h4 class=\"bold-maroon\">15. XML and JSON Data Types</h4>\n    <p>Oracle supports the storage and manipulation of XML and JSON data, allowing for complex data structures and document storage.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 254,
    "Question": "Can you explain how to drop or remove objects from an Oracle Database?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>Dropping objects in an Oracle Database involves permanently removing them from the database schema. This action is irreversible, so it should be performed with caution. Below are the steps and SQL commands for dropping various types of objects in Oracle:</p>\n    <h4 class=\"bold-maroon\">1. Dropping Tables</h4>\n    <p>To remove a table and all of its data from the database, use the \"DROP TABLE\" statement.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DROP TABLE</span> table_name<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <p><strong>Example:</strong></p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DROP TABLE</span> employees<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">2. Dropping Views</h4>\n    <p>The \"DROP VIEW\" statement is used to delete a view. This action removes the view definition but does not affect the underlying tables.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DROP VIEW</span> view_name<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <p><strong>Example:</strong></p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DROP VIEW</span> employee_view<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">3. Dropping Indexes</h4>\n    <p>Use the \"DROP INDEX\" statement to remove an index from the database.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DROP INDEX</span> index_name<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <p><strong>Example:</strong></p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DROP INDEX</span> emp_index<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">4. Dropping Synonyms</h4>\n    <p>The \"DROP SYNONYM\" statement removes a synonym. Specify whether it is a public or private synonym as needed.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DROP [PUBLIC] SYNONYM</span> synonym_name<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <p><strong>Example:</strong></p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DROP SYNONYM</span> emp_synonym<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">DROP PUBLIC SYNONYM</span> public_emp_synonym<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">5. Dropping Sequences</h4>\n    <p>To delete a sequence, use the \"DROP SEQUENCE\" statement.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DROP SEQUENCE</span> sequence_name<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <p><strong>Example:</strong></p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DROP SEQUENCE</span> emp_seq<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">6. Dropping Constraints</h4>\n    <p>Constraints are part of a table structure. Use the \"ALTER TABLE\" statement to remove a specific constraint.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">ALTER TABLE</span> table_name <span class=\"SQLKeyword\">DROP CONSTRAINT</span> constraint_name<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <p><strong>Example:</strong></p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">ALTER TABLE</span> employees <span class=\"SQLKeyword\">DROP CONSTRAINT</span> emp_pk<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">7. Dropping Triggers</h4>\n    <p>To delete a trigger, use the \"DROP TRIGGER\" statement.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DROP TRIGGER</span> trigger_name<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <p><strong>Example:</strong></p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DROP TRIGGER</span> emp_trigger<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">8. Dropping Procedures and Functions</h4>\n    <p>To remove a procedure or function, use the \"DROP PROCEDURE\" or \"DROP FUNCTION\" statement, respectively.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DROP PROCEDURE</span> procedure_name<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">DROP FUNCTION</span> function_name<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <p><strong>Examples:</strong></p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DROP PROCEDURE</span> emp_procedure<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">DROP FUNCTION</span> emp_function<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">9. Dropping Packages</h4>\n    <p>To delete a package, use the \"DROP PACKAGE\" statement. If needed, the package body can be dropped separately using \"DROP PACKAGE BODY\".</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DROP PACKAGE</span> package_name<span class=\"SQLOperator\">;</span>\n<span class=\"SQLKeyword\">DROP PACKAGE BODY</span> package_name<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <p><strong>Example:</strong></p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DROP PACKAGE</span> emp_package<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">10. Dropping Types</h4>\n    <p>To remove a user-defined type, use the \"DROP TYPE\" statement.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DROP TYPE</span> type_name<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <p><strong>Example:</strong></p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DROP TYPE</span> emp_type<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">11. Dropping Columns</h4>\n    <p>To drop a column from a table, use the \"ALTER TABLE\" statement followed by \"DROP COLUMN\".</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">ALTER TABLE</span> table_name <span class=\"SQLKeyword\">DROP COLUMN</span> column_name<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <p><strong>Example:</strong></p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">ALTER TABLE</span> employees <span class=\"SQLKeyword\">DROP COLUMN</span> middle_name<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">12. Dropping Clusters</h4>\n    <p>Use the \"DROP CLUSTER\" statement to remove a cluster. Ensure that all tables within the cluster are dropped first.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DROP CLUSTER</span> cluster_name<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <p><strong>Example:</strong></p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DROP CLUSTER</span> emp_cluster<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-maroon\">13. Dropping Database Links</h4>\n    <p>To delete a database link, use the \"DROP DATABASE LINK\" statement.</p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DROP DATABASE LINK</span> link_name<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <p><strong>Example:</strong></p>\n    <div class=\"scrollable-container\">\n<pre class=\"SQLCode\"><span class=\"SQLKeyword\">DROP DATABASE LINK</span> remote_link<span class=\"SQLOperator\">;</span></pre>\n</div>\n    <h4 class=\"bold-blue\">Important Considerations:</h4>\n    <ul>\n        <li><strong>Dependencies:</strong> Be aware of dependencies when dropping objects, as other objects may rely on them. Dropping an object that is referenced elsewhere can cause errors.</li>\n        <li><strong>Permissions:</strong> Ensure that the necessary permissions are available to drop objects. Typically, only the object owner or a user with appropriate privileges can perform these actions.</li>\n        <li><strong>Backup:</strong> Consider backing up the database or specific objects before dropping them, especially if there is uncertainty about the impact.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 255,
    "Question": "In what scenarios would choosing a temporary table be more beneficial than a regular table in Oracle SQL?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 12px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode {\n                font-size: 11px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In Oracle SQL, temporary tables can be created using the \"CREATE GLOBAL TEMPORARY TABLE\" statement. These tables are useful for temporarily storing intermediate results during a session or transaction. Temporary tables in Oracle can be defined with two different persistence levels:</p>\n    <h4 class=\"bold-maroon\">ON COMMIT DELETE ROWS</h4>\n    <p>This option allows the table's data to persist only for the duration of a transaction. Once the transaction is committed, the data is deleted.</p>\n    <div class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE GLOBAL TEMPORARY TABLE</span> temp_table_name <span class=\"SQLKeyword\">(</span>\n    column1 datatype,\n    column2 datatype,\n    <span class=\"SQLOperator\">...</span>\n<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">ON COMMIT DELETE ROWS</span><span class=\"SQLOperator\">;</span>\n</div>\n    <h4 class=\"bold-maroon\">ON COMMIT PRESERVE ROWS</h4>\n    <p>This option allows the data to persist for the duration of the session. The data remains available until the session ends or is manually deleted.</p>\n    <div class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE GLOBAL TEMPORARY TABLE</span> temp_table_name <span class=\"SQLKeyword\">(</span>\n    column1 datatype,\n    column2 datatype,\n    <span class=\"SQLOperator\">...</span>\n<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">ON COMMIT PRESERVE ROWS</span><span class=\"SQLOperator\">;</span>\n</div>\n    <h4 class=\"bold-maroon\">Example</h4>\n    <p>Here is an example demonstrating both options:</p>\n    <div class=\"SQLCode\"><span class=\"SQLComment\">-- Creating a temporary table with data deleted \n-- after each transaction</span>\n<span class=\"SQLKeyword\">CREATE GLOBAL TEMPORARY TABLE</span> temp_orders <span class=\"SQLKeyword\">(</span>\n    order_id     <span class=\"SQLKeyword\">NUMBER</span>,\n    product_name <span class=\"SQLKeyword\">VARCHAR2</span><span class=\"SQLKeyword\">(</span>50<span class=\"SQLKeyword\">)</span>,\n    quantity     <span class=\"SQLKeyword\">NUMBER</span>\n<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">ON COMMIT DELETE ROWS</span><span class=\"SQLOperator\">;</span>\n<span class=\"SQLComment\">-- Creating a temporary table with data preserved for the session</span>\n<span class=\"SQLKeyword\">CREATE GLOBAL TEMPORARY TABLE</span> session_temp_orders <span class=\"SQLKeyword\">(</span>\n    order_id     <span class=\"SQLKeyword\">NUMBER</span>,\n    product_name <span class=\"SQLKeyword\">VARCHAR2</span><span class=\"SQLKeyword\">(</span>50<span class=\"SQLKeyword\">)</span>,\n    quantity     <span class=\"SQLKeyword\">NUMBER</span>\n<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">ON COMMIT PRESERVE ROWS</span><span class=\"SQLOperator\">;</span>\n</div>\n    <h4 class=\"bold-maroon\">Using Temporary Tables</h4>\n    <h4 class=\"bold-blue\">1. Insert Data:</h4>\n    <p>Data can be inserted into a temporary table in the same way as a regular table.</p>\n    <div class=\"SQLCode\"><span class=\"SQLKeyword\">INSERT INTO</span> temp_orders <span class=\"SQLKeyword\">(</span>\norder_id,\nproduct_name,\nquantity\n<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>\n1,\n<span class=\"SQLString\">'Smart Watches'</span>,\n10\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</div>\n    <h4 class=\"bold-blue\">2. Query Data:</h4>\n    <p>Temporary tables can be queried just like regular tables.</p>\n    <div class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT *</span> <span class=\"SQLKeyword\">FROM</span> temp_orders<span class=\"SQLOperator\">;</span>\n</div>\n    <h4 class=\"bold-blue\">3. Transaction Commit:</h4>\n    <p>For \"ON COMMIT DELETE ROWS\", after executing \"COMMIT;\", the data in \"temp_orders\" will be cleared.</p>\n    <p>For \"ON COMMIT PRESERVE ROWS\", the data in \"session_temp_orders\" will remain available after \"COMMIT;\".</p>\n    <h4 class=\"bold-blue\">4. Session End:</h4>\n    <p>Data in \"session_temp_orders\" will remain available throughout the session and will be automatically cleared when the session ends.</p>\n    <h4 class=\"bold-maroon\">Dropping a Temporary Table</h4>\n    <p>The \"DROP TABLE\" command can be used to drop the temporary table after its use:</p>\n    <div class=\"SQLCode\"><span class=\"SQLKeyword\">DROP TABLE</span> temp_orders<span class=\"SQLOperator\">;</span>\n</div>\n    <h4 class=\"bold-maroon\">Key Considerations</h4>\n    <ul>\n        <li><strong>Scope:</strong> Temporary tables are visible only within the session or transaction in which they are created.</li>\n        <li><strong>Performance:</strong> Temporary tables are often used to improve performance for complex queries and operations by storing intermediate results.</li>\n        <li><strong>Constraints:</strong> Constraints such as primary keys or unique constraints can be defined on temporary tables, but these constraints only enforce rules within the temporary table itself.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 256,
    "Question": "Describe a scenario where using nested row-level functions in Oracle SQL would be beneficial.",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 12px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode {\n                font-size: 11px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>&bull; In Oracle SQL, a nested row-level function involves using functions on each row of a result set, where functions can be combined or embedded within one another. This approach enables complex data transformations or calculations to be executed at the row level.</p>\n    <h4 class=\"bold-maroon\">Key Points</h4>\n    <ul>\n        <li><strong>Row-Level Functions:</strong> Functions such as \"ROUND()\", \"UPPER()\", or \"LENGTH()\" are applied to individual rows in a query result.</li>\n        <li><strong>Nesting Functions:</strong> Functions can be embedded within other functions to carry out multiple operations on each row. For instance, a \"TRIM()\" function can be used inside an \"UPPER()\" function to first remove spaces and then convert the text to uppercase.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Example: Nesting Functions to Manipulate and Format Data</h4>\n    <div class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> <span class=\"SQLFunction\">UPPER</span><span class=\"SQLKeyword\">(</span><span class=\"SQLFunction\">SUBSTR</span><span class=\"SQLKeyword\">(</span><span class=\"SQLFunction\">TRIM</span><span class=\"SQLKeyword\">(</span>column_name<span class=\"SQLKeyword\">)</span>, 1, 10<span class=\"SQLKeyword\">)</span><span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> formatted_value\n<span class=\"SQLKeyword\">FROM</span> table_name<span class=\"SQLOperator\">;</span>\n</div>\n    <p>In this example:</p>\n    <ul>\n        <li><strong>TRIM(column_name):</strong> removes leading and trailing spaces.</li>\n        <li><strong>SUBSTR(..., 1, 10):</strong> extracts the first 10 characters.</li>\n        <li><strong>UPPER(...):</strong> converts the result to uppercase.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Use Cases</h4>\n    <p>Nested row-level functions are beneficial for tasks like data cleaning, formatting, and performing complex calculations on individual rows before aggregation or further analysis.</p>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 257,
    "Question": "How can multiple rows be converted into a single string in Oracle SQL? Which function is typically used for this purpose?",
    "isHtmlTag": "TRUE",
    "quesType": "Medium",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .tg {\n            border-collapse: collapse;\n            border-color: #bbb;\n            border-spacing: 0;\n            width: auto;\n            max-width: 100%;\n        }\n        .tg th, .tg td {\n            border-color: inherit;\n            border-style: solid;\n            border-width: 1px;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 13px;\n            font-weight: normal;\n            overflow: auto;\n            padding: 2px 5px;\n            text-align: left;\n            vertical-align: top;\n            word-break: normal;\n        }\n        .tg th {\n            background-color: #F0F0F0;\n        }\n        .tg td {\n            color: #0A0A0A;\n        }\n        .input-row-even {\n            background-color: #FFFFFF;\n        }\n        .input-row-odd {\n            background-color: #FFFFFF;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode, .tg {\n                font-size: 12px;\n            }\n            .tg th, .tg td {\n                padding: 8px 4px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode, .tg {\n                font-size: 11px;\n            }\n            .tg th, .tg td {\n                padding: 6px 3px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p> The \"LISTAGG\" function in Oracle SQL is used to concatenate values from multiple rows into a single string, with the option to specify a delimiter.</p>\n    <h4 class=\"bold-maroon\">Example Scenario</h4>\n    <p>Consider a table of employees, where the goal is to concatenate employee names by department into a single string.</p>\n    <h4 class=\"bold-maroon\">Input Data: Table - EMPLOYEES</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>EMPLOYEE_ID</th>\n                <th>EMPLOYEE_NAME</th>\n                <th>DEPARTMENT</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>1</td>\n                <td>Leonardo</td>\n                <td>HR</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>2</td>\n                <td>Brad</td>\n                <td>HR</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>3</td>\n                <td>Scarlett</td>\n                <td>IT</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>4</td>\n                <td>Robert</td>\n                <td>IT</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>5</td>\n                <td>Jennifer</td>\n                <td>IT</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>6</td>\n                <td>Tom</td>\n                <td>Sales</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Query to Concatenate Employee Names by Department</h4>\n    <div class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> Department,\n<span class=\"SQLFunction\">LISTAGG</span><span class=\"SQLKeyword\">(</span>Employee_Name, <span class=\"SQLString\">', '</span><span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">WITHIN</span>\n<span class=\"SQLKeyword\">GROUP</span> <span class=\"SQLKeyword\">(</span>\n<span class=\"SQLKeyword\">ORDER BY</span> Employee_Name\n<span class=\"SQLKeyword\">)</span> <span class=\"SQLKeyword\">AS</span> Employee_Names\n<span class=\"SQLKeyword\">FROM</span> Employees\n<span class=\"SQLKeyword\">GROUP BY</span> Department<span class=\"SQLOperator\">;</span>\n</div>\n    <h4 class=\"bold-maroon\">Output:</h4>\n    <div class=\"scrollable-container\">\n    <table class=\"tg\">\n        <thead>\n            <tr>\n                <th>DEPARTMENT</th>\n                <th>EMPLOYEE_NAMES</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr class=\"input-row-even\">\n                <td>HR</td>\n                <td>Brad, Leonardo</td>\n            </tr>\n            <tr class=\"input-row-odd\">\n                <td>IT</td>\n                <td>Jennifer, Robert, Scarlett</td>\n            </tr>\n            <tr class=\"input-row-even\">\n                <td>Sales</td>\n                <td>Tom</td>\n            </tr>\n        </tbody>\n            </table>\n    </div>\n    <h4 class=\"bold-maroon\">Explanation:</h4>\n    <ul>\n        <li><strong>LISTAGG Function:</strong> Concatenates the \"Employee_Name\" values. The delimiter specified is a comma followed by a space (\", \").</li>\n        <li><strong>WITHIN GROUP (ORDER BY Employee_Name):</strong> Defines the order of concatenation for the names.</li>\n        <li><strong>GROUP BY Department:</strong> Groups results by the \"Department\" column, performing concatenation within each department.</li>\n    </ul>\n    <h4 class=\"bold-maroon\">Considerations</h4>\n    <h4 class=\"bold-blue\">Handling NULL Values</h4>\n    <p>\"LISTAGG\" ignores \"NULL\" values by default. To include \"NULL\" as a placeholder or replace it with a specific string, use \"NVL\" or \"COALESCE\".</p>\n    <h4 class=\"bold-blue\">Handling Overflow</h4>\n    <p>Starting with Oracle 12c Release 2, overflow can be handled using the \"ON OVERFLOW TRUNCATE\" clause. This specifies a maximum length for the concatenated string and appends a truncation indicator if necessary.</p>\n    <h4 class=\"bold-maroon\">Query with NULL Handling and Overflow Protection</h4>\n    <div class=\"SQLCode\"><span class=\"SQLKeyword\">SELECT</span> Department,\n       <span class=\"SQLFunction\">LISTAGG</span><span class=\"SQLKeyword\">(</span><span class=\"SQLFunction\">NVL</span><span class=\"SQLKeyword\">(</span>Employee_Name, <span class=\"SQLString\">'N/A'</span><span class=\"SQLKeyword\">)</span>, <span class=\"SQLString\">', '</span><span class=\"SQLKeyword\">)</span>\n       <span class=\"SQLKeyword\">WITHIN GROUP</span> <span class=\"SQLKeyword\">(</span><span class=\"SQLKeyword\">ORDER BY</span> Employee_Name<span class=\"SQLKeyword\">)</span>\n       <span class=\"SQLKeyword\">ON OVERFLOW TRUNCATE</span> <span class=\"SQLString\">'...'</span> <span class=\"SQLKeyword\">AS</span> Employee_Names\n<span class=\"SQLKeyword\">FROM</span> Employees\n<span class=\"SQLKeyword\">GROUP BY</span> Department<span class=\"SQLOperator\">;</span>\n</div>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 258,
    "Question": "Can you explain how to insert and update NULL or Blank values in an Oracle SQL table?",
    "isHtmlTag": "TRUE",
    "quesType": "High",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .SQLCode {\n            font-size: 16px;\n            font-family: 'Source Code Pro', 'Menlo', 'Monaco', 'Consolas', 'Courier New', monospace;\n            line-height: 1.4;\n            white-space: pre;\n            -o-tab-size: 4;\n            -moz-tab-size: 4;\n            -webkit-tab-size: 4;\n            color: #F8F8F8;\n            background-color: #0A090D;\n            padding: 10px;\n            border-radius: 4px;\n            overflow: auto;\n            width: 100%;\n            max-width: 100%;\n            box-sizing: border-box;\n            margin-bottom: 20px;\n        }\n        .SQLComment {\n            color: #2BF567;\n        }\n        .SQLString {\n            color: #FF7234;\n        }\n        .SQLFunction {\n            color: #FEF505;\n        }\n        .SQLKeyword {\n            color: #52c0fe;\n        }\n        .SQLOperator {\n            color: #DCE1E5;\n        }\n        .SQLErrorHighlight {\n            background-color: #FF7234;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        @media (max-width: 768px) {\n            .SQLCode {\n                font-size: 12px;\n            }\n        }\n        @media (max-width: 480px) {\n            .SQLCode {\n                font-size: 11px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <p>In Oracle SQL, managing \"NULL\" values involves using \"INSERT\" and \"UPDATE\" statements to handle empty or missing data appropriately. Oracle treats empty strings ('') as \"NULL\".</p>\n    <h4 class=\"bold-maroon\">Table Creation Example</h4>\n    <div class=\"SQLCode\"><span class=\"SQLKeyword\">CREATE TABLE</span> Employees <span class=\"SQLKeyword\">(</span>\n    Employee_ID <span class=\"SQLKeyword\">NUMBER</span>,\n    Employee_Name <span class=\"SQLKeyword\">VARCHAR2</span><span class=\"SQLKeyword\">(</span>50<span class=\"SQLKeyword\">)</span>,\n    Department <span class=\"SQLKeyword\">VARCHAR2</span><span class=\"SQLKeyword\">(</span>50<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</div>\n    <h4 class=\"bold-maroon\">Inserting \"NULL\" Values</h4>\n    <h4 class=\"bold-blue\">Insert Statement with Explicit \"NULL\"</h4>\n    <div class=\"SQLCode\"><span class=\"SQLKeyword\">INSERT INTO</span> Employees <span class=\"SQLKeyword\">(</span>\nEmployee_ID,\nEmployee_Name,\nDepartment\n<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>\n1,\n<span class=\"SQLString\">'Leonardo'</span>,\n<span class=\"SQLKeyword\">NULL</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</div>\n    <h4 class=\"bold-blue\">Insert Statement Omitting \"NULL\" Columns</h4>\n    <div class=\"SQLCode\"><span class=\"SQLKeyword\">INSERT INTO</span> Employees <span class=\"SQLKeyword\">(</span>\nEmployee_ID,\nEmployee_Name\n<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>\n2,\n<span class=\"SQLString\">'Brad'</span>\n<span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</div>\n    <h4 class=\"bold-blue\">Insert Statement with Empty String</h4>\n    <div class=\"SQLCode\"><span class=\"SQLKeyword\">INSERT INTO</span> Employees <span class=\"SQLKeyword\">(</span>Employee_ID, Employee_Name, Department<span class=\"SQLKeyword\">)</span>\n<span class=\"SQLKeyword\">VALUES</span> <span class=\"SQLKeyword\">(</span>3, <span class=\"SQLString\">'Angelina'</span>, <span class=\"SQLString\">''</span><span class=\"SQLKeyword\">)</span><span class=\"SQLOperator\">;</span>\n</div>\n    <p>Inserting an empty string into \"Department\" results in a \"NULL\" value being stored due to Oracle's treatment of empty strings as \"NULL\".</p>\n    <h4 class=\"bold-maroon\">Updating Existing Values to \"NULL\"</h4>\n    <h4 class=\"bold-blue\">Update Statement to Set a Column to \"NULL\"</h4>\n    <div class=\"SQLCode\"><span class=\"SQLKeyword\">UPDATE</span> Employees\n<span class=\"SQLKeyword\">SET</span> Department = <span class=\"SQLKeyword\">NULL</span>\n<span class=\"SQLKeyword\">WHERE</span> Employee_ID = 2<span class=\"SQLOperator\">;</span>\n</div>\n    <h4 class=\"bold-blue\">Update Statement with Empty String</h4>\n    <div class=\"SQLCode\"><span class=\"SQLKeyword\">UPDATE</span> Employees\n<span class=\"SQLKeyword\">SET</span> Department = <span class=\"SQLString\">''</span>\n<span class=\"SQLKeyword\">WHERE</span> Employee_ID = 2<span class=\"SQLOperator\">;</span>\n</div>\n    <p>Setting a column to an empty string results in the column being set to \"NULL\".</p>\n    <h4 class=\"bold-maroon\">Summary:</h4>\n    <ul>\n        <li><strong>Inserting \"NULL\" Values:</strong> Use \"NULL\" in the \"INSERT\" statement, omit the column if it allows \"NULL\", or use an empty string (''), which Oracle treats as \"NULL\".</li>\n        <li><strong>Updating to \"NULL\":</strong> Use the \"UPDATE\" statement with \"SET column = NULL\" or use an empty string to achieve the same effect.</li>\n    </ul>\n<br>\n</body>\n</html>"
  },
  {
    "SrNo": 259,
    "Question": "Which online resources, websites, or blogs do you frequently use to stay informed about database technologies?",
    "isHtmlTag": "TRUE",
    "quesType": "Low",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style type=\"text/css\">\n        body {\n            background-color: #FFFFFF;\n            color: #0A0A0A;\n            font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\n            font-size: 16px;\n            line-height: 1.5;\n            margin: 0;\n            padding: 10px;\n        }\n        .scrollable-container {\n            overflow-x: auto;\n            width: 100%;\n        }\n        .bold-blue {\n            font-weight: bold;\n            color: #007ACC;\n            text-align: left;\n        }\n        .bold-maroon {\n            font-weight: bold;\n            color: #B61326;\n            text-align: left;\n        }\n        ul {\n            list-style-type: none;\n            padding: 0;\n        }\n        li {\n            padding: 5px 0;\n        }\n        @media (max-width: 768px) {\n            body {\n                font-size: 16px;\n            }\n        }\n        @media (max-width: 480px) {\n            body {\n                font-size: 16px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <h4>Here are some online resources, websites, and blogs that are useful for staying informed about database technologies, especially Oracle:</h4>\n    <h4 class=\"bold-maroon\">Mention Specific Resources:</h4>\n    <p>Start by listing a few well-known and respected resources you use regularly. This shows your familiarity with reputable sources in the industry.</p>\n    <h4 class=\"bold-maroon\">Example Sites or Blogs:</h4>\n    <ul>\n        <li><strong>Oracle Blogs:</strong> \"I regularly read the <a href=\"https://blogs.oracle.com/\" target=\"_blank\">Oracle Blogs</a> for official updates and insights directly from Oracle developers and experts.\"</li>\n        <li><strong>Database Journal:</strong> \"I visit <a href=\"https://www.databasejournal.com/\" target=\"_blank\">Database Journal</a> for articles and tutorials on various database technologies, including Oracle, SQL Server, and MySQL.\"</li>\n        <li><strong>Reddit /r/Database:</strong> \"The <a href=\"https://www.reddit.com/r/database/\" target=\"_blank\">Database subreddit</a> is a great community-driven resource where I learn from discussions and shared experiences.\"</li>\n        <li><strong>Stack Overflow:</strong> \"I follow <a href=\"https://stackoverflow.com/\" target=\"_blank\">Stack Overflow</a> for practical solutions and to see real-world problems and their solutions.\"</li>\n        <li><strong>DBA Stack Exchange:</strong> \"I frequent <a href=\"https://dba.stackexchange.com/\" target=\"_blank\">DBA Stack Exchange</a> to see questions and discussions related to database administration.\"</li>\n        <li><strong>YouTube Channels:</strong> \"Channels like Oracle Learning offer visual and tutorial-based learning that helps me understand complex topics.\"</li>\n        <li><strong>Medium Articles:</strong> \"I find detailed articles on Medium written by database professionals about new technologies and best practices.\"</li>\n        <li><strong>Ask Tom (Ask The Oracle Mentors):</strong> \"<a href=\"https://asktom.oracle.com/\" target=\"_blank\">Ask Tom</a> is a great platform for getting expert advice directly from Oracle mentors.\"</li>\n        <li><strong>PSOUG Oracle PL/SQL Code Library and Resources:</strong> \"<a href=\"https://psoug.org/\" target=\"_blank\">PSOUG</a> provides an extensive code library and resources for PL/SQL development.\"</li>\n        <li><strong>Oracle Base:</strong> \"<a href=\"https://oracle-base.com/\" target=\"_blank\">Oracle Base</a> offers comprehensive tutorials and articles on Oracle database management and development.\"</li>\n        <li><strong>SQL Language Reference:</strong> \"The <a href=\"https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/\" target=\"_blank\">SQL Language Reference</a> from Oracle is my go-to source for official SQL syntax and features documentation.\"</li>\n    </ul>\n<br>\n</body>\n</html>"
  }
]